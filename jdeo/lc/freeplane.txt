org.freeplane.features.presentations.mindmapmode.SlideEditorController	[org.freeplane.features.presentations.mindmapmode.SlideEditorController::org.freeplane.features.presentations.mindmapmode.Slide slide, org.freeplane.features.presentations.mindmapmode.SlideEditorController::org.freeplane.features.presentations.mindmapmode.SlideChangeListener slideChangeListener, org.freeplane.features.presentations.mindmapmode.SlideEditorController::setSlide(org.freeplane.features.presentations.mindmapmode.Slide):void, org.freeplane.features.presentations.mindmapmode.SlideEditorController::javax.swing.JToggleButton tglBtnJumpIn, org.freeplane.features.presentations.mindmapmode.SlideEditorController::javax.swing.JToggleButton tglBtnPlaceSelectedNode, org.freeplane.features.presentations.mindmapmode.SlideEditorController::javax.swing.JToggleButton tglBtnChangeZoom, org.freeplane.features.presentations.mindmapmode.SlideEditorController::javax.swing.JCheckBox checkBoxShowOnlySelectedNodes, org.freeplane.features.presentations.mindmapmode.SlideEditorController::javax.swing.JCheckBox checkBoxShowAncestors, org.freeplane.features.presentations.mindmapmode.SlideEditorController::javax.swing.JCheckBox checkBoxShowDescendants, org.freeplane.features.presentations.mindmapmode.SlideEditorController::javax.swing.JToggleButton tglbtnSetFilter, org.freeplane.features.presentations.mindmapmode.SlideEditorController::javax.swing.JToggleButton tglbtnSetFoldingState, org.freeplane.features.presentations.mindmapmode.SlideEditorController::javax.swing.JLabel lblZoomFactor, org.freeplane.features.presentations.mindmapmode.SlideEditorController::javax.swing.JComponent filterConditionComponentBox, org.freeplane.features.presentations.mindmapmode.SlideEditorController::removeFilterComponent():void, org.freeplane.features.presentations.mindmapmode.SlideEditorController::updateFilter():void, org.freeplane.features.presentations.mindmapmode.SlideEditorController::javax.swing.JButton btnSelectNodes, org.freeplane.features.presentations.mindmapmode.SlideEditorController::javax.swing.JButton btnSetSelectedNodes, org.freeplane.features.presentations.mindmapmode.SlideEditorController::javax.swing.JButton btnAddSelectedNodes, org.freeplane.features.presentations.mindmapmode.SlideEditorController::javax.swing.JButton btnRemoveSelectedNodes, org.freeplane.features.presentations.mindmapmode.SlideEditorController::javax.swing.JToggleButton btnAtCenter, org.freeplane.features.presentations.mindmapmode.SlideEditorController::javax.swing.JToggleButton btnOnTheLeft, org.freeplane.features.presentations.mindmapmode.SlideEditorController::javax.swing.JToggleButton btnOnTheRight, org.freeplane.features.presentations.mindmapmode.SlideEditorController::javax.swing.JComponent[] filterRelatedButtons, org.freeplane.features.presentations.mindmapmode.SlideEditorController::org.freeplane.features.presentations.mindmapmode.PresentationState presentationState, org.freeplane.features.presentations.mindmapmode.SlideEditorController::javax.swing.JComponent[] allButtons, org.freeplane.features.presentations.mindmapmode.SlideEditorController::disableUI():void, org.freeplane.features.presentations.mindmapmode.SlideEditorController::javax.swing.JComponent filterNotSetLabel, org.freeplane.features.presentations.mindmapmode.SlideEditorController::javax.swing.JToggleButton[] positionButtons, org.freeplane.features.presentations.mindmapmode.SlideEditorController::setNodePlacementControlsEnabled(boolean, org.freeplane.features.map.IMapSelection.NodePosition):void, org.freeplane.features.presentations.mindmapmode.SlideEditorController::createSlideContentBox():javax.swing.Box, org.freeplane.features.presentations.mindmapmode.SlideEditorController::updateUI():void]
org.freeplane.features.presentations.mindmapmode.SlideEditorController	[org.freeplane.features.presentations.mindmapmode.SlideEditorController::org.freeplane.features.presentations.mindmapmode.Slide slide, org.freeplane.features.presentations.mindmapmode.SlideEditorController::org.freeplane.features.presentations.mindmapmode.SlideChangeListener slideChangeListener, org.freeplane.features.presentations.mindmapmode.SlideEditorController::setSlide(org.freeplane.features.presentations.mindmapmode.Slide):void]
org.freeplane.features.filter.FilterConditionEditor	[org.freeplane.features.filter.FilterConditionEditor::javax.swing.JToggleButton caseSensitive, org.freeplane.features.filter.FilterConditionEditor::javax.swing.JToggleButton approximateMatching, org.freeplane.features.filter.FilterConditionEditor::javax.swing.JToggleButton ignoreDiacritics, org.freeplane.features.filter.FilterConditionEditor::javax.swing.JComboBox elementaryConditions, org.freeplane.features.filter.FilterConditionEditor::org.freeplane.features.filter.FilterController filterController, org.freeplane.features.filter.FilterConditionEditor::javax.swing.JComboBox filteredPropertiesComponent, org.freeplane.features.filter.FilterConditionEditor::javax.swing.JComboBox values, org.freeplane.features.filter.FilterConditionEditor::focusInputField(boolean):void, org.freeplane.features.filter.FilterConditionEditor::isInputFieldFocused():boolean, org.freeplane.features.filter.FilterConditionEditor::java.awt.event.ActionListener enterKeyActionListener, org.freeplane.features.filter.FilterConditionEditor::setValuesEnterKeyListener():void, org.freeplane.features.filter.FilterConditionEditor::setEnterKeyActionListener(java.awt.event.ActionListener):void, org.freeplane.features.filter.FilterConditionEditor::javax.swing.Timer borderRestore, org.freeplane.features.filter.FilterConditionEditor::blink(java.awt.Color):void, org.freeplane.features.filter.FilterConditionEditor::org.freeplane.core.util.collection.ExtendedComboBoxModel filteredPropertiesModel, org.freeplane.features.filter.FilterConditionEditor::java.lang.ref.WeakReference<org.freeplane.features.filter.Filter> lastFilter, org.freeplane.features.filter.FilterConditionEditor::filterChanged(org.freeplane.features.filter.Filter):void, org.freeplane.features.filter.FilterConditionEditor::setValuesEditor():void, org.freeplane.features.filter.FilterConditionEditor::getCondition():org.freeplane.features.filter.condition.ASelectableCondition, org.freeplane.features.filter.FilterConditionEditor::javax.swing.JComboBox filterTargetSelector, org.freeplane.features.filter.FilterConditionEditor::decorate(org.freeplane.features.filter.condition.ASelectableCondition):org.freeplane.features.filter.condition.ASelectableCondition, org.freeplane.features.filter.FilterConditionEditor::javax.swing.JToggleButton btnDeny]
org.freeplane.features.filter.FilterConditionEditor	[org.freeplane.features.filter.FilterConditionEditor::javax.swing.JComboBox values, org.freeplane.features.filter.FilterConditionEditor::focusInputField(boolean):void, org.freeplane.features.filter.FilterConditionEditor::isInputFieldFocused():boolean, org.freeplane.features.filter.FilterConditionEditor::java.awt.event.ActionListener enterKeyActionListener, org.freeplane.features.filter.FilterConditionEditor::setValuesEnterKeyListener():void, org.freeplane.features.filter.FilterConditionEditor::setEnterKeyActionListener(java.awt.event.ActionListener):void, org.freeplane.features.filter.FilterConditionEditor::javax.swing.Timer borderRestore, org.freeplane.features.filter.FilterConditionEditor::blink(java.awt.Color):void]
org.freeplane.features.filter.FilterConditionEditor	[org.freeplane.features.filter.FilterConditionEditor::javax.swing.JComboBox filterTargetSelector, org.freeplane.features.filter.FilterConditionEditor::decorate(org.freeplane.features.filter.condition.ASelectableCondition):org.freeplane.features.filter.condition.ASelectableCondition, org.freeplane.features.filter.FilterConditionEditor::javax.swing.JToggleButton btnDeny]
org.freeplane.features.filter.FilterConditionEditor	[org.freeplane.features.filter.FilterConditionEditor::javax.swing.JComboBox values, org.freeplane.features.filter.FilterConditionEditor::focusInputField(boolean):void, org.freeplane.features.filter.FilterConditionEditor::isInputFieldFocused():boolean, org.freeplane.features.filter.FilterConditionEditor::java.awt.event.ActionListener enterKeyActionListener, org.freeplane.features.filter.FilterConditionEditor::setValuesEnterKeyListener():void, org.freeplane.features.filter.FilterConditionEditor::setEnterKeyActionListener(java.awt.event.ActionListener):void]
org.freeplane.features.filter.FilterConditionEditor	[org.freeplane.features.filter.FilterConditionEditor::javax.swing.JComboBox values, org.freeplane.features.filter.FilterConditionEditor::focusInputField(boolean):void, org.freeplane.features.filter.FilterConditionEditor::isInputFieldFocused():boolean]
org.freeplane.features.filter.FilterConditionEditor	[org.freeplane.features.filter.FilterConditionEditor::javax.swing.JToggleButton caseSensitive, org.freeplane.features.filter.FilterConditionEditor::javax.swing.JToggleButton approximateMatching, org.freeplane.features.filter.FilterConditionEditor::javax.swing.JToggleButton ignoreDiacritics, org.freeplane.features.filter.FilterConditionEditor::javax.swing.JComboBox elementaryConditions, org.freeplane.features.filter.FilterConditionEditor::org.freeplane.features.filter.FilterController filterController, org.freeplane.features.filter.FilterConditionEditor::javax.swing.JComboBox filteredPropertiesComponent, org.freeplane.features.filter.FilterConditionEditor::javax.swing.JComboBox values, org.freeplane.features.filter.FilterConditionEditor::focusInputField(boolean):void, org.freeplane.features.filter.FilterConditionEditor::isInputFieldFocused():boolean, org.freeplane.features.filter.FilterConditionEditor::java.awt.event.ActionListener enterKeyActionListener, org.freeplane.features.filter.FilterConditionEditor::setValuesEnterKeyListener():void, org.freeplane.features.filter.FilterConditionEditor::setEnterKeyActionListener(java.awt.event.ActionListener):void, org.freeplane.features.filter.FilterConditionEditor::javax.swing.Timer borderRestore, org.freeplane.features.filter.FilterConditionEditor::blink(java.awt.Color):void, org.freeplane.features.filter.FilterConditionEditor::org.freeplane.core.util.collection.ExtendedComboBoxModel filteredPropertiesModel, org.freeplane.features.filter.FilterConditionEditor::java.lang.ref.WeakReference<org.freeplane.features.filter.Filter> lastFilter, org.freeplane.features.filter.FilterConditionEditor::filterChanged(org.freeplane.features.filter.Filter):void, org.freeplane.features.filter.FilterConditionEditor::setValuesEditor():void, org.freeplane.features.filter.FilterConditionEditor::getCondition():org.freeplane.features.filter.condition.ASelectableCondition]
org.freeplane.view.swing.map.NodeTooltipManager	[org.freeplane.view.swing.map.NodeTooltipManager::javax.swing.Timer enterTimer, org.freeplane.view.swing.map.NodeTooltipManager::setInitialDelay(int):void, org.freeplane.view.swing.map.NodeTooltipManager::getInitialDelay():int, org.freeplane.view.swing.map.NodeTooltipManager::javax.swing.Timer exitTimer, org.freeplane.view.swing.map.NodeTooltipManager::javax.swing.JToolTip tip, org.freeplane.view.swing.map.NodeTooltipManager::javax.swing.JPopupMenu tipPopup, org.freeplane.view.swing.map.NodeTooltipManager::java.lang.ref.WeakReference<java.awt.Component> focusOwnerRef, org.freeplane.view.swing.map.NodeTooltipManager::org.freeplane.core.ui.MouseInsideListener mouseInsideTooltipListener, org.freeplane.view.swing.map.NodeTooltipManager::java.lang.String toolTipText, org.freeplane.view.swing.map.NodeTooltipManager::java.awt.Point preferredToolTipLocation, org.freeplane.view.swing.map.NodeTooltipManager::javax.swing.JComponent insideComponent, org.freeplane.view.swing.map.NodeTooltipManager::boolean mouseOverComponent, org.freeplane.view.swing.map.NodeTooltipManager::java.awt.event.MouseEvent mouseEvent, org.freeplane.view.swing.map.NodeTooltipManager::setTooltipDelays(org.freeplane.view.swing.map.NodeTooltipManager):void, org.freeplane.view.swing.map.NodeTooltipManager::showTipWindow():void, org.freeplane.view.swing.map.NodeTooltipManager::hideTipWindow():void, org.freeplane.view.swing.map.NodeTooltipManager::initiateToolTip(java.awt.event.MouseEvent):void, org.freeplane.view.swing.map.NodeTooltipManager::getSharedInstance(org.freeplane.features.mode.ModeController):org.freeplane.view.swing.map.NodeTooltipManager]
org.freeplane.view.swing.map.NodeTooltipManager	[org.freeplane.view.swing.map.NodeTooltipManager::javax.swing.Timer enterTimer, org.freeplane.view.swing.map.NodeTooltipManager::setInitialDelay(int):void, org.freeplane.view.swing.map.NodeTooltipManager::getInitialDelay():int]
org.freeplane.view.swing.map.NodeTooltipManager	[org.freeplane.view.swing.map.NodeTooltipManager::org.freeplane.view.swing.map.NodeTooltipManager.ComponentMouseListener componentMouseListener, org.freeplane.view.swing.map.NodeTooltipManager::registerComponent(javax.swing.JComponent):void, org.freeplane.view.swing.map.NodeTooltipManager::unregisterComponent(javax.swing.JComponent):void]
org.freeplane.features.presentations.mindmapmode.NavigationPanelController	[org.freeplane.features.presentations.mindmapmode.NavigationPanelController::org.freeplane.features.presentations.mindmapmode.PresentationState presentationState, org.freeplane.features.presentations.mindmapmode.NavigationPanelController::org.freeplane.core.ui.AFreeplaneAction showNextSlideAction, org.freeplane.features.presentations.mindmapmode.NavigationPanelController::org.freeplane.core.ui.AFreeplaneAction showPreviousSlideAction, org.freeplane.features.presentations.mindmapmode.NavigationPanelController::org.freeplane.core.ui.AFreeplaneAction showFirstSlideAction, org.freeplane.features.presentations.mindmapmode.NavigationPanelController::org.freeplane.core.ui.AFreeplaneAction showLastSlideAction, org.freeplane.features.presentations.mindmapmode.NavigationPanelController::org.freeplane.core.ui.AFreeplaneAction startPresentationAction, org.freeplane.features.presentations.mindmapmode.NavigationPanelController::org.freeplane.features.presentations.mindmapmode.NavigationPanelController.StopPresentationAction stopPresentationAction, org.freeplane.features.presentations.mindmapmode.NavigationPanelController::org.freeplane.core.ui.AFreeplaneAction startPresentationOrShowNextSlideAction, org.freeplane.features.presentations.mindmapmode.NavigationPanelController::org.freeplane.core.ui.AFreeplaneAction showFirstSlideAndStartPresentationAction, org.freeplane.features.presentations.mindmapmode.NavigationPanelController::updateUi():void, org.freeplane.features.presentations.mindmapmode.NavigationPanelController::createNavigationBox():javax.swing.JComponent, org.freeplane.features.presentations.mindmapmode.NavigationPanelController::registerActions(org.freeplane.features.mode.ModeController):void]
org.freeplane.features.url.mindmapmode.FileRevisionsDialog	[org.freeplane.features.url.mindmapmode.FileRevisionsDialog::java.lang.String keyBase, org.freeplane.features.url.mindmapmode.FileRevisionsDialog::key(java.lang.String):java.lang.String, org.freeplane.features.url.mindmapmode.FileRevisionsDialog::java.io.File file, org.freeplane.features.url.mindmapmode.FileRevisionsDialog::createQuestion():java.awt.Component, org.freeplane.features.url.mindmapmode.FileRevisionsDialog::createTable(java.io.File[]):javax.swing.JTable, org.freeplane.features.url.mindmapmode.FileRevisionsDialog::createButton(java.lang.String, java.lang.String, java.awt.event.ActionListener):javax.swing.JButton, org.freeplane.features.url.mindmapmode.FileRevisionsDialog::boolean cancelled, org.freeplane.features.url.mindmapmode.FileRevisionsDialog::java.io.File selectedFile, org.freeplane.features.url.mindmapmode.FileRevisionsDialog::getSelectedFile():java.io.File, org.freeplane.features.url.mindmapmode.FileRevisionsDialog::java.text.SimpleDateFormat dateFormat, org.freeplane.features.url.mindmapmode.FileRevisionsDialog::createRow(java.io.File):java.lang.Object[], org.freeplane.features.url.mindmapmode.FileRevisionsDialog::java.text.NumberFormat fileSizeFormat]
org.freeplane.features.url.mindmapmode.FileRevisionsDialog	[org.freeplane.features.url.mindmapmode.FileRevisionsDialog::java.text.SimpleDateFormat dateFormat, org.freeplane.features.url.mindmapmode.FileRevisionsDialog::createRow(java.io.File):java.lang.Object[], org.freeplane.features.url.mindmapmode.FileRevisionsDialog::java.text.NumberFormat fileSizeFormat]
org.freeplane.features.url.mindmapmode.FileRevisionsDialog	[org.freeplane.features.url.mindmapmode.FileRevisionsDialog::boolean cancelled, org.freeplane.features.url.mindmapmode.FileRevisionsDialog::java.io.File selectedFile, org.freeplane.features.url.mindmapmode.FileRevisionsDialog::getSelectedFile():java.io.File]
org.freeplane.features.url.mindmapmode.FileRevisionsDialog	[org.freeplane.features.url.mindmapmode.FileRevisionsDialog::java.lang.String keyBase, org.freeplane.features.url.mindmapmode.FileRevisionsDialog::key(java.lang.String):java.lang.String, org.freeplane.features.url.mindmapmode.FileRevisionsDialog::java.io.File file, org.freeplane.features.url.mindmapmode.FileRevisionsDialog::createQuestion():java.awt.Component, org.freeplane.features.url.mindmapmode.FileRevisionsDialog::createTable(java.io.File[]):javax.swing.JTable, org.freeplane.features.url.mindmapmode.FileRevisionsDialog::createButton(java.lang.String, java.lang.String, java.awt.event.ActionListener):javax.swing.JButton, org.freeplane.features.url.mindmapmode.FileRevisionsDialog::boolean cancelled, org.freeplane.features.url.mindmapmode.FileRevisionsDialog::java.io.File selectedFile, org.freeplane.features.url.mindmapmode.FileRevisionsDialog::getSelectedFile():java.io.File]
org.freeplane.features.url.mindmapmode.FileRevisionsDialog	[org.freeplane.features.url.mindmapmode.FileRevisionsDialog::java.lang.String keyBase, org.freeplane.features.url.mindmapmode.FileRevisionsDialog::key(java.lang.String):java.lang.String, org.freeplane.features.url.mindmapmode.FileRevisionsDialog::java.io.File file, org.freeplane.features.url.mindmapmode.FileRevisionsDialog::createQuestion():java.awt.Component, org.freeplane.features.url.mindmapmode.FileRevisionsDialog::createTable(java.io.File[]):javax.swing.JTable, org.freeplane.features.url.mindmapmode.FileRevisionsDialog::createButton(java.lang.String, java.lang.String, java.awt.event.ActionListener):javax.swing.JButton]
org.freeplane.features.mode.Controller	[org.freeplane.features.mode.Controller::org.freeplane.core.extension.ExtensionContainer extensionContainer, org.freeplane.features.mode.Controller::quit():void, org.freeplane.features.mode.Controller::shutdown():boolean, org.freeplane.features.mode.Controller::org.freeplane.features.mode.ModeController modeController, org.freeplane.features.mode.Controller::selectMode(java.lang.String):void, org.freeplane.features.mode.Controller::getModeController():org.freeplane.features.mode.ModeController, org.freeplane.features.mode.Controller::java.util.Map<java.lang.String,org.freeplane.features.mode.ModeController> modeControllers, org.freeplane.features.mode.Controller::getModeController(java.lang.String):org.freeplane.features.mode.ModeController, org.freeplane.features.mode.Controller::getModes():java.util.Set<java.lang.String>, org.freeplane.features.mode.Controller::addModeController(org.freeplane.features.mode.ModeController):void, org.freeplane.features.mode.Controller::getCurrentModeController():org.freeplane.features.mode.ModeController, org.freeplane.features.mode.Controller::selectMode(org.freeplane.features.mode.ModeController):void, org.freeplane.features.mode.Controller::org.freeplane.features.mode.ModeController modeController4build, org.freeplane.features.mode.Controller::org.freeplane.features.ui.ViewController viewController, org.freeplane.features.mode.Controller::org.freeplane.features.ui.IMapViewManager mapViewManager]
org.freeplane.features.mode.Controller	[org.freeplane.features.mode.Controller::java.util.Collection<org.freeplane.features.map.IMapLifeCycleListener> mapLifeCycleListeners, org.freeplane.features.mode.Controller::removeMapLifeCycleListener(org.freeplane.features.map.IMapLifeCycleListener):void, org.freeplane.features.mode.Controller::fireMapCreated(org.freeplane.features.map.MapModel):void, org.freeplane.features.mode.Controller::fireMapRemoved(org.freeplane.features.map.MapModel):void]
org.freeplane.features.mode.Controller	[org.freeplane.features.mode.Controller::java.util.Map<java.lang.String,org.freeplane.features.mode.ModeController> modeControllers, org.freeplane.features.mode.Controller::getModeController(java.lang.String):org.freeplane.features.mode.ModeController, org.freeplane.features.mode.Controller::getModes():java.util.Set<java.lang.String>, org.freeplane.features.mode.Controller::addModeController(org.freeplane.features.mode.ModeController):void]
org.freeplane.features.mode.Controller	[org.freeplane.features.mode.Controller::java.util.List<org.freeplane.main.application.ApplicationLifecycleListener> applicationLifecycleListeners, org.freeplane.features.mode.Controller::fireStartupFinished():void, org.freeplane.features.mode.Controller::fireApplicationStopped():void]
org.freeplane.features.mode.Controller	[org.freeplane.features.mode.Controller::org.freeplane.features.mode.ModeController modeController, org.freeplane.features.mode.Controller::selectMode(java.lang.String):void, org.freeplane.features.mode.Controller::getModeController():org.freeplane.features.mode.ModeController, org.freeplane.features.mode.Controller::java.util.Map<java.lang.String,org.freeplane.features.mode.ModeController> modeControllers, org.freeplane.features.mode.Controller::getModeController(java.lang.String):org.freeplane.features.mode.ModeController, org.freeplane.features.mode.Controller::getModes():java.util.Set<java.lang.String>, org.freeplane.features.mode.Controller::addModeController(org.freeplane.features.mode.ModeController):void, org.freeplane.features.mode.Controller::getCurrentModeController():org.freeplane.features.mode.ModeController, org.freeplane.features.mode.Controller::selectMode(org.freeplane.features.mode.ModeController):void, org.freeplane.features.mode.Controller::org.freeplane.features.mode.ModeController modeController4build]
org.freeplane.features.layout.LayoutController	[org.freeplane.features.layout.LayoutController::org.freeplane.features.mode.ExclusivePropertyChain<org.freeplane.api.ChildNodesLayout,org.freeplane.features.map.NodeModel> childrenLayoutHandlers, org.freeplane.features.layout.LayoutController::getEffectiveChildNodesLayout(org.freeplane.features.map.NodeModel):org.freeplane.api.ChildNodesLayout, org.freeplane.features.layout.LayoutController::getChildNodesLayout(org.freeplane.features.map.NodeModel):org.freeplane.api.ChildNodesLayout, org.freeplane.features.layout.LayoutController::getChildNodesAlignment(org.freeplane.features.map.NodeModel):org.freeplane.api.ChildNodesAlignment, org.freeplane.features.layout.LayoutController::getLayoutOrientation(org.freeplane.features.map.NodeModel):org.freeplane.api.LayoutOrientation, org.freeplane.features.layout.LayoutController::getEffectiveLayoutOrientation(org.freeplane.features.map.NodeModel):org.freeplane.api.LayoutOrientation, org.freeplane.features.layout.LayoutController::sidesOf(org.freeplane.features.map.NodeModel, org.freeplane.features.map.NodeModel):boolean[], org.freeplane.features.layout.LayoutController::isTopOrLeft(org.freeplane.features.map.NodeModel, org.freeplane.features.map.NodeModel):boolean, org.freeplane.features.layout.LayoutController::withNodeChangeEventOnLayoutChange(org.freeplane.features.map.NodeModel, java.lang.Runnable):void]
org.freeplane.features.layout.LayoutController	[org.freeplane.features.layout.LayoutController::org.freeplane.features.mode.ExclusivePropertyChain<org.freeplane.api.ChildNodesLayout,org.freeplane.features.map.NodeModel> childrenLayoutHandlers, org.freeplane.features.layout.LayoutController::getEffectiveChildNodesLayout(org.freeplane.features.map.NodeModel):org.freeplane.api.ChildNodesLayout, org.freeplane.features.layout.LayoutController::getChildNodesLayout(org.freeplane.features.map.NodeModel):org.freeplane.api.ChildNodesLayout]
org.freeplane.features.map.MapModel	[org.freeplane.features.map.MapModel::java.util.Map<java.lang.String,org.freeplane.features.map.NodeModel> nodes, org.freeplane.features.map.MapModel::generateNodeID(java.lang.String):java.lang.String, org.freeplane.features.map.MapModel::getNodeForID(java.lang.String):org.freeplane.features.map.NodeModel, org.freeplane.features.map.MapModel::registryID(java.lang.String, org.freeplane.features.map.NodeModel):void, org.freeplane.features.map.MapModel::registryNode(org.freeplane.features.map.NodeModel):java.lang.String, org.freeplane.features.map.MapModel::registryNodeRecursive(org.freeplane.features.map.NodeModel, int):void, org.freeplane.features.map.MapModel::unregistryNodes(org.freeplane.features.map.NodeModel):void]
org.freeplane.features.map.MapModel	[org.freeplane.features.map.MapModel::java.util.Map<java.lang.String,org.freeplane.features.map.NodeModel> nodes, org.freeplane.features.map.MapModel::generateNodeID(java.lang.String):java.lang.String, org.freeplane.features.map.MapModel::getNodeForID(java.lang.String):org.freeplane.features.map.NodeModel, org.freeplane.features.map.MapModel::registryID(java.lang.String, org.freeplane.features.map.NodeModel):void]
org.freeplane.features.map.MapModel	[org.freeplane.features.map.MapModel::org.freeplane.features.map.NodeModel root, org.freeplane.features.map.MapModel::createNewRoot():void, org.freeplane.features.map.MapModel::setRoot(org.freeplane.features.map.NodeModel):void]
org.freeplane.features.map.MapModel	[org.freeplane.features.map.MapModel::int changesPerformedSinceLastSave, org.freeplane.features.map.MapModel::isSaved():boolean, org.freeplane.features.map.MapModel::setSaved(boolean):void]
org.freeplane.features.map.MapModel	[org.freeplane.features.map.MapModel::java.util.List<org.freeplane.features.map.IMapChangeListener> listeners, org.freeplane.features.map.MapModel::removeMapChangeListener(org.freeplane.features.map.IMapChangeListener):void, org.freeplane.features.map.MapModel::fireMapChangeEvent(org.freeplane.features.map.MapChangeEvent):void]
org.freeplane.main.addons.AddOnsController	[org.freeplane.main.addons.AddOnsController::java.util.List<org.freeplane.main.addons.AddOnProperties> installedAddOns, org.freeplane.main.addons.AddOnsController::getInstalledAddOns():java.util.List<org.freeplane.main.addons.AddOnProperties>, org.freeplane.main.addons.AddOnsController::getInstalledAddOn(java.lang.String):org.freeplane.main.addons.AddOnProperties, org.freeplane.main.addons.AddOnsController::deinstall(org.freeplane.main.addons.AddOnProperties):void, org.freeplane.main.addons.AddOnsController::deleteOldEmptyFiles():void, org.freeplane.main.addons.AddOnsController::deleteFile(java.lang.String):boolean, org.freeplane.main.addons.AddOnsController::deleteFile(java.io.File):boolean, org.freeplane.main.addons.AddOnsController::registerInstalledAddOn(org.freeplane.main.addons.AddOnProperties):void, org.freeplane.main.addons.AddOnsController::registerAddOnResources(org.freeplane.main.addons.AddOnProperties, org.freeplane.core.resources.ResourceController):void, org.freeplane.main.addons.AddOnsController::createAddOnsDirIfNecessary():void, org.freeplane.main.addons.AddOnsController::getAddOnsDir():java.io.File, org.freeplane.main.addons.AddOnsController::expandVariables(java.lang.String[]):java.lang.String, org.freeplane.main.addons.AddOnsController::registerPlugins():void, org.freeplane.main.addons.AddOnsController::save(org.freeplane.main.addons.AddOnProperties):void, org.freeplane.main.addons.AddOnsController::getLanguageResources(org.freeplane.main.addons.AddOnProperties, java.lang.String):java.util.Map<java.lang.String,java.lang.String>]
org.freeplane.main.addons.AddOnsController	[org.freeplane.main.addons.AddOnsController::java.util.List<org.freeplane.main.addons.AddOnProperties> installedAddOns, org.freeplane.main.addons.AddOnsController::getInstalledAddOns():java.util.List<org.freeplane.main.addons.AddOnProperties>, org.freeplane.main.addons.AddOnsController::getInstalledAddOn(java.lang.String):org.freeplane.main.addons.AddOnProperties, org.freeplane.main.addons.AddOnsController::deinstall(org.freeplane.main.addons.AddOnProperties):void, org.freeplane.main.addons.AddOnsController::deleteOldEmptyFiles():void, org.freeplane.main.addons.AddOnsController::deleteFile(java.lang.String):boolean, org.freeplane.main.addons.AddOnsController::deleteFile(java.io.File):boolean, org.freeplane.main.addons.AddOnsController::registerInstalledAddOn(org.freeplane.main.addons.AddOnProperties):void, org.freeplane.main.addons.AddOnsController::registerAddOnResources(org.freeplane.main.addons.AddOnProperties, org.freeplane.core.resources.ResourceController):void]
org.freeplane.core.resources.components.ButtonSelectorPanel	[org.freeplane.core.resources.components.ButtonSelectorPanel::java.util.Vector<java.lang.String> possibleValues, org.freeplane.core.resources.components.ButtonSelectorPanel::indexOf(java.lang.String):int, org.freeplane.core.resources.components.ButtonSelectorPanel::getValue():java.lang.String, org.freeplane.core.resources.components.ButtonSelectorPanel::int selectedIndex, org.freeplane.core.resources.components.ButtonSelectorPanel::getSelectedButton():javax.swing.JToggleButton, org.freeplane.core.resources.components.ButtonSelectorPanel::java.util.Vector<javax.swing.JToggleButton> buttons, org.freeplane.core.resources.components.ButtonSelectorPanel::setSelected(javax.swing.JToggleButton):void, org.freeplane.core.resources.components.ButtonSelectorPanel::setValue(java.lang.String):void, org.freeplane.core.resources.components.ButtonSelectorPanel::setEnabled(boolean):void, org.freeplane.core.resources.components.ButtonSelectorPanel::getButton(java.lang.String):javax.swing.JToggleButton, org.freeplane.core.resources.components.ButtonSelectorPanel::getMaximumIconSize():java.awt.Dimension]
org.freeplane.core.resources.components.ButtonSelectorPanel	[org.freeplane.core.resources.components.ButtonSelectorPanel::java.util.Vector<java.lang.String> possibleValues, org.freeplane.core.resources.components.ButtonSelectorPanel::indexOf(java.lang.String):int, org.freeplane.core.resources.components.ButtonSelectorPanel::getValue():java.lang.String, org.freeplane.core.resources.components.ButtonSelectorPanel::int selectedIndex, org.freeplane.core.resources.components.ButtonSelectorPanel::getSelectedButton():javax.swing.JToggleButton]
org.freeplane.core.ui.svgicons.FixedSizeUIIcon	[org.freeplane.core.ui.svgicons.FixedSizeUIIcon::int width, org.freeplane.core.ui.svgicons.FixedSizeUIIcon::int height, org.freeplane.core.ui.svgicons.FixedSizeUIIcon::java.net.URL url, org.freeplane.core.ui.svgicons.FixedSizeUIIcon::withProportionalWidth():org.freeplane.core.ui.svgicons.FixedSizeUIIcon, org.freeplane.core.ui.svgicons.FixedSizeUIIcon::boolean failure, org.freeplane.core.ui.svgicons.FixedSizeUIIcon::isValid():boolean]
org.freeplane.features.attribute.mindmapmode.AssignAttributeDialog	[org.freeplane.features.attribute.mindmapmode.AssignAttributeDialog::javax.swing.JComboBox attributeNames, org.freeplane.features.attribute.mindmapmode.AssignAttributeDialog::javax.swing.JComboBox attributeValues, org.freeplane.features.attribute.mindmapmode.AssignAttributeDialog::javax.swing.JComboBox replacingAttributeNames, org.freeplane.features.attribute.mindmapmode.AssignAttributeDialog::javax.swing.JComboBox replacingAttributeValues, org.freeplane.features.attribute.mindmapmode.AssignAttributeDialog::attributesChanged():void, org.freeplane.features.attribute.mindmapmode.AssignAttributeDialog::selectedAttributeChanged(java.lang.Object, javax.swing.JComboBox):void]
org.freeplane.features.map.NodeModel	[org.freeplane.features.map.NodeModel::java.util.Collection<org.freeplane.features.map.INodeView> views, org.freeplane.features.map.NodeModel::acceptViewVisitor(org.freeplane.features.ui.INodeViewVisitor):void, org.freeplane.features.map.NodeModel::addViewer(org.freeplane.features.map.INodeView):void, org.freeplane.features.map.NodeModel::getViewers():java.util.Collection<org.freeplane.features.map.INodeView>, org.freeplane.features.map.NodeModel::areViewsEmpty():boolean, org.freeplane.features.map.NodeModel::hasViewers():boolean, org.freeplane.features.map.NodeModel::removeViewer(org.freeplane.features.map.INodeView):void, org.freeplane.features.map.NodeModel::fireNodeInserted(org.freeplane.features.map.NodeModel, int):void, org.freeplane.features.map.NodeModel::fireNodeChanged(org.freeplane.features.map.NodeChangeEvent):void, org.freeplane.features.map.NodeModel::fireNodeRemoved(org.freeplane.features.map.NodeDeletionEvent):void, org.freeplane.features.map.NodeModel::firePreNodeDeleted(org.freeplane.features.map.NodeModel, int):void, org.freeplane.features.map.NodeModel::fireNodeInserted(org.freeplane.features.map.IMapChangeListener[], org.freeplane.features.map.NodeModel, int):void, org.freeplane.features.map.NodeModel::fireSingleNodeChanged(org.freeplane.features.map.INodeChangeListener[], org.freeplane.features.map.NodeChangeEvent):void, org.freeplane.features.map.NodeModel::fireNodeRemoved(org.freeplane.features.map.IMapChangeListener[], org.freeplane.features.map.NodeDeletionEvent):void]
org.freeplane.features.map.NodeModel	[org.freeplane.features.map.NodeModel::hasVisibleContent(org.freeplane.features.filter.Filter):boolean, org.freeplane.features.map.NodeModel::isVisible(org.freeplane.features.filter.Filter):boolean, org.freeplane.features.map.NodeModel::isHiddenSummary():boolean, org.freeplane.features.map.NodeModel::satisfies(org.freeplane.features.filter.Filter):boolean]
org.freeplane.features.map.NodeModel	[org.freeplane.features.map.NodeModel::boolean folded, org.freeplane.features.map.NodeModel::setFolded(boolean):void, org.freeplane.features.map.NodeModel::isFolded():boolean, org.freeplane.features.map.NodeModel::isAccessible():boolean]
org.freeplane.features.map.NodeModel	[org.freeplane.features.map.NodeModel::addExtension(org.freeplane.core.extension.IExtension):void, org.freeplane.features.map.NodeModel::putExtension(org.freeplane.core.extension.IExtension):org.freeplane.core.extension.IExtension, org.freeplane.features.map.NodeModel::putExtension(java.lang.Class<? extends org.freeplane.core.extension.IExtension>, org.freeplane.core.extension.IExtension):org.freeplane.core.extension.IExtension, org.freeplane.features.map.NodeModel::containsExtension(java.lang.Class<? extends org.freeplane.core.extension.IExtension>):boolean, org.freeplane.features.map.NodeModel::getExtension(java.lang.Class<T>):T, org.freeplane.features.map.NodeModel::getSharedExtensions():java.util.Map<java.lang.Class<? extends org.freeplane.core.extension.IExtension>,org.freeplane.core.extension.IExtension>, org.freeplane.features.map.NodeModel::removeExtension(java.lang.Class<T>):T, org.freeplane.features.map.NodeModel::removeExtension(org.freeplane.core.extension.IExtension):boolean, org.freeplane.features.map.NodeModel::cloneContent():org.freeplane.features.map.NodeModel, org.freeplane.features.map.NodeModel::cloneNode(org.freeplane.features.map.NodeModel.CloneType):org.freeplane.features.map.NodeModel]
org.freeplane.features.url.mindmapmode.MapLoader	[org.freeplane.features.url.mindmapmode.MapLoader::java.net.URL sourceLocation, org.freeplane.features.url.mindmapmode.MapLoader::java.net.URL newMapLocation, org.freeplane.features.url.mindmapmode.MapLoader::boolean saveAfterLoading, org.freeplane.features.url.mindmapmode.MapLoader::saveAfterLoading():org.freeplane.features.url.mindmapmode.MapLoader, org.freeplane.features.url.mindmapmode.MapLoader::newMapLocation(java.io.File):org.freeplane.features.url.mindmapmode.MapLoader, org.freeplane.features.url.mindmapmode.MapLoader::load(java.net.URL):org.freeplane.features.url.mindmapmode.MapLoader, org.freeplane.features.url.mindmapmode.MapLoader::load(java.io.File):org.freeplane.features.url.mindmapmode.MapLoader, org.freeplane.features.url.mindmapmode.MapLoader::boolean asDocumentation, org.freeplane.features.url.mindmapmode.MapLoader::asDocumentation():org.freeplane.features.url.mindmapmode.MapLoader, org.freeplane.features.url.mindmapmode.MapLoader::enableAutosave(org.freeplane.features.map.mindmapmode.MMapModel):void]
org.freeplane.features.url.mindmapmode.MapLoader	[org.freeplane.features.url.mindmapmode.MapLoader::java.net.URL sourceLocation, org.freeplane.features.url.mindmapmode.MapLoader::java.net.URL newMapLocation, org.freeplane.features.url.mindmapmode.MapLoader::boolean saveAfterLoading, org.freeplane.features.url.mindmapmode.MapLoader::saveAfterLoading():org.freeplane.features.url.mindmapmode.MapLoader, org.freeplane.features.url.mindmapmode.MapLoader::newMapLocation(java.io.File):org.freeplane.features.url.mindmapmode.MapLoader, org.freeplane.features.url.mindmapmode.MapLoader::load(java.net.URL):org.freeplane.features.url.mindmapmode.MapLoader, org.freeplane.features.url.mindmapmode.MapLoader::load(java.io.File):org.freeplane.features.url.mindmapmode.MapLoader]
org.freeplane.features.url.mindmapmode.MapLoader	[org.freeplane.features.url.mindmapmode.MapLoader::org.freeplane.features.mode.ModeController modeController, org.freeplane.features.url.mindmapmode.MapLoader::fileManager():org.freeplane.features.url.mindmapmode.MFileManager, org.freeplane.features.url.mindmapmode.MapLoader::mapController():org.freeplane.features.map.mindmapmode.MMapController, org.freeplane.features.url.mindmapmode.MapLoader::loadMapContent(org.freeplane.features.map.mindmapmode.MMapModel):void, org.freeplane.features.url.mindmapmode.MapLoader::java.io.InputStream inputStream, org.freeplane.features.url.mindmapmode.MapLoader::setInputStream(java.io.InputStream):org.freeplane.features.url.mindmapmode.MapLoader, org.freeplane.features.url.mindmapmode.MapLoader::createMapView(org.freeplane.features.map.mindmapmode.MMapModel):void]
org.freeplane.features.url.mindmapmode.MapLoader	[org.freeplane.features.url.mindmapmode.MapLoader::boolean asDocumentation, org.freeplane.features.url.mindmapmode.MapLoader::asDocumentation():org.freeplane.features.url.mindmapmode.MapLoader, org.freeplane.features.url.mindmapmode.MapLoader::enableAutosave(org.freeplane.features.map.mindmapmode.MMapModel):void]
org.freeplane.features.url.mindmapmode.MapLoader	[org.freeplane.features.url.mindmapmode.MapLoader::boolean withView, org.freeplane.features.url.mindmapmode.MapLoader::withView():org.freeplane.features.url.mindmapmode.MapLoader, org.freeplane.features.url.mindmapmode.MapLoader::java.lang.String selectedNodeId, org.freeplane.features.url.mindmapmode.MapLoader::selectNodeById(java.lang.String):org.freeplane.features.url.mindmapmode.MapLoader, org.freeplane.features.url.mindmapmode.MapLoader::selectNode():void, org.freeplane.features.url.mindmapmode.MapLoader::assertNoTransaction(org.freeplane.features.map.MapModel):void]
org.freeplane.features.url.mindmapmode.MapLoader	[org.freeplane.features.url.mindmapmode.MapLoader::java.net.URL sourceLocation, org.freeplane.features.url.mindmapmode.MapLoader::java.net.URL newMapLocation, org.freeplane.features.url.mindmapmode.MapLoader::boolean saveAfterLoading, org.freeplane.features.url.mindmapmode.MapLoader::saveAfterLoading():org.freeplane.features.url.mindmapmode.MapLoader, org.freeplane.features.url.mindmapmode.MapLoader::newMapLocation(java.io.File):org.freeplane.features.url.mindmapmode.MapLoader, org.freeplane.features.url.mindmapmode.MapLoader::load(java.net.URL):org.freeplane.features.url.mindmapmode.MapLoader, org.freeplane.features.url.mindmapmode.MapLoader::load(java.io.File):org.freeplane.features.url.mindmapmode.MapLoader, org.freeplane.features.url.mindmapmode.MapLoader::boolean asDocumentation, org.freeplane.features.url.mindmapmode.MapLoader::asDocumentation():org.freeplane.features.url.mindmapmode.MapLoader, org.freeplane.features.url.mindmapmode.MapLoader::enableAutosave(org.freeplane.features.map.mindmapmode.MMapModel):void, org.freeplane.features.url.mindmapmode.MapLoader::boolean followSourceMap, org.freeplane.features.url.mindmapmode.MapLoader::followOldMap():org.freeplane.features.url.mindmapmode.MapLoader, org.freeplane.features.url.mindmapmode.MapLoader::unsetMapLocation(boolean):org.freeplane.features.url.mindmapmode.MapLoader, org.freeplane.features.url.mindmapmode.MapLoader::boolean unsetMapLocation, org.freeplane.features.url.mindmapmode.MapLoader::unsetMapLocation():org.freeplane.features.url.mindmapmode.MapLoader, org.freeplane.features.url.mindmapmode.MapLoader::setFollowedMapProperties(org.freeplane.features.map.mindmapmode.MMapModel):void, org.freeplane.features.url.mindmapmode.MapLoader::createMindMap():org.freeplane.features.map.mindmapmode.MMapModel, org.freeplane.features.url.mindmapmode.MapLoader::alternativeSourceLocation():java.net.URL, org.freeplane.features.url.mindmapmode.MapLoader::urlToFileOrNull(java.net.URL):java.io.File]
org.freeplane.features.url.mindmapmode.MapLoader	[org.freeplane.features.url.mindmapmode.MapLoader::boolean followSourceMap, org.freeplane.features.url.mindmapmode.MapLoader::followOldMap():org.freeplane.features.url.mindmapmode.MapLoader, org.freeplane.features.url.mindmapmode.MapLoader::unsetMapLocation(boolean):org.freeplane.features.url.mindmapmode.MapLoader, org.freeplane.features.url.mindmapmode.MapLoader::boolean unsetMapLocation, org.freeplane.features.url.mindmapmode.MapLoader::unsetMapLocation():org.freeplane.features.url.mindmapmode.MapLoader, org.freeplane.features.url.mindmapmode.MapLoader::setFollowedMapProperties(org.freeplane.features.map.mindmapmode.MMapModel):void]
org.freeplane.view.swing.map.TextualTooltipRendererFactory	[org.freeplane.view.swing.map.TextualTooltipRendererFactory::javax.swing.JEditorPane tip, org.freeplane.view.swing.map.TextualTooltipRendererFactory::scrollUp():void, org.freeplane.view.swing.map.TextualTooltipRendererFactory::int maximumWidth, org.freeplane.view.swing.map.TextualTooltipRendererFactory::setTipTextUnsafe(java.lang.String):void, org.freeplane.view.swing.map.TextualTooltipRendererFactory::java.lang.String contentType, org.freeplane.view.swing.map.TextualTooltipRendererFactory::java.net.URL baseUrl, org.freeplane.view.swing.map.TextualTooltipRendererFactory::setTipText(java.lang.String):void]
org.freeplane.view.swing.map.TextualTooltipRendererFactory	[org.freeplane.view.swing.map.TextualTooltipRendererFactory::int maximumWidth, org.freeplane.view.swing.map.TextualTooltipRendererFactory::setTipTextUnsafe(java.lang.String):void, org.freeplane.view.swing.map.TextualTooltipRendererFactory::java.lang.String contentType, org.freeplane.view.swing.map.TextualTooltipRendererFactory::java.net.URL baseUrl]
org.freeplane.features.attribute.AttributeRegistry	[org.freeplane.features.attribute.AttributeRegistry::javax.swing.event.ChangeEvent attributesEvent, org.freeplane.features.attribute.AttributeRegistry::fireAttributesChanged():void, org.freeplane.features.attribute.AttributeRegistry::javax.swing.event.ChangeEvent changeEvent, org.freeplane.features.attribute.AttributeRegistry::fireStateChanged():void, org.freeplane.features.attribute.AttributeRegistry::java.util.Set<javax.swing.event.ChangeListener> changeListeners, org.freeplane.features.attribute.AttributeRegistry::removeChangeListener(javax.swing.event.ChangeListener):void, org.freeplane.features.attribute.AttributeRegistry::java.util.Set<org.freeplane.features.attribute.IAttributesListener> attributeListeners, org.freeplane.features.attribute.AttributeRegistry::removeAttributesListener(org.freeplane.features.attribute.IAttributesListener):void]
org.freeplane.features.attribute.AttributeRegistry	[org.freeplane.features.attribute.AttributeRegistry::int visibleElementsNumber, org.freeplane.features.attribute.AttributeRegistry::decrementVisibleElementsNumber():void, org.freeplane.features.attribute.AttributeRegistry::incrementVisibleElementsNumber():void]
org.freeplane.features.attribute.AttributeRegistry	[org.freeplane.features.attribute.AttributeRegistry::javax.swing.event.ChangeEvent attributesEvent, org.freeplane.features.attribute.AttributeRegistry::fireAttributesChanged():void, org.freeplane.features.attribute.AttributeRegistry::javax.swing.event.ChangeEvent changeEvent, org.freeplane.features.attribute.AttributeRegistry::fireStateChanged():void, org.freeplane.features.attribute.AttributeRegistry::java.util.Set<javax.swing.event.ChangeListener> changeListeners, org.freeplane.features.attribute.AttributeRegistry::removeChangeListener(javax.swing.event.ChangeListener):void]
org.freeplane.features.attribute.AttributeRegistry	[org.freeplane.features.attribute.AttributeRegistry::org.freeplane.features.attribute.AttributeController attributeController, org.freeplane.features.attribute.AttributeRegistry::org.freeplane.features.map.MapModel map, org.freeplane.features.attribute.AttributeRegistry::boolean isAttributeLayoutChanged, org.freeplane.features.attribute.AttributeRegistry::setAttributeLayoutChanged():void, org.freeplane.features.attribute.AttributeRegistry::java.lang.Boolean restrictionModel, org.freeplane.features.attribute.AttributeRegistry::getRestriction(int):java.lang.Boolean, org.freeplane.features.attribute.AttributeRegistry::setRestrictionModel(int, java.lang.Boolean):void, org.freeplane.features.attribute.AttributeRegistry::setVisibilityModel(int, java.lang.Boolean):void, org.freeplane.features.attribute.AttributeRegistry::applyChanges():void, org.freeplane.features.attribute.AttributeRegistry::resetChanges():void, org.freeplane.features.attribute.AttributeRegistry::write(org.freeplane.core.io.ITreeWriter):void, org.freeplane.features.attribute.AttributeRegistry::setRestricted(boolean):void, org.freeplane.features.attribute.AttributeRegistry::boolean isRestricted, org.freeplane.features.attribute.AttributeRegistry::javax.swing.event.ChangeEvent attributesEvent, org.freeplane.features.attribute.AttributeRegistry::fireAttributesChanged():void, org.freeplane.features.attribute.AttributeRegistry::javax.swing.event.ChangeEvent changeEvent, org.freeplane.features.attribute.AttributeRegistry::fireStateChanged():void, org.freeplane.features.attribute.AttributeRegistry::java.util.Set<javax.swing.event.ChangeListener> changeListeners, org.freeplane.features.attribute.AttributeRegistry::removeChangeListener(javax.swing.event.ChangeListener):void, org.freeplane.features.attribute.AttributeRegistry::java.util.Set<org.freeplane.features.attribute.IAttributesListener> attributeListeners, org.freeplane.features.attribute.AttributeRegistry::removeAttributesListener(org.freeplane.features.attribute.IAttributesListener):void, org.freeplane.features.attribute.AttributeRegistry::setAttributeViewType(java.lang.String):void, org.freeplane.features.attribute.AttributeRegistry::java.lang.String attributeViewType, org.freeplane.features.attribute.AttributeRegistry::org.freeplane.core.util.collection.SortedMapVector elements, org.freeplane.features.attribute.AttributeRegistry::org.freeplane.features.attribute.AttributeRegistryTableModel myTableModel, org.freeplane.features.attribute.AttributeRegistry::getElement(java.lang.Comparable<?>):org.freeplane.features.attribute.AttributeRegistryElement, org.freeplane.features.attribute.AttributeRegistry::getDefaultComboBoxModel(java.lang.Comparable<?>):javax.swing.ComboBoxModel, org.freeplane.features.attribute.AttributeRegistry::getElement(int):org.freeplane.features.attribute.AttributeRegistryElement, org.freeplane.features.attribute.AttributeRegistry::registry(java.lang.String):void, org.freeplane.features.attribute.AttributeRegistry::setRestricted(int, boolean):void, org.freeplane.features.attribute.AttributeRegistry::unregistry(java.lang.String):void]
org.freeplane.features.attribute.AttributeRegistry	[org.freeplane.features.attribute.AttributeRegistry::org.freeplane.core.util.collection.SortedMapVector elements, org.freeplane.features.attribute.AttributeRegistry::org.freeplane.features.attribute.AttributeRegistryTableModel myTableModel, org.freeplane.features.attribute.AttributeRegistry::getElement(java.lang.Comparable<?>):org.freeplane.features.attribute.AttributeRegistryElement, org.freeplane.features.attribute.AttributeRegistry::getDefaultComboBoxModel(java.lang.Comparable<?>):javax.swing.ComboBoxModel, org.freeplane.features.attribute.AttributeRegistry::getElement(int):org.freeplane.features.attribute.AttributeRegistryElement, org.freeplane.features.attribute.AttributeRegistry::registry(java.lang.String):void, org.freeplane.features.attribute.AttributeRegistry::setRestricted(int, boolean):void, org.freeplane.features.attribute.AttributeRegistry::unregistry(java.lang.String):void]
org.freeplane.features.attribute.AttributeRegistry	[org.freeplane.features.attribute.AttributeRegistry::boolean isAttributeLayoutChanged, org.freeplane.features.attribute.AttributeRegistry::setAttributeLayoutChanged():void, org.freeplane.features.attribute.AttributeRegistry::java.lang.Boolean restrictionModel, org.freeplane.features.attribute.AttributeRegistry::getRestriction(int):java.lang.Boolean, org.freeplane.features.attribute.AttributeRegistry::setRestrictionModel(int, java.lang.Boolean):void, org.freeplane.features.attribute.AttributeRegistry::setVisibilityModel(int, java.lang.Boolean):void]
org.freeplane.features.attribute.mindmapmode.ImportAttributesDialog	[org.freeplane.features.attribute.mindmapmode.ImportAttributesDialog::org.freeplane.features.attribute.AttributeRegistry currentAttributes, org.freeplane.features.attribute.mindmapmode.ImportAttributesDialog::createMapSubTrees(javax.swing.tree.DefaultMutableTreeNode):void, org.freeplane.features.attribute.mindmapmode.ImportAttributesDialog::createAttributeSubTrees(javax.swing.tree.DefaultMutableTreeNode, org.freeplane.features.attribute.AttributeRegistry):void, org.freeplane.features.attribute.mindmapmode.ImportAttributesDialog::createValueSubTrees(javax.swing.tree.DefaultMutableTreeNode, org.freeplane.features.attribute.AttributeRegistryElement, org.freeplane.features.attribute.AttributeRegistry):void, org.freeplane.features.attribute.mindmapmode.ImportAttributesDialog::performImport(javax.swing.tree.DefaultMutableTreeNode):void]
org.freeplane.features.attribute.mindmapmode.ImportAttributesDialog	[org.freeplane.features.attribute.mindmapmode.ImportAttributesDialog::javax.swing.tree.DefaultTreeModel treeModel, org.freeplane.features.attribute.mindmapmode.ImportAttributesDialog::setParentSelectionType(javax.swing.tree.DefaultMutableTreeNode, int):void, org.freeplane.features.attribute.mindmapmode.ImportAttributesDialog::setSelectionType(javax.swing.tree.TreeNode, int):void]
org.freeplane.features.export.mindmapmode.ExportWithXSLT	[org.freeplane.features.export.mindmapmode.ExportWithXSLT::java.util.Properties properties, org.freeplane.features.export.mindmapmode.ExportWithXSLT::getProperty(java.lang.String, java.lang.String):java.lang.String, org.freeplane.features.export.mindmapmode.ExportWithXSLT::getProperty(java.lang.String):java.lang.String, org.freeplane.features.export.mindmapmode.ExportWithXSLT::java.lang.String name, org.freeplane.features.export.mindmapmode.ExportWithXSLT::getFileFilter():javax.swing.filechooser.FileFilter]
org.freeplane.features.export.mindmapmode.ExportWithXSLT	[org.freeplane.features.export.mindmapmode.ExportWithXSLT::copyMap(java.util.List<org.freeplane.features.map.NodeModel>, java.lang.String, org.freeplane.features.map.MapWriter.Mode):boolean, org.freeplane.features.export.mindmapmode.ExportWithXSLT::getMapXml(java.util.List<org.freeplane.features.map.NodeModel>, org.freeplane.features.map.MapWriter.Mode):java.lang.String, org.freeplane.features.export.mindmapmode.ExportWithXSLT::transformMapWithXslt(java.util.List<org.freeplane.features.map.NodeModel>, java.lang.String, java.io.File, java.lang.String, org.freeplane.features.map.MapWriter.Mode, java.lang.String[]):boolean, org.freeplane.features.export.mindmapmode.ExportWithXSLT::toRelativeUri(java.lang.String):java.lang.String]
org.freeplane.features.export.mindmapmode.ExportWithXSLT	[org.freeplane.features.export.mindmapmode.ExportWithXSLT::java.util.Properties properties, org.freeplane.features.export.mindmapmode.ExportWithXSLT::getProperty(java.lang.String, java.lang.String):java.lang.String, org.freeplane.features.export.mindmapmode.ExportWithXSLT::getProperty(java.lang.String):java.lang.String]
org.freeplane.features.filter.Filter	[org.freeplane.features.filter.Filter::org.freeplane.features.filter.condition.ICondition condition, org.freeplane.features.filter.Filter::checkNode(org.freeplane.features.map.NodeModel):boolean, org.freeplane.features.filter.Filter::boolean appliesToVisibleElementsOnly, org.freeplane.features.filter.Filter::canUseFilterResultsFrom(org.freeplane.features.filter.Filter):boolean, org.freeplane.features.filter.Filter::org.freeplane.features.filter.Filter baseFilter, org.freeplane.features.filter.Filter::shouldRemainInvisible(org.freeplane.features.map.NodeModel):boolean]
org.freeplane.features.filter.Filter	[org.freeplane.features.filter.Filter::int options, org.freeplane.features.filter.Filter::areAncestorsShown():boolean, org.freeplane.features.filter.Filter::areDescendantsShown():boolean]
org.freeplane.features.filter.Filter	[org.freeplane.features.filter.Filter::boolean appliesToVisibleElementsOnly, org.freeplane.features.filter.Filter::canUseFilterResultsFrom(org.freeplane.features.filter.Filter):boolean, org.freeplane.features.filter.Filter::org.freeplane.features.filter.Filter baseFilter, org.freeplane.features.filter.Filter::shouldRemainInvisible(org.freeplane.features.map.NodeModel):boolean]
org.freeplane.features.filter.Filter	[org.freeplane.features.filter.Filter::org.freeplane.features.filter.condition.ICondition condition, org.freeplane.features.filter.Filter::checkNode(org.freeplane.features.map.NodeModel):boolean, org.freeplane.features.filter.Filter::boolean appliesToVisibleElementsOnly, org.freeplane.features.filter.Filter::canUseFilterResultsFrom(org.freeplane.features.filter.Filter):boolean, org.freeplane.features.filter.Filter::org.freeplane.features.filter.Filter baseFilter, org.freeplane.features.filter.Filter::shouldRemainInvisible(org.freeplane.features.map.NodeModel):boolean, org.freeplane.features.filter.Filter::addFilterResult(org.freeplane.features.map.NodeModel, int):void, org.freeplane.features.filter.Filter::showAsMatched(org.freeplane.features.map.NodeModel):void, org.freeplane.features.filter.Filter::showAncestors(org.freeplane.features.map.NodeModel):void, org.freeplane.features.filter.Filter::showDescendants(org.freeplane.features.map.NodeModel):void, org.freeplane.features.filter.Filter::updateDescendantResults(org.freeplane.features.map.NodeModel, int, java.util.function.Consumer<org.freeplane.features.map.NodeModel>):void, org.freeplane.features.filter.Filter::updateFilterResultsAndAncestors(org.freeplane.features.map.NodeModel, java.util.function.Consumer<org.freeplane.features.map.NodeModel>):void, org.freeplane.features.filter.Filter::setFilterResult(org.freeplane.features.map.NodeModel, int):void, org.freeplane.features.filter.Filter::updateFilterResults(org.freeplane.features.map.NodeModel, java.util.function.Consumer<org.freeplane.features.map.NodeModel>):void, org.freeplane.features.filter.Filter::org.freeplane.features.filter.Filter.FilterInfoAccessor accessor, org.freeplane.features.filter.Filter::useFilterResultsFrom(org.freeplane.features.filter.Filter):void, org.freeplane.features.filter.Filter::calculateFilterResults(org.freeplane.features.map.NodeModel):void, org.freeplane.features.filter.Filter::getFilterInfo(org.freeplane.features.map.NodeModel):org.freeplane.features.filter.FilterInfo, org.freeplane.features.filter.Filter::calculateFilterResults(org.freeplane.features.map.MapModel):void, org.freeplane.features.filter.Filter::filterChildrenGetDescendantState(org.freeplane.features.map.NodeModel, int):int, org.freeplane.features.filter.Filter::applyFilterGetDescendantState(org.freeplane.features.map.NodeModel, int):int, org.freeplane.features.filter.Filter::resetFilter(org.freeplane.features.map.NodeModel):void, org.freeplane.features.filter.Filter::accepts(org.freeplane.features.map.NodeModel, int):boolean]
org.freeplane.features.filter.Filter	[org.freeplane.features.filter.Filter::int options, org.freeplane.features.filter.Filter::areAncestorsShown():boolean, org.freeplane.features.filter.Filter::areDescendantsShown():boolean, org.freeplane.features.filter.Filter::boolean hidesMatchingElements, org.freeplane.features.filter.Filter::org.freeplane.features.filter.Filter.FilteredElement filteredElement, org.freeplane.features.filter.Filter::isVisible(org.freeplane.features.map.NodeModel):boolean, org.freeplane.features.filter.Filter::isVisible(org.freeplane.features.link.ConnectorModel):boolean, org.freeplane.features.filter.Filter::isFoldable(org.freeplane.features.map.NodeModel):boolean]
org.freeplane.features.filter.FilterController	[org.freeplane.features.filter.FilterController::javax.swing.ButtonModel highlightNodes, org.freeplane.features.filter.FilterController::org.freeplane.features.filter.condition.ASelectableCondition highlightCondition, org.freeplane.features.filter.FilterController::org.freeplane.features.styles.ConditionalStyleModel highlightedConditionContext, org.freeplane.features.filter.FilterController::isNodeHighlighted(org.freeplane.features.map.NodeModel):boolean, org.freeplane.features.filter.FilterController::setHighlightCondition(org.freeplane.features.filter.condition.ASelectableCondition, org.freeplane.features.styles.ConditionalStyleModel):void, org.freeplane.features.filter.FilterController::findNextInSubtree(org.freeplane.features.map.NodeModel, org.freeplane.features.map.NodeModel, org.freeplane.features.map.MapController.Direction, org.freeplane.features.filter.condition.ICondition, org.freeplane.features.filter.Filter):org.freeplane.features.map.NodeModel, org.freeplane.features.filter.FilterController::findNext(org.freeplane.features.map.NodeModel, org.freeplane.features.map.NodeModel, org.freeplane.features.map.MapController.Direction, org.freeplane.features.filter.condition.ICondition, org.freeplane.features.filter.Filter):org.freeplane.features.map.NodeModel, org.freeplane.features.filter.FilterController::install():void]
org.freeplane.features.filter.FilterController	[org.freeplane.features.filter.FilterController::javax.swing.ButtonModel highlightNodes, org.freeplane.features.filter.FilterController::org.freeplane.features.filter.condition.ASelectableCondition highlightCondition, org.freeplane.features.filter.FilterController::org.freeplane.features.styles.ConditionalStyleModel highlightedConditionContext, org.freeplane.features.filter.FilterController::isNodeHighlighted(org.freeplane.features.map.NodeModel):boolean, org.freeplane.features.filter.FilterController::setHighlightCondition(org.freeplane.features.filter.condition.ASelectableCondition, org.freeplane.features.styles.ConditionalStyleModel):void]
org.freeplane.features.filter.FilterController	[org.freeplane.features.filter.FilterController::getFilterConditions():javax.swing.DefaultComboBoxModel, org.freeplane.features.filter.FilterController::getSelectedCondition():org.freeplane.features.filter.condition.ASelectableCondition, org.freeplane.features.filter.FilterController::isFilterActive():boolean]
org.freeplane.features.filter.FilterController	[org.freeplane.features.filter.FilterController::org.freeplane.features.filter.FilterHistory history, org.freeplane.features.filter.FilterController::redo():void, org.freeplane.features.filter.FilterController::undo():void, org.freeplane.features.filter.FilterController::updateSettingsFromHistory():void]
org.freeplane.features.icon.IconGroup	[org.freeplane.features.icon.IconGroup::java.util.List<org.freeplane.features.icon.IconGroup> groups, org.freeplane.features.icon.IconGroup::getIcons():java.util.List<org.freeplane.features.icon.MindIcon>, org.freeplane.features.icon.IconGroup::isLeaf():boolean, org.freeplane.features.icon.IconGroup::getGroups():java.util.List<org.freeplane.features.icon.IconGroup>, org.freeplane.features.icon.IconGroup::org.freeplane.features.icon.MindIcon groupIcon, org.freeplane.features.icon.IconGroup::addGroup(org.freeplane.features.icon.IconGroup):void, org.freeplane.features.icon.IconGroup::getGroupIcon():org.freeplane.features.icon.MindIcon]
org.freeplane.features.icon.IconGroup	[org.freeplane.features.icon.IconGroup::java.util.List<org.freeplane.features.icon.IconGroup> groups, org.freeplane.features.icon.IconGroup::getIcons():java.util.List<org.freeplane.features.icon.MindIcon>, org.freeplane.features.icon.IconGroup::isLeaf():boolean, org.freeplane.features.icon.IconGroup::getGroups():java.util.List<org.freeplane.features.icon.IconGroup>]
org.freeplane.features.icon.UIIcon	[org.freeplane.features.icon.UIIcon::java.lang.String DEFAULT_IMAGE_PATH, org.freeplane.features.icon.UIIcon::getPath():java.lang.String, org.freeplane.features.icon.UIIcon::java.lang.String file, org.freeplane.features.icon.UIIcon::java.net.URL resourceURL, org.freeplane.features.icon.UIIcon::getUrl():java.net.URL]
org.freeplane.features.icon.UIIcon	[org.freeplane.features.icon.UIIcon::java.lang.String DEFAULT_IMAGE_PATH, org.freeplane.features.icon.UIIcon::getPath():java.lang.String, org.freeplane.features.icon.UIIcon::java.lang.String file]
org.freeplane.features.link.ConnectorProperties	[org.freeplane.features.link.ConnectorProperties::java.util.Optional<java.lang.String> sourceLabel, org.freeplane.features.link.ConnectorProperties::setSourceLabel(java.lang.String):void, org.freeplane.features.link.ConnectorProperties::emptyString2emptyOptional(java.lang.String):java.util.Optional<java.lang.String>, org.freeplane.features.link.ConnectorProperties::java.util.Optional<java.lang.String> middleLabel, org.freeplane.features.link.ConnectorProperties::setMiddleLabel(java.lang.String):void, org.freeplane.features.link.ConnectorProperties::java.util.Optional<java.lang.String> targetLabel, org.freeplane.features.link.ConnectorProperties::setTargetLabel(java.lang.String):void]
org.freeplane.features.link.ConnectorProperties	[org.freeplane.features.link.ConnectorProperties::java.util.Optional<java.lang.String> sourceLabel, org.freeplane.features.link.ConnectorProperties::setSourceLabel(java.lang.String):void, org.freeplane.features.link.ConnectorProperties::emptyString2emptyOptional(java.lang.String):java.util.Optional<java.lang.String>, org.freeplane.features.link.ConnectorProperties::java.util.Optional<java.lang.String> middleLabel, org.freeplane.features.link.ConnectorProperties::setMiddleLabel(java.lang.String):void]
org.freeplane.features.link.ConnectorProperties	[org.freeplane.features.link.ConnectorProperties::java.util.Optional<java.lang.String> sourceLabel, org.freeplane.features.link.ConnectorProperties::setSourceLabel(java.lang.String):void, org.freeplane.features.link.ConnectorProperties::emptyString2emptyOptional(java.lang.String):java.util.Optional<java.lang.String>]
org.freeplane.features.link.ConnectorProperties	[org.freeplane.features.link.ConnectorProperties::java.awt.Point endInclination, org.freeplane.features.link.ConnectorProperties::getEndInclination():java.awt.Point, org.freeplane.features.link.ConnectorProperties::setEndInclination(java.awt.Point):void]
org.freeplane.features.map.MapController	[org.freeplane.features.map.MapController::java.util.LinkedList<org.freeplane.features.map.INodeChangeListener> nodeChangeListeners, org.freeplane.features.map.MapController::boolean areNodeChangeListenersSorted, org.freeplane.features.map.MapController::addNodeChangeListener(org.freeplane.features.map.INodeChangeListener):void, org.freeplane.features.map.MapController::sortNodeChangeListeners():void, org.freeplane.features.map.MapController::getNodeChangeListeners():java.util.Collection<org.freeplane.features.map.INodeChangeListener>, org.freeplane.features.map.MapController::fireNodeChanged(org.freeplane.features.map.NodeModel, org.freeplane.features.map.NodeChangeEvent):void, org.freeplane.features.map.MapController::removeNodeChangeListener(org.freeplane.features.map.INodeChangeListener):void, org.freeplane.features.map.MapController::addUINodeChangeListener(org.freeplane.features.map.INodeChangeListener):void, org.freeplane.features.map.MapController::removeNodeChangeListener(java.lang.Class<? extends org.freeplane.features.mode.AController.IActionOnChange>, javax.swing.Action):void]
org.freeplane.features.map.MapController	[org.freeplane.features.map.MapController::fireFoldingChanged(org.freeplane.features.map.NodeModel):void, org.freeplane.features.map.MapController::mapSaved(org.freeplane.features.map.MapModel, boolean):void, org.freeplane.features.map.MapController::isFoldingPersistentAlways():boolean]
org.freeplane.features.map.MapController	[org.freeplane.features.map.MapController::java.util.List<org.freeplane.features.map.IMapLifeCycleListener> mapLifeCycleListeners, org.freeplane.features.map.MapController::removeMapLifeCycleListener(org.freeplane.features.map.IMapLifeCycleListener):void, org.freeplane.features.map.MapController::getMapLifeCycleListeners():java.util.Collection<org.freeplane.features.map.IMapLifeCycleListener>, org.freeplane.features.map.MapController::fireMapRemoved(org.freeplane.features.map.MapModel):void, org.freeplane.features.map.MapController::closeWithoutSaving(org.freeplane.features.map.MapModel):void, org.freeplane.features.map.MapController::fireMapCreated(org.freeplane.features.map.MapModel):void]
org.freeplane.features.map.MapController	[org.freeplane.features.map.MapController::org.freeplane.features.map.MapController.ActionEnablerOnChange actionEnablerOnChange, org.freeplane.features.map.MapController::org.freeplane.features.map.MapController.ActionSelectorOnChange actionSelectorOnChange, org.freeplane.features.map.MapController::addListenerForAction(org.freeplane.core.ui.AFreeplaneAction):void, org.freeplane.features.map.MapController::removeListenerForAction(org.freeplane.core.ui.AFreeplaneAction):void]
org.freeplane.features.map.MapController	[org.freeplane.features.map.MapController::java.util.List<org.freeplane.features.map.IMapChangeListener> mapChangeListeners, org.freeplane.features.map.MapController::boolean areMapChangeListenersSorted, org.freeplane.features.map.MapController::addMapChangeListener(org.freeplane.features.map.IMapChangeListener):void, org.freeplane.features.map.MapController::sortMapChangeListeners():void, org.freeplane.features.map.MapController::fireNodeMoved(org.freeplane.features.map.NodeMoveEvent):void, org.freeplane.features.map.MapController::getMapChangeListeners():java.util.Collection<org.freeplane.features.map.IMapChangeListener>, org.freeplane.features.map.MapController::firePreNodeMoved(org.freeplane.features.map.NodeMoveEvent):void, org.freeplane.features.map.MapController::firePreNodeDelete(org.freeplane.features.map.NodeDeletionEvent):void, org.freeplane.features.map.MapController::fireNodeInserted(org.freeplane.features.map.NodeModel, org.freeplane.features.map.NodeModel, int):void, org.freeplane.features.map.MapController::fireNodeDeleted(org.freeplane.features.map.NodeDeletionEvent):void, org.freeplane.features.map.MapController::addUIMapChangeListener(org.freeplane.features.map.IMapChangeListener):void, org.freeplane.features.map.MapController::removeMapChangeListener(org.freeplane.features.map.IMapChangeListener):void, org.freeplane.features.map.MapController::removeMapChangeListener(java.lang.Class<? extends org.freeplane.features.mode.AController.IActionOnChange>, javax.swing.Action):void, org.freeplane.features.map.MapController::fireMapChanged(org.freeplane.features.map.MapChangeEvent):void, org.freeplane.features.map.MapController::java.util.LinkedList<org.freeplane.features.map.INodeChangeListener> nodeChangeListeners, org.freeplane.features.map.MapController::boolean areNodeChangeListenersSorted, org.freeplane.features.map.MapController::addNodeChangeListener(org.freeplane.features.map.INodeChangeListener):void, org.freeplane.features.map.MapController::sortNodeChangeListeners():void, org.freeplane.features.map.MapController::getNodeChangeListeners():java.util.Collection<org.freeplane.features.map.INodeChangeListener>, org.freeplane.features.map.MapController::fireNodeChanged(org.freeplane.features.map.NodeModel, org.freeplane.features.map.NodeChangeEvent):void, org.freeplane.features.map.MapController::removeNodeChangeListener(org.freeplane.features.map.INodeChangeListener):void, org.freeplane.features.map.MapController::addUINodeChangeListener(org.freeplane.features.map.INodeChangeListener):void, org.freeplane.features.map.MapController::removeNodeChangeListener(java.lang.Class<? extends org.freeplane.features.mode.AController.IActionOnChange>, javax.swing.Action):void, org.freeplane.features.map.MapController::removeNodeSelectionListener(java.lang.Class<? extends org.freeplane.features.mode.AController.IActionOnChange>, javax.swing.Action):void, org.freeplane.features.map.MapController::fireFoldingChanged(org.freeplane.features.map.NodeModel):void, org.freeplane.features.map.MapController::mapSaved(org.freeplane.features.map.MapModel, boolean):void, org.freeplane.features.map.MapController::isFoldingPersistentAlways():boolean]
org.freeplane.features.map.MapController	[org.freeplane.features.map.MapController::java.util.List<org.freeplane.features.map.IMapChangeListener> mapChangeListeners, org.freeplane.features.map.MapController::boolean areMapChangeListenersSorted, org.freeplane.features.map.MapController::addMapChangeListener(org.freeplane.features.map.IMapChangeListener):void, org.freeplane.features.map.MapController::sortMapChangeListeners():void, org.freeplane.features.map.MapController::fireNodeMoved(org.freeplane.features.map.NodeMoveEvent):void, org.freeplane.features.map.MapController::getMapChangeListeners():java.util.Collection<org.freeplane.features.map.IMapChangeListener>, org.freeplane.features.map.MapController::firePreNodeMoved(org.freeplane.features.map.NodeMoveEvent):void, org.freeplane.features.map.MapController::firePreNodeDelete(org.freeplane.features.map.NodeDeletionEvent):void, org.freeplane.features.map.MapController::fireNodeInserted(org.freeplane.features.map.NodeModel, org.freeplane.features.map.NodeModel, int):void, org.freeplane.features.map.MapController::fireNodeDeleted(org.freeplane.features.map.NodeDeletionEvent):void, org.freeplane.features.map.MapController::addUIMapChangeListener(org.freeplane.features.map.IMapChangeListener):void, org.freeplane.features.map.MapController::removeMapChangeListener(org.freeplane.features.map.IMapChangeListener):void, org.freeplane.features.map.MapController::removeMapChangeListener(java.lang.Class<? extends org.freeplane.features.mode.AController.IActionOnChange>, javax.swing.Action):void, org.freeplane.features.map.MapController::fireMapChanged(org.freeplane.features.map.MapChangeEvent):void]
org.freeplane.features.map.MapController	[org.freeplane.features.map.MapController::java.util.List<org.freeplane.features.map.IMapChangeListener> mapChangeListeners, org.freeplane.features.map.MapController::boolean areMapChangeListenersSorted, org.freeplane.features.map.MapController::addMapChangeListener(org.freeplane.features.map.IMapChangeListener):void, org.freeplane.features.map.MapController::sortMapChangeListeners():void, org.freeplane.features.map.MapController::fireNodeMoved(org.freeplane.features.map.NodeMoveEvent):void, org.freeplane.features.map.MapController::getMapChangeListeners():java.util.Collection<org.freeplane.features.map.IMapChangeListener>, org.freeplane.features.map.MapController::firePreNodeMoved(org.freeplane.features.map.NodeMoveEvent):void, org.freeplane.features.map.MapController::firePreNodeDelete(org.freeplane.features.map.NodeDeletionEvent):void, org.freeplane.features.map.MapController::fireNodeInserted(org.freeplane.features.map.NodeModel, org.freeplane.features.map.NodeModel, int):void, org.freeplane.features.map.MapController::fireNodeDeleted(org.freeplane.features.map.NodeDeletionEvent):void, org.freeplane.features.map.MapController::addUIMapChangeListener(org.freeplane.features.map.IMapChangeListener):void, org.freeplane.features.map.MapController::removeMapChangeListener(org.freeplane.features.map.IMapChangeListener):void, org.freeplane.features.map.MapController::removeMapChangeListener(java.lang.Class<? extends org.freeplane.features.mode.AController.IActionOnChange>, javax.swing.Action):void, org.freeplane.features.map.MapController::fireMapChanged(org.freeplane.features.map.MapChangeEvent):void, org.freeplane.features.map.MapController::java.util.LinkedList<org.freeplane.features.map.INodeChangeListener> nodeChangeListeners, org.freeplane.features.map.MapController::boolean areNodeChangeListenersSorted, org.freeplane.features.map.MapController::addNodeChangeListener(org.freeplane.features.map.INodeChangeListener):void, org.freeplane.features.map.MapController::sortNodeChangeListeners():void, org.freeplane.features.map.MapController::getNodeChangeListeners():java.util.Collection<org.freeplane.features.map.INodeChangeListener>, org.freeplane.features.map.MapController::fireNodeChanged(org.freeplane.features.map.NodeModel, org.freeplane.features.map.NodeChangeEvent):void, org.freeplane.features.map.MapController::removeNodeChangeListener(org.freeplane.features.map.INodeChangeListener):void, org.freeplane.features.map.MapController::addUINodeChangeListener(org.freeplane.features.map.INodeChangeListener):void, org.freeplane.features.map.MapController::removeNodeChangeListener(java.lang.Class<? extends org.freeplane.features.mode.AController.IActionOnChange>, javax.swing.Action):void, org.freeplane.features.map.MapController::removeNodeSelectionListener(java.lang.Class<? extends org.freeplane.features.mode.AController.IActionOnChange>, javax.swing.Action):void]
org.freeplane.features.map.MapController	[org.freeplane.features.map.MapController::java.util.List<org.freeplane.features.map.IMapLifeCycleListener> mapLifeCycleListeners, org.freeplane.features.map.MapController::removeMapLifeCycleListener(org.freeplane.features.map.IMapLifeCycleListener):void, org.freeplane.features.map.MapController::getMapLifeCycleListeners():java.util.Collection<org.freeplane.features.map.IMapLifeCycleListener>, org.freeplane.features.map.MapController::fireMapRemoved(org.freeplane.features.map.MapModel):void, org.freeplane.features.map.MapController::closeWithoutSaving(org.freeplane.features.map.MapModel):void, org.freeplane.features.map.MapController::fireMapCreated(org.freeplane.features.map.MapModel):void, org.freeplane.features.map.MapController::openMap(java.net.URL):void, org.freeplane.features.map.MapController::newMap():org.freeplane.features.map.MapModel]
org.freeplane.features.map.mindmapmode.clipboard.MMapClipboardController	[org.freeplane.features.map.mindmapmode.clipboard.MMapClipboardController::getFlavorHandler(java.awt.datatransfer.Transferable):org.freeplane.features.map.mindmapmode.clipboard.MMapClipboardController.IDataFlavorHandler, org.freeplane.features.map.mindmapmode.clipboard.MMapClipboardController::getFlavorHandlers():java.util.Collection<org.freeplane.features.map.mindmapmode.clipboard.MMapClipboardController.IDataFlavorHandler>, org.freeplane.features.map.mindmapmode.clipboard.MMapClipboardController::castToFileList(java.lang.Object):java.util.List<java.io.File>, org.freeplane.features.map.mindmapmode.clipboard.MMapClipboardController::getSupportedHtmlFlavor(java.awt.datatransfer.Transferable):java.awt.datatransfer.DataFlavor, org.freeplane.features.map.mindmapmode.clipboard.MMapClipboardController::getClipboardContents():java.awt.datatransfer.Transferable, org.freeplane.features.map.mindmapmode.clipboard.MMapClipboardController::shouldIgnoreFileListFlavor(java.util.List<java.io.File>):boolean]
org.freeplane.features.map.mindmapmode.clipboard.MMapClipboardController	[org.freeplane.features.map.mindmapmode.clipboard.MMapClipboardController::cleanHtml(java.lang.String):java.lang.String, org.freeplane.features.map.mindmapmode.clipboard.MMapClipboardController::findLink(java.lang.String, boolean):java.lang.String, org.freeplane.features.map.mindmapmode.clipboard.MMapClipboardController::getFlavorHandler(java.awt.datatransfer.Transferable):org.freeplane.features.map.mindmapmode.clipboard.MMapClipboardController.IDataFlavorHandler, org.freeplane.features.map.mindmapmode.clipboard.MMapClipboardController::getFlavorHandlers():java.util.Collection<org.freeplane.features.map.mindmapmode.clipboard.MMapClipboardController.IDataFlavorHandler>, org.freeplane.features.map.mindmapmode.clipboard.MMapClipboardController::castToFileList(java.lang.Object):java.util.List<java.io.File>, org.freeplane.features.map.mindmapmode.clipboard.MMapClipboardController::getSupportedHtmlFlavor(java.awt.datatransfer.Transferable):java.awt.datatransfer.DataFlavor, org.freeplane.features.map.mindmapmode.clipboard.MMapClipboardController::getClipboardContents():java.awt.datatransfer.Transferable, org.freeplane.features.map.mindmapmode.clipboard.MMapClipboardController::shouldIgnoreFileListFlavor(java.util.List<java.io.File>):boolean]
org.freeplane.main.addons.AddOnProperties	[org.freeplane.main.addons.AddOnProperties::java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> translations, org.freeplane.main.addons.AddOnProperties::java.util.List<java.lang.String[]> deinstallationRules, org.freeplane.main.addons.AddOnProperties::addAsChildWithContent(org.freeplane.n3.nanoxml.XMLElement, java.lang.String, java.lang.String):void, org.freeplane.main.addons.AddOnProperties::addDeinstallationRulesAsChild(org.freeplane.n3.nanoxml.XMLElement):void, org.freeplane.main.addons.AddOnProperties::addTranslationsAsChild(org.freeplane.n3.nanoxml.XMLElement):void, org.freeplane.main.addons.AddOnProperties::java.util.Map<java.lang.String,java.lang.String> defaultProperties, org.freeplane.main.addons.AddOnProperties::addDefaultPropertiesAsChild(org.freeplane.n3.nanoxml.XMLElement):void, org.freeplane.main.addons.AddOnProperties::java.util.List<java.lang.String> images, org.freeplane.main.addons.AddOnProperties::setImages(java.util.Collection<java.lang.String>):void, org.freeplane.main.addons.AddOnProperties::addImagesAsChild(org.freeplane.n3.nanoxml.XMLElement):void]
org.freeplane.main.addons.AddOnProperties	[org.freeplane.main.addons.AddOnProperties::java.util.Map<java.lang.String,java.lang.String> defaultProperties, org.freeplane.main.addons.AddOnProperties::addDefaultPropertiesAsChild(org.freeplane.n3.nanoxml.XMLElement):void, org.freeplane.main.addons.AddOnProperties::java.util.List<java.lang.String> images, org.freeplane.main.addons.AddOnProperties::setImages(java.util.Collection<java.lang.String>):void, org.freeplane.main.addons.AddOnProperties::addImagesAsChild(org.freeplane.n3.nanoxml.XMLElement):void]
org.freeplane.main.addons.AddOnProperties	[org.freeplane.main.addons.AddOnProperties::java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> translations, org.freeplane.main.addons.AddOnProperties::java.util.List<java.lang.String[]> deinstallationRules, org.freeplane.main.addons.AddOnProperties::addAsChildWithContent(org.freeplane.n3.nanoxml.XMLElement, java.lang.String, java.lang.String):void, org.freeplane.main.addons.AddOnProperties::addDeinstallationRulesAsChild(org.freeplane.n3.nanoxml.XMLElement):void, org.freeplane.main.addons.AddOnProperties::addTranslationsAsChild(org.freeplane.n3.nanoxml.XMLElement):void]
org.freeplane.main.addons.AddOnProperties	[org.freeplane.main.addons.AddOnProperties::java.util.List<java.lang.String> images, org.freeplane.main.addons.AddOnProperties::setImages(java.util.Collection<java.lang.String>):void, org.freeplane.main.addons.AddOnProperties::addImagesAsChild(org.freeplane.n3.nanoxml.XMLElement):void]
org.freeplane.main.addons.AddOnProperties	[org.freeplane.main.addons.AddOnProperties::java.net.URL homepage, org.freeplane.main.addons.AddOnProperties::getUpdateUrl():java.net.URL, org.freeplane.main.addons.AddOnProperties::homepagePlusLatestVersionFile():java.net.URL, org.freeplane.main.addons.AddOnProperties::java.net.URL updateUrl, org.freeplane.main.addons.AddOnProperties::setUpdateUrl(java.lang.Object):void]
org.freeplane.main.addons.AddOnProperties	[org.freeplane.main.addons.AddOnProperties::java.net.URL homepage, org.freeplane.main.addons.AddOnProperties::getUpdateUrl():java.net.URL, org.freeplane.main.addons.AddOnProperties::homepagePlusLatestVersionFile():java.net.URL]
org.freeplane.main.application.SingleInstanceManager	[org.freeplane.main.application.SingleInstanceManager::java.lang.Integer port, org.freeplane.main.application.SingleInstanceManager::startAsSlave(java.lang.String[]):boolean, org.freeplane.main.application.SingleInstanceManager::openFilesInMaster(java.lang.String[]):boolean, org.freeplane.main.application.SingleInstanceManager::boolean isSlave, org.freeplane.main.application.SingleInstanceManager::boolean isMasterPresent, org.freeplane.main.application.SingleInstanceManager::isMasterPresent():boolean]
org.freeplane.main.application.SingleInstanceManager	[org.freeplane.main.application.SingleInstanceManager::boolean isSlave, org.freeplane.main.application.SingleInstanceManager::boolean isMasterPresent, org.freeplane.main.application.SingleInstanceManager::isMasterPresent():boolean]
org.freeplane.main.application.SingleInstanceManager	[org.freeplane.main.application.SingleInstanceManager::java.lang.Integer port, org.freeplane.main.application.SingleInstanceManager::startAsSlave(java.lang.String[]):boolean, org.freeplane.main.application.SingleInstanceManager::openFilesInMaster(java.lang.String[]):boolean, org.freeplane.main.application.SingleInstanceManager::boolean isSlave, org.freeplane.main.application.SingleInstanceManager::boolean isMasterPresent, org.freeplane.main.application.SingleInstanceManager::isMasterPresent():boolean, org.freeplane.main.application.SingleInstanceManager::org.freeplane.main.application.FreeplaneStarter starter, org.freeplane.main.application.SingleInstanceManager::startAsMaster():boolean, org.freeplane.main.application.SingleInstanceManager::checkIsMasterPresent():boolean]
org.freeplane.main.application.SingleInstanceManager	[org.freeplane.main.application.SingleInstanceManager::java.lang.Integer port, org.freeplane.main.application.SingleInstanceManager::startAsSlave(java.lang.String[]):boolean, org.freeplane.main.application.SingleInstanceManager::openFilesInMaster(java.lang.String[]):boolean]
org.freeplane.view.swing.map.link.AConnectorView	[org.freeplane.view.swing.map.link.AConnectorView::paintArrow(java.awt.Point, java.awt.Point, java.awt.Graphics2D, double, org.freeplane.view.swing.map.link.AConnectorView.ArrowDirection):void, org.freeplane.view.swing.map.link.AConnectorView::createArrowShape(java.awt.Point, java.awt.Point, double, org.freeplane.view.swing.map.link.AConnectorView.ArrowDirection):java.awt.Polygon, org.freeplane.view.swing.map.link.AConnectorView::createArrowDirection(java.awt.Point, java.awt.Point, double):java.awt.geom.Point2D, org.freeplane.view.swing.map.link.AConnectorView::outgoingArrowShape(java.awt.Point, java.awt.geom.Point2D):java.awt.Polygon, org.freeplane.view.swing.map.link.AConnectorView::incomingArrowShape(java.awt.Point, java.awt.geom.Point2D):java.awt.Polygon]
org.freeplane.core.resources.components.OptionPanelBuilder	[org.freeplane.core.resources.components.OptionPanelBuilder::org.freeplane.core.io.ReadManager readManager, org.freeplane.core.resources.components.OptionPanelBuilder::initReadManager():void, org.freeplane.core.resources.components.OptionPanelBuilder::load(java.io.Reader):void, org.freeplane.core.resources.components.OptionPanelBuilder::java.util.List<java.net.URL> preferencesSources, org.freeplane.core.resources.components.OptionPanelBuilder::load(java.net.URL):void]
org.freeplane.core.resources.components.OptionPanelBuilder	[org.freeplane.core.resources.components.OptionPanelBuilder::org.freeplane.core.io.ReadManager readManager, org.freeplane.core.resources.components.OptionPanelBuilder::initReadManager():void, org.freeplane.core.resources.components.OptionPanelBuilder::load(java.io.Reader):void]
org.freeplane.core.resources.components.OptionPanelBuilder	[org.freeplane.core.resources.components.OptionPanelBuilder::addComboProperty(java.lang.String, java.lang.String, java.util.Vector<java.lang.String>, java.util.Vector<?>, int):void, org.freeplane.core.resources.components.OptionPanelBuilder::createComboProperty(java.lang.String, java.util.Vector<java.lang.String>, java.util.Vector<?>):org.freeplane.core.resources.components.OptionPanelBuilder.ComboPropertyCreator, org.freeplane.core.resources.components.OptionPanelBuilder::addEditableComboProperty(java.lang.String, java.lang.String, java.util.Vector<java.lang.String>, java.util.Vector<java.lang.String>, int):void, org.freeplane.core.resources.components.OptionPanelBuilder::createEditableComboProperty(java.lang.String, java.util.Vector<java.lang.String>, java.util.Vector<java.lang.String>):org.freeplane.core.resources.components.IPropertyControlCreator]
org.freeplane.core.ui.components.IconSelectionPopupDialog	[org.freeplane.core.ui.components.IconSelectionPopupDialog::java.awt.event.ActionListener listener, org.freeplane.core.ui.components.IconSelectionPopupDialog::javax.swing.JCheckBox closeAfterSelection, org.freeplane.core.ui.components.IconSelectionPopupDialog::javax.swing.Box statusPanel, org.freeplane.core.ui.components.IconSelectionPopupDialog::setActionListener(java.awt.event.ActionListener):void]
org.freeplane.core.ui.components.IconSelectionPopupDialog	[org.freeplane.core.ui.components.IconSelectionPopupDialog::java.awt.event.MouseListener focusRequester, org.freeplane.core.ui.components.IconSelectionPopupDialog::configureButton(javax.swing.AbstractButton):void, org.freeplane.core.ui.components.IconSelectionPopupDialog::java.awt.event.ActionListener actionPanelActionListener]
org.freeplane.core.ui.components.IconSelectionPopupDialog	[org.freeplane.core.ui.components.IconSelectionPopupDialog::javax.swing.Timer filterTimer, org.freeplane.core.ui.components.IconSelectionPopupDialog::filterIconsLater():void, org.freeplane.core.ui.components.IconSelectionPopupDialog::setupFilterTextField_and_KeyListener():javax.swing.JTextField]
org.freeplane.core.ui.components.IconSelectionPopupDialog	[org.freeplane.core.ui.components.IconSelectionPopupDialog::javax.swing.JLabel descriptionLabel, org.freeplane.core.ui.components.IconSelectionPopupDialog::java.util.List<javax.swing.JLabel> iconLabels, org.freeplane.core.ui.components.IconSelectionPopupDialog::findIndex(java.awt.Point):int, org.freeplane.core.ui.components.IconSelectionPopupDialog::cursorDown():void, org.freeplane.core.ui.components.IconSelectionPopupDialog::cursorLeft():void, org.freeplane.core.ui.components.IconSelectionPopupDialog::cursorRight():void, org.freeplane.core.ui.components.IconSelectionPopupDialog::cursorUp():void, org.freeplane.core.ui.components.IconSelectionPopupDialog::select(java.awt.Point):void, org.freeplane.core.ui.components.IconSelectionPopupDialog::java.util.List<? extends org.freeplane.features.icon.IconDescription> icons, org.freeplane.core.ui.components.IconSelectionPopupDialog::findIndexByKeyEvent(java.awt.event.KeyEvent):int, org.freeplane.core.ui.components.IconSelectionPopupDialog::changeKeystroke():void, org.freeplane.core.ui.components.IconSelectionPopupDialog::select(int):void, org.freeplane.core.ui.components.IconSelectionPopupDialog::javax.swing.JPanel iconPanel, org.freeplane.core.ui.components.IconSelectionPopupDialog::javax.swing.JTextField filterTextField, org.freeplane.core.ui.components.IconSelectionPopupDialog::filterIcons(java.awt.event.ActionEvent):void, org.freeplane.core.ui.components.IconSelectionPopupDialog::adjustSelection():void, org.freeplane.core.ui.components.IconSelectionPopupDialog::highlightSelected():void, org.freeplane.core.ui.components.IconSelectionPopupDialog::scrollToSelected():void, org.freeplane.core.ui.components.IconSelectionPopupDialog::unhighlightSelected():void, org.freeplane.core.ui.components.IconSelectionPopupDialog::javax.swing.JLabel selected]
org.freeplane.core.ui.menubuilders.menu.PopupMenuListenerForEntry	[org.freeplane.core.ui.menubuilders.menu.PopupMenuListenerForEntry::org.freeplane.core.ui.menubuilders.generic.EntryPopupListener popupListener, org.freeplane.core.ui.menubuilders.menu.PopupMenuListenerForEntry::fireChildEntriesWillBecomeVisible(org.freeplane.core.ui.menubuilders.generic.Entry):void, org.freeplane.core.ui.menubuilders.menu.PopupMenuListenerForEntry::fireChildEntriesHidden(org.freeplane.core.ui.menubuilders.generic.Entry):void]
org.freeplane.features.commandsearch.CommandSearchDialog	[org.freeplane.features.commandsearch.CommandSearchDialog::javax.swing.JCheckBox searchMenus, org.freeplane.features.commandsearch.CommandSearchDialog::javax.swing.JCheckBox searchPrefs, org.freeplane.features.commandsearch.CommandSearchDialog::javax.swing.JCheckBox searchIcons, org.freeplane.features.commandsearch.CommandSearchDialog::initScopeFromPrefs():void]
org.freeplane.features.commandsearch.CommandSearchDialog	[org.freeplane.features.commandsearch.CommandSearchDialog::javax.swing.JCheckBox searchMenus, org.freeplane.features.commandsearch.CommandSearchDialog::javax.swing.JCheckBox searchPrefs, org.freeplane.features.commandsearch.CommandSearchDialog::javax.swing.JCheckBox searchIcons, org.freeplane.features.commandsearch.CommandSearchDialog::initScopeFromPrefs():void, org.freeplane.features.commandsearch.CommandSearchDialog::org.freeplane.features.commandsearch.PreferencesIndexer preferencesIndexer, org.freeplane.features.commandsearch.CommandSearchDialog::org.freeplane.features.commandsearch.MenuStructureIndexer menuStructureIndexer, org.freeplane.features.commandsearch.CommandSearchDialog::org.freeplane.features.commandsearch.IconIndexer iconIndexer, org.freeplane.features.commandsearch.CommandSearchDialog::updateMatches():void, org.freeplane.features.commandsearch.CommandSearchDialog::javax.swing.JComboBox<java.lang.String> inputWithHistory, org.freeplane.features.commandsearch.CommandSearchDialog::reconfigureComboBoxInputMapsToRespondOnlyToShiftKeys():void, org.freeplane.features.commandsearch.CommandSearchDialog::moveActionToShift(javax.swing.JComponent, int, int):void, org.freeplane.features.commandsearch.CommandSearchDialog::addTextToSearchHistory():void, org.freeplane.features.commandsearch.CommandSearchDialog::javax.swing.JTextField input, org.freeplane.features.commandsearch.CommandSearchDialog::createScopeButton(org.freeplane.features.commandsearch.CommandSearchDialog.Scope):javax.swing.JCheckBox, org.freeplane.features.commandsearch.CommandSearchDialog::javax.swing.JList<org.freeplane.features.commandsearch.SearchItem> resultList, org.freeplane.features.commandsearch.CommandSearchDialog::javax.swing.JCheckBox closeAfterExecute, org.freeplane.features.commandsearch.CommandSearchDialog::executeItem(java.awt.event.InputEvent, int):void, org.freeplane.features.commandsearch.CommandSearchDialog::updateResultList():void, org.freeplane.features.commandsearch.CommandSearchDialog::copySelectedItemToClipboard():void, org.freeplane.features.commandsearch.CommandSearchDialog::shouldAssignAccelerator(java.awt.event.InputEvent):boolean]
org.freeplane.features.commandsearch.CommandSearchDialog	[org.freeplane.features.commandsearch.CommandSearchDialog::javax.swing.JComboBox<java.lang.String> inputWithHistory, org.freeplane.features.commandsearch.CommandSearchDialog::reconfigureComboBoxInputMapsToRespondOnlyToShiftKeys():void, org.freeplane.features.commandsearch.CommandSearchDialog::moveActionToShift(javax.swing.JComponent, int, int):void, org.freeplane.features.commandsearch.CommandSearchDialog::addTextToSearchHistory():void, org.freeplane.features.commandsearch.CommandSearchDialog::javax.swing.JTextField input, org.freeplane.features.commandsearch.CommandSearchDialog::createScopeButton(org.freeplane.features.commandsearch.CommandSearchDialog.Scope):javax.swing.JCheckBox, org.freeplane.features.commandsearch.CommandSearchDialog::javax.swing.JList<org.freeplane.features.commandsearch.SearchItem> resultList]
org.freeplane.features.commandsearch.CommandSearchDialog	[org.freeplane.features.commandsearch.CommandSearchDialog::javax.swing.JCheckBox searchMenus, org.freeplane.features.commandsearch.CommandSearchDialog::javax.swing.JCheckBox searchPrefs, org.freeplane.features.commandsearch.CommandSearchDialog::javax.swing.JCheckBox searchIcons, org.freeplane.features.commandsearch.CommandSearchDialog::initScopeFromPrefs():void, org.freeplane.features.commandsearch.CommandSearchDialog::org.freeplane.features.commandsearch.PreferencesIndexer preferencesIndexer, org.freeplane.features.commandsearch.CommandSearchDialog::org.freeplane.features.commandsearch.MenuStructureIndexer menuStructureIndexer, org.freeplane.features.commandsearch.CommandSearchDialog::org.freeplane.features.commandsearch.IconIndexer iconIndexer, org.freeplane.features.commandsearch.CommandSearchDialog::updateMatches():void]
org.freeplane.features.edge.mindmapmode.ColorListEditorPanelBuilder	[org.freeplane.features.edge.mindmapmode.ColorListEditorPanelBuilder::java.util.List<java.awt.Color> colors, org.freeplane.features.edge.mindmapmode.ColorListEditorPanelBuilder::java.util.List<org.freeplane.features.edge.mindmapmode.ColorListEditorPanelBuilder.RowButtons> buttons, org.freeplane.features.edge.mindmapmode.ColorListEditorPanelBuilder::addColorButtonRow():void, org.freeplane.features.edge.mindmapmode.ColorListEditorPanelBuilder::addColorButtons():void]
org.freeplane.features.edge.mindmapmode.ColorListEditorPanelBuilder	[org.freeplane.features.edge.mindmapmode.ColorListEditorPanelBuilder::javax.swing.JPanel panel, org.freeplane.features.edge.mindmapmode.ColorListEditorPanelBuilder::main(java.lang.String[]):void, org.freeplane.features.edge.mindmapmode.ColorListEditorPanelBuilder::com.jgoodies.forms.layout.CellConstraints cc, org.freeplane.features.edge.mindmapmode.ColorListEditorPanelBuilder::addAddColorButton():void, org.freeplane.features.edge.mindmapmode.ColorListEditorPanelBuilder::com.jgoodies.forms.layout.FormLayout formlayout]
org.freeplane.features.edge.mindmapmode.ColorListEditorPanelBuilder	[org.freeplane.features.edge.mindmapmode.ColorListEditorPanelBuilder::com.jgoodies.forms.layout.CellConstraints cc, org.freeplane.features.edge.mindmapmode.ColorListEditorPanelBuilder::addAddColorButton():void, org.freeplane.features.edge.mindmapmode.ColorListEditorPanelBuilder::com.jgoodies.forms.layout.FormLayout formlayout]
org.freeplane.features.icon.IconStore	[org.freeplane.features.icon.IconStore::java.util.Map<java.lang.String,org.freeplane.features.icon.MindIcon> mindIcons, org.freeplane.features.icon.IconStore::getMindIcon(java.lang.String):org.freeplane.features.icon.MindIcon, org.freeplane.features.icon.IconStore::containsMindIcon(java.lang.String):boolean, org.freeplane.features.icon.IconStore::getUIIcon(java.lang.String):org.freeplane.features.icon.UIIcon, org.freeplane.features.icon.IconStore::java.util.Map<java.lang.String,org.freeplane.features.icon.UIIcon> uiIcons, org.freeplane.features.icon.IconStore::addUIIcon(org.freeplane.features.icon.UIIcon):void, org.freeplane.features.icon.IconStore::getMindIcons():java.util.Collection<org.freeplane.features.icon.MindIcon>]
org.freeplane.features.icon.IconStore	[org.freeplane.features.icon.IconStore::java.util.Map<java.lang.String,org.freeplane.features.icon.IconGroup> groups, org.freeplane.features.icon.IconStore::getGroups():java.util.Collection<org.freeplane.features.icon.IconGroup>, org.freeplane.features.icon.IconStore::getUserIcons():java.util.List<org.freeplane.features.icon.MindIcon>, org.freeplane.features.icon.IconStore::addGroup(org.freeplane.features.icon.IconGroup):void, org.freeplane.features.icon.IconStore::addIcons(org.freeplane.features.icon.IconGroup):void]
org.freeplane.features.icon.IconStore	[org.freeplane.features.icon.IconStore::java.util.Map<java.lang.String,org.freeplane.features.icon.MindIcon> mindIcons, org.freeplane.features.icon.IconStore::getMindIcon(java.lang.String):org.freeplane.features.icon.MindIcon, org.freeplane.features.icon.IconStore::containsMindIcon(java.lang.String):boolean, org.freeplane.features.icon.IconStore::getUIIcon(java.lang.String):org.freeplane.features.icon.UIIcon]
org.freeplane.features.styles.mindmapmode.styleeditorpanel.StyleControlGroup	[org.freeplane.features.styles.mindmapmode.styleeditorpanel.StyleControlGroup::org.freeplane.features.styles.mindmapmode.styleeditorpanel.RevertingProperty mSetStyle, org.freeplane.features.styles.mindmapmode.styleeditorpanel.StyleControlGroup::java.awt.Container mStyleBox, org.freeplane.features.styles.mindmapmode.styleeditorpanel.StyleControlGroup::addStyleBox(com.jgoodies.forms.builder.DefaultFormBuilder):void, org.freeplane.features.styles.mindmapmode.styleeditorpanel.StyleControlGroup::org.freeplane.features.styles.mindmapmode.MUIFactory uiFactory]
org.freeplane.features.styles.mindmapmode.styleeditorpanel.StyleControlGroup	[org.freeplane.features.styles.mindmapmode.styleeditorpanel.StyleControlGroup::javax.swing.JRadioButton redefinesStyleForCurrentMapOnly, org.freeplane.features.styles.mindmapmode.styleeditorpanel.StyleControlGroup::javax.swing.JRadioButton redefinesStyleForCurrentMapAndTemplate, org.freeplane.features.styles.mindmapmode.styleeditorpanel.StyleControlGroup::javax.swing.JTextArea redefinedTemplate, org.freeplane.features.styles.mindmapmode.styleeditorpanel.StyleControlGroup::updateTemplateName(org.freeplane.features.map.MapModel):void]
org.freeplane.features.text.mindmapmode.MTextController.NodeTextEditor	[org.freeplane.features.text.mindmapmode.MTextController.NodeTextEditor::org.freeplane.features.map.NodeModel prevSelectedModel, org.freeplane.features.text.mindmapmode.MTextController.NodeTextEditor::org.freeplane.features.mode.Controller controller, org.freeplane.features.text.mindmapmode.MTextController.NodeTextEditor::boolean parentFolded, org.freeplane.features.text.mindmapmode.MTextController.NodeTextEditor::cancel(org.freeplane.features.map.NodeModel):void]
org.freeplane.features.text.mindmapmode.MTextController.NodeTextEditor	[org.freeplane.features.text.mindmapmode.MTextController.NodeTextEditor::org.freeplane.features.map.NodeModel prevSelectedModel, org.freeplane.features.text.mindmapmode.MTextController.NodeTextEditor::org.freeplane.features.mode.Controller controller, org.freeplane.features.text.mindmapmode.MTextController.NodeTextEditor::boolean parentFolded, org.freeplane.features.text.mindmapmode.MTextController.NodeTextEditor::cancel(org.freeplane.features.map.NodeModel):void, org.freeplane.features.text.mindmapmode.MTextController.NodeTextEditor::ok(org.freeplane.features.map.NodeModel, java.lang.String):void, org.freeplane.features.text.mindmapmode.MTextController.NodeTextEditor::preserveRootNodeLocationOnScreen():void]
org.freeplane.view.swing.features.filepreview.ExternalResource	[org.freeplane.view.swing.features.filepreview.ExternalResource::java.util.Set<org.freeplane.view.swing.map.NodeView> viewers, org.freeplane.view.swing.features.filepreview.ExternalResource::removeViewers():void, org.freeplane.view.swing.features.filepreview.ExternalResource::setZoom(float):void, org.freeplane.view.swing.features.filepreview.ExternalResource::float zoom, org.freeplane.view.swing.features.filepreview.ExternalResource::setZoom(int, int):float]
org.freeplane.view.swing.features.filepreview.ImageAdder	[org.freeplane.view.swing.features.filepreview.ImageAdder::org.freeplane.features.map.mindmapmode.MMapController mapController, org.freeplane.view.swing.features.filepreview.ImageAdder::java.io.File mindmapFile, org.freeplane.view.swing.features.filepreview.ImageAdder::java.io.File imageFile, org.freeplane.view.swing.features.filepreview.ImageAdder::attachImageToNode(org.freeplane.features.map.NodeModel, java.awt.image.BufferedImage, java.awt.Graphics2D):void]
org.freeplane.view.swing.features.filepreview.ImageAdder	[org.freeplane.view.swing.features.filepreview.ImageAdder::java.awt.Image image, org.freeplane.view.swing.features.filepreview.ImageAdder::attachImageToNode(org.freeplane.features.map.NodeModel):void, org.freeplane.view.swing.features.filepreview.ImageAdder::attachImageToNode(org.freeplane.features.map.NodeModel, org.freeplane.view.swing.features.filepreview.ImageObserverCallback, int, int):void]
org.freeplane.view.swing.features.time.mindmapmode.TimeManagement	[org.freeplane.view.swing.features.time.mindmapmode.TimeManagement::java.util.Calendar calendar, org.freeplane.view.swing.features.time.mindmapmode.TimeManagement::createTimePanel(java.awt.Dialog, boolean, int):org.freeplane.view.swing.features.time.mindmapmode.TimeManagement.JTimePanel, org.freeplane.view.swing.features.time.mindmapmode.TimeManagement::org.freeplane.features.format.PatternFormat dateFormat, org.freeplane.view.swing.features.time.mindmapmode.TimeManagement::insertTime(java.awt.Dialog, javax.swing.JButton):void, org.freeplane.view.swing.features.time.mindmapmode.TimeManagement::getCalendarDate():org.freeplane.features.format.FormattedDate, org.freeplane.view.swing.features.time.mindmapmode.TimeManagement::createDateFormatChooser():javax.swing.JComboBox]
org.freeplane.view.swing.features.time.mindmapmode.TimeManagement	[org.freeplane.view.swing.features.time.mindmapmode.TimeManagement::org.freeplane.features.format.PatternFormat dateFormat, org.freeplane.view.swing.features.time.mindmapmode.TimeManagement::insertTime(java.awt.Dialog, javax.swing.JButton):void, org.freeplane.view.swing.features.time.mindmapmode.TimeManagement::getCalendarDate():org.freeplane.features.format.FormattedDate, org.freeplane.view.swing.features.time.mindmapmode.TimeManagement::createDateFormatChooser():javax.swing.JComboBox]
org.freeplane.core.io.ReadManager	[org.freeplane.core.io.ReadManager::java.util.Hashtable<java.lang.String,java.util.Hashtable<java.lang.String,org.freeplane.core.io.IAttributeHandler>> attributeHandlers, org.freeplane.core.io.ReadManager::addAttributeHandler(java.lang.String, java.lang.String, org.freeplane.core.io.IAttributeHandler):void, org.freeplane.core.io.ReadManager::removeAttributeHandler(java.lang.String, java.lang.String, org.freeplane.core.io.IAttributeHandler):void, org.freeplane.core.io.ReadManager::org.freeplane.core.io.ListHashTable<java.lang.String,org.freeplane.core.io.IElementHandler> elementHandlers, org.freeplane.core.io.ReadManager::removeElementHandler(java.lang.String, org.freeplane.core.io.IElementHandler):void]
org.freeplane.core.io.ReadManager	[org.freeplane.core.io.ReadManager::java.util.Hashtable<java.lang.String,java.util.Hashtable<java.lang.String,org.freeplane.core.io.IAttributeHandler>> attributeHandlers, org.freeplane.core.io.ReadManager::addAttributeHandler(java.lang.String, java.lang.String, org.freeplane.core.io.IAttributeHandler):void, org.freeplane.core.io.ReadManager::removeAttributeHandler(java.lang.String, java.lang.String, org.freeplane.core.io.IAttributeHandler):void]
org.freeplane.core.io.ReadManager	[org.freeplane.core.io.ReadManager::java.util.Collection<org.freeplane.core.io.IReadCompletionListener> readCompletionListeners, org.freeplane.core.io.ReadManager::removeReadCompletionListener(org.freeplane.core.io.IReadCompletionListener):void, org.freeplane.core.io.ReadManager::readingCompleted(org.freeplane.features.map.NodeModel, java.util.Map<java.lang.String,java.lang.String>):void]
org.freeplane.core.io.WriteManager	[org.freeplane.core.io.WriteManager::org.freeplane.core.io.ListHashTable<java.lang.String,org.freeplane.core.io.IAttributeWriter> attributeWriters, org.freeplane.core.io.WriteManager::removeAttributeWriter(java.lang.String, org.freeplane.core.io.IAttributeWriter):void, org.freeplane.core.io.WriteManager::org.freeplane.core.io.ListHashTable<java.lang.String,org.freeplane.core.io.IElementWriter> elementWriters, org.freeplane.core.io.WriteManager::removeElementWriter(java.lang.String, org.freeplane.core.io.IElementWriter):void]
org.freeplane.core.resources.OptionPanelController	[org.freeplane.core.resources.OptionPanelController::java.util.Vector<org.freeplane.core.resources.components.IPropertyControl> propertyControls, org.freeplane.core.resources.OptionPanelController::getPropertyControl(java.lang.String):org.freeplane.core.resources.components.IPropertyControl, org.freeplane.core.resources.OptionPanelController::java.util.List<org.freeplane.core.resources.OptionPanelController.PropertyLoadListener> loadListener, org.freeplane.core.resources.OptionPanelController::setCurrentPropertyControls(java.util.Vector<org.freeplane.core.resources.components.IPropertyControl>):void, org.freeplane.core.resources.OptionPanelController::getCurrentOptionProperties():java.util.Properties]
org.freeplane.core.resources.components.GrabKeyDialog	[org.freeplane.core.resources.components.GrabKeyDialog::javax.swing.JLabel assignedTo, org.freeplane.core.resources.components.GrabKeyDialog::updateAssignedTo(java.lang.String):void, org.freeplane.core.resources.components.GrabKeyDialog::javax.swing.JButton ok]
org.freeplane.core.resources.components.OptionPanel	[org.freeplane.core.resources.components.OptionPanel::org.freeplane.api.swing.JFileChooser fileChooser, org.freeplane.core.resources.components.OptionPanel::getFileChooser():org.freeplane.api.swing.JFileChooser, org.freeplane.core.resources.components.OptionPanel::createFileChooser():org.freeplane.api.swing.JFileChooser]
org.freeplane.core.resources.components.OptionPanel	[org.freeplane.core.resources.components.OptionPanel::java.util.Vector<org.freeplane.core.resources.components.IPropertyControl> controls, org.freeplane.core.resources.components.OptionPanel::initControls(javax.swing.tree.DefaultMutableTreeNode):void, org.freeplane.core.resources.components.OptionPanel::addChildControls(org.freeplane.core.resources.components.BooleanProperty, javax.swing.tree.DefaultMutableTreeNode):void]
org.freeplane.core.ui.CaseSensitiveFileNameExtensionFilter	[org.freeplane.core.ui.CaseSensitiveFileNameExtensionFilter::java.lang.String description, org.freeplane.core.ui.CaseSensitiveFileNameExtensionFilter::setDescription(java.lang.String):void, org.freeplane.core.ui.CaseSensitiveFileNameExtensionFilter::java.lang.String fullDescription]
org.freeplane.core.ui.components.MultipleImageIcon	[org.freeplane.core.ui.components.MultipleImageIcon::org.freeplane.core.ui.components.IconRow iconRow, org.freeplane.core.ui.components.MultipleImageIcon::java.util.List<org.freeplane.features.icon.NamedIcon> mUIIcons, org.freeplane.core.ui.components.MultipleImageIcon::addIcon(org.freeplane.features.icon.NamedIcon):void, org.freeplane.core.ui.components.MultipleImageIcon::addIcon(javax.swing.Icon):void, org.freeplane.core.ui.components.MultipleImageIcon::addIcon(org.freeplane.features.icon.NamedIcon, org.freeplane.api.Quantity<org.freeplane.api.LengthUnit>):void, org.freeplane.core.ui.components.MultipleImageIcon::addLinkIcon(javax.swing.Icon, org.freeplane.features.map.NodeModel, org.freeplane.features.styles.LogicalStyleController.StyleOption):void]
org.freeplane.core.ui.components.TextIcon	[org.freeplane.core.ui.components.TextIcon::java.awt.Color iconTextColor, org.freeplane.core.ui.components.TextIcon::setIconTextColor(java.awt.Color):org.freeplane.core.ui.components.TextIcon, org.freeplane.core.ui.components.TextIcon::java.awt.Color iconBackgroundColor, org.freeplane.core.ui.components.TextIcon::setIconBackgroundColor(java.awt.Color):org.freeplane.core.ui.components.TextIcon]
org.freeplane.core.ui.menubuilders.generic.EntryAccessor	[org.freeplane.core.ui.menubuilders.generic.EntryAccessor::getComponent(org.freeplane.core.ui.menubuilders.generic.Entry):java.awt.Component, org.freeplane.core.ui.menubuilders.generic.EntryAccessor::getAccelerator(org.freeplane.core.ui.menubuilders.generic.Entry):java.lang.String, org.freeplane.core.ui.menubuilders.generic.EntryAccessor::getAncestorComponent(org.freeplane.core.ui.menubuilders.generic.Entry):java.lang.Object]
org.freeplane.core.ui.menubuilders.generic.SubtreeProcessor	[org.freeplane.core.ui.menubuilders.generic.SubtreeProcessor::org.freeplane.core.ui.menubuilders.generic.PhaseProcessor processor, org.freeplane.core.ui.menubuilders.generic.SubtreeProcessor::rebuildEntry(org.freeplane.core.ui.menubuilders.generic.Entry):void, org.freeplane.core.ui.menubuilders.generic.SubtreeProcessor::forChildren(org.freeplane.core.ui.menubuilders.generic.Entry):org.freeplane.core.ui.menubuilders.generic.PhaseProcessor, org.freeplane.core.ui.menubuilders.generic.SubtreeProcessor::destroyChildren(org.freeplane.core.ui.menubuilders.generic.Entry):void]
org.freeplane.features.attribute.AttributeTableLayoutModel	[org.freeplane.features.attribute.AttributeTableLayoutModel::javax.swing.event.EventListenerList listenerList, org.freeplane.features.attribute.AttributeTableLayoutModel::getListenerList():javax.swing.event.EventListenerList, org.freeplane.features.attribute.AttributeTableLayoutModel::addColumnWidthChangeListener(org.freeplane.features.attribute.IColumnWidthChangeListener):void, org.freeplane.features.attribute.AttributeTableLayoutModel::removeColumnWidthChangeListener(org.freeplane.features.attribute.IColumnWidthChangeListener):void]
org.freeplane.features.attribute.AttributeTableLayoutModel	[org.freeplane.features.attribute.AttributeTableLayoutModel::org.freeplane.features.attribute.ColumnWidthChangeEvent[] layoutChangeEvent, org.freeplane.features.attribute.AttributeTableLayoutModel::fireColumnWidthChanged(int):void, org.freeplane.features.attribute.AttributeTableLayoutModel::org.freeplane.api.Quantity<?>[] width, org.freeplane.features.attribute.AttributeTableLayoutModel::getColumnWidth(int):org.freeplane.api.Quantity<org.freeplane.api.LengthUnit>, org.freeplane.features.attribute.AttributeTableLayoutModel::setColumnWidth(int, org.freeplane.api.Quantity<org.freeplane.api.LengthUnit>):void]
org.freeplane.features.attribute.mindmapmode.MAttributeController.SetAttributeRestrictedActor	[org.freeplane.features.attribute.mindmapmode.MAttributeController.SetAttributeRestrictedActor::int index, org.freeplane.features.attribute.mindmapmode.MAttributeController.SetAttributeRestrictedActor::org.freeplane.features.attribute.AttributeRegistry registry, org.freeplane.features.attribute.mindmapmode.MAttributeController.SetAttributeRestrictedActor::act(boolean):void]
org.freeplane.features.attribute.mindmapmode.MAttributeController.SetAttributeVisibleActor	[org.freeplane.features.attribute.mindmapmode.MAttributeController.SetAttributeVisibleActor::org.freeplane.features.attribute.AttributeRegistry attributeRegistry, org.freeplane.features.attribute.mindmapmode.MAttributeController.SetAttributeVisibleActor::int index, org.freeplane.features.attribute.mindmapmode.MAttributeController.SetAttributeVisibleActor::act(boolean):void]
org.freeplane.features.edge.EdgeController	[org.freeplane.features.edge.EdgeController::org.freeplane.features.mode.ModeController modeController, org.freeplane.features.edge.EdgeController::getStyleEdgeColorRule(org.freeplane.features.map.NodeModel, org.freeplane.features.styles.LogicalStyleController.StyleOption):org.freeplane.core.util.ObjectRule<java.awt.Color,org.freeplane.features.edge.EdgeController.Rules>, org.freeplane.features.edge.EdgeController::getNodeColorRule(org.freeplane.features.map.NodeModel):org.freeplane.core.util.ObjectRule<java.awt.Color,org.freeplane.features.edge.EdgeController.Rules>, org.freeplane.features.edge.EdgeController::getStyleWidth(org.freeplane.features.map.MapModel, java.util.Collection<org.freeplane.features.styles.IStyle>):java.lang.Integer, org.freeplane.features.edge.EdgeController::getStyleDash(org.freeplane.features.map.MapModel, java.util.Collection<org.freeplane.features.styles.IStyle>):org.freeplane.api.Dash, org.freeplane.features.edge.EdgeController::getStyleStyle(org.freeplane.features.map.MapModel, java.util.Collection<org.freeplane.features.styles.IStyle>):org.freeplane.features.edge.EdgeStyle]
org.freeplane.features.edge.EdgeController	[org.freeplane.features.edge.EdgeController::org.freeplane.features.mode.ModeController modeController, org.freeplane.features.edge.EdgeController::getStyleEdgeColorRule(org.freeplane.features.map.NodeModel, org.freeplane.features.styles.LogicalStyleController.StyleOption):org.freeplane.core.util.ObjectRule<java.awt.Color,org.freeplane.features.edge.EdgeController.Rules>, org.freeplane.features.edge.EdgeController::getNodeColorRule(org.freeplane.features.map.NodeModel):org.freeplane.core.util.ObjectRule<java.awt.Color,org.freeplane.features.edge.EdgeController.Rules>]
org.freeplane.features.edge.EdgeController	[org.freeplane.features.edge.EdgeController::org.freeplane.features.mode.ExclusivePropertyChain<org.freeplane.core.util.ObjectRule<java.awt.Color,org.freeplane.features.edge.EdgeController.Rules>,org.freeplane.features.map.NodeModel> colorHandlers, org.freeplane.features.edge.EdgeController::getColorRule(org.freeplane.features.map.NodeModel, org.freeplane.features.styles.LogicalStyleController.StyleOption):org.freeplane.core.util.ObjectRule<java.awt.Color,org.freeplane.features.edge.EdgeController.Rules>, org.freeplane.features.edge.EdgeController::getColor(org.freeplane.features.map.NodeModel, boolean, org.freeplane.features.styles.LogicalStyleController.StyleOption):java.awt.Color]
org.freeplane.features.explorer.MapExplorerController	[org.freeplane.features.explorer.MapExplorerController::isGlobal(org.freeplane.features.map.NodeModel):boolean, org.freeplane.features.explorer.MapExplorerController::getNodeReferenceSuggestion(org.freeplane.features.map.NodeModel):java.lang.String, org.freeplane.features.explorer.MapExplorerController::getAlias(org.freeplane.features.map.NodeModel):java.lang.String]
org.freeplane.features.filter.AFilterComposerDialog	[org.freeplane.features.filter.AFilterComposerDialog::org.freeplane.features.filter.FilterController filterController, org.freeplane.features.filter.AFilterComposerDialog::org.freeplane.features.filter.FilterConditions internalConditionsModel, org.freeplane.features.filter.AFilterComposerDialog::conditionRenderer():javax.swing.ListCellRenderer<org.freeplane.features.filter.condition.ASelectableCondition>]
org.freeplane.features.format.FormatController	[org.freeplane.features.format.FormatController::java.util.HashMap<java.lang.String,java.text.SimpleDateFormat> dateFormatCache, org.freeplane.features.format.FormatController::getDateFormat(java.lang.String):java.text.SimpleDateFormat, org.freeplane.features.format.FormatController::createDefaultDateTimeFormat(java.lang.String):java.text.SimpleDateFormat]
org.freeplane.features.format.FormatController	[org.freeplane.features.format.FormatController::java.lang.String pathToFile, org.freeplane.features.format.FormatController::java.util.List<org.freeplane.features.format.PatternFormat> dateFormats, org.freeplane.features.format.FormatController::java.util.List<org.freeplane.features.format.PatternFormat> numberFormats, org.freeplane.features.format.FormatController::java.util.List<org.freeplane.features.format.PatternFormat> stringFormats, org.freeplane.features.format.FormatController::initPatternFormats():void, org.freeplane.features.format.FormatController::getAllFormats():java.util.ArrayList<org.freeplane.features.format.PatternFormat>, org.freeplane.features.format.FormatController::loadFormats():void, org.freeplane.features.format.FormatController::java.util.List<org.freeplane.features.format.PatternFormat> specialFormats, org.freeplane.features.format.FormatController::createFormat(java.lang.String, java.lang.String, java.lang.String):org.freeplane.features.format.PatternFormat, org.freeplane.features.format.FormatController::java.util.Locale locale, org.freeplane.features.format.FormatController::addStandardFormats():void, org.freeplane.features.format.FormatController::createLocalPattern(java.lang.String, int, java.lang.Integer):org.freeplane.features.format.PatternFormat, org.freeplane.features.format.FormatController::boolean formatsLoaded]
org.freeplane.features.format.FormatController	[org.freeplane.features.format.FormatController::java.text.SimpleDateFormat defaultDateFormat, org.freeplane.features.format.FormatController::getDefaultDateFormat():java.text.SimpleDateFormat, org.freeplane.features.format.FormatController::fixEmptyDataFormatProperty(org.freeplane.core.resources.ResourceController, java.lang.String, java.lang.String):void, org.freeplane.features.format.FormatController::getDefaultDateTimeFormat():java.text.SimpleDateFormat, org.freeplane.features.format.FormatController::java.text.SimpleDateFormat defaultDateTimeFormat, org.freeplane.features.format.FormatController::getDefaultNumberFormat():java.text.DecimalFormat, org.freeplane.features.format.FormatController::java.text.DecimalFormat defaultNumberFormat]
org.freeplane.features.link.LinkController	[org.freeplane.features.link.LinkController::toRelativeURI(java.io.File, java.io.File, int):java.net.URI, org.freeplane.features.link.LinkController::createRelativeURI(java.io.File, java.io.File, int):java.net.URI, org.freeplane.features.link.LinkController::createRelativeURI(java.io.File, java.net.URI):java.net.URI, org.freeplane.features.link.LinkController::createRelativeURI(java.net.URI, java.net.URI):java.net.URI]
org.freeplane.features.link.LinkController	[org.freeplane.features.link.LinkController::addLinks(javax.swing.JComponent, org.freeplane.features.map.NodeModel):javax.swing.JButton, org.freeplane.features.link.LinkController::addPopupComponent(javax.swing.JComponent, java.lang.String, javax.swing.JComponent):void, org.freeplane.features.link.LinkController::addAction(javax.swing.JComponent, javax.swing.Action):javax.swing.JButton, org.freeplane.features.link.LinkController::addClosingAction(javax.swing.JComponent, javax.swing.Action):void]
org.freeplane.features.link.LinkController	[org.freeplane.features.link.LinkController::loadHyperlink(org.freeplane.core.util.Hyperlink):void, org.freeplane.features.link.LinkController::loadURI(org.freeplane.features.map.NodeModel, org.freeplane.core.util.Hyperlink):void, org.freeplane.features.link.LinkController::getLinkType(org.freeplane.core.util.Hyperlink, org.freeplane.features.map.NodeModel):org.freeplane.features.link.LinkController.LinkType]
org.freeplane.features.link.LinkController	[org.freeplane.features.link.LinkController::getLinkType():int, org.freeplane.features.link.LinkController::linkType():int, org.freeplane.features.link.LinkController::getStandardConnectorWidth():int, org.freeplane.features.link.LinkController::getStandardConnectorColor():java.awt.Color, org.freeplane.features.link.LinkController::getStandardConnectorArrows():org.freeplane.features.link.ConnectorArrows, org.freeplane.features.link.LinkController::getStandardDash():org.freeplane.api.Dash, org.freeplane.features.link.LinkController::getStandardDashArray():int[], org.freeplane.features.link.LinkController::getStandardConnectorShape():org.freeplane.features.link.ConnectorShape, org.freeplane.features.link.LinkController::getStandardConnectorOpacity():int, org.freeplane.features.link.LinkController::getStandardLabelFontFamily():java.lang.String]
org.freeplane.features.map.MapReader	[org.freeplane.features.map.MapReader::org.freeplane.features.map.MapReader.NodeTreeCreator nodeTreeCreator, org.freeplane.features.map.MapReader::createNodeTreeFromXml(org.freeplane.features.map.MapModel, java.io.Reader, org.freeplane.features.map.MapWriter.Mode):org.freeplane.features.map.NodeModel, org.freeplane.features.map.MapReader::createNodeTreeFromXml(org.freeplane.features.map.MapModel, java.io.Reader, java.util.Map<java.lang.Object,java.lang.Object>):org.freeplane.features.map.NodeModel, org.freeplane.features.map.MapReader::isMapLoadingInProcess():boolean]
org.freeplane.features.map.clipboard.MindMapNodesSelection	[org.freeplane.features.map.clipboard.MindMapNodesSelection::java.util.Collection<org.freeplane.features.map.NodeModel> nodes, org.freeplane.features.map.clipboard.MindMapNodesSelection::boolean selectionContainsSingleNodes, org.freeplane.features.map.clipboard.MindMapNodesSelection::containsObjectsFor(java.awt.datatransfer.DataFlavor):boolean, org.freeplane.features.map.clipboard.MindMapNodesSelection::setNodeObjects(java.util.Collection<org.freeplane.features.map.NodeModel>, boolean):void]
org.freeplane.features.mode.ModeController	[org.freeplane.features.mode.ModeController::canEdit(org.freeplane.features.map.MapModel):boolean, org.freeplane.features.mode.ModeController::canEdit():boolean, org.freeplane.features.mode.ModeController::isEditingLocked():boolean]
org.freeplane.features.mode.ModeController	[org.freeplane.features.mode.ModeController::java.util.Collection<org.freeplane.features.map.IExtensionCopier> copiers, org.freeplane.features.mode.ModeController::unregisterExtensionCopier(org.freeplane.features.map.IExtensionCopier):void, org.freeplane.features.mode.ModeController::copyExtensions(java.lang.Object, org.freeplane.features.map.NodeModel, org.freeplane.features.map.NodeModel):void]
org.freeplane.features.mode.ModeController	[org.freeplane.features.mode.ModeController::java.util.List<org.freeplane.features.ui.INodeViewLifeCycleListener> nodeViewListeners, org.freeplane.features.mode.ModeController::removeINodeViewLifeCycleListener(org.freeplane.features.ui.INodeViewLifeCycleListener):void, org.freeplane.features.mode.ModeController::onViewCreated(java.awt.Container):void, org.freeplane.features.mode.ModeController::onViewRemoved(java.awt.Container):void]
org.freeplane.features.mode.ModeController	[org.freeplane.features.mode.ModeController::java.util.Collection<org.freeplane.features.map.IExtensionCopier> copiers, org.freeplane.features.mode.ModeController::unregisterExtensionCopier(org.freeplane.features.map.IExtensionCopier):void, org.freeplane.features.mode.ModeController::copyExtensions(java.lang.Object, org.freeplane.features.map.NodeModel, org.freeplane.features.map.NodeModel):void, org.freeplane.features.mode.ModeController::removeExtensions(java.lang.Object, org.freeplane.features.map.NodeModel, org.freeplane.features.map.NodeModel):void, org.freeplane.features.mode.ModeController::removeExtensions(java.lang.Object, org.freeplane.features.map.NodeModel):void, org.freeplane.features.mode.ModeController::resolveParentExtensions(java.lang.Object, org.freeplane.features.map.NodeModel):void]
org.freeplane.features.mode.ModeController	[org.freeplane.features.mode.ModeController::java.util.Collection<org.freeplane.features.map.IExtensionCopier> copiers, org.freeplane.features.mode.ModeController::unregisterExtensionCopier(org.freeplane.features.map.IExtensionCopier):void, org.freeplane.features.mode.ModeController::copyExtensions(java.lang.Object, org.freeplane.features.map.NodeModel, org.freeplane.features.map.NodeModel):void, org.freeplane.features.mode.ModeController::removeExtensions(java.lang.Object, org.freeplane.features.map.NodeModel, org.freeplane.features.map.NodeModel):void, org.freeplane.features.mode.ModeController::removeExtensions(java.lang.Object, org.freeplane.features.map.NodeModel):void, org.freeplane.features.mode.ModeController::resolveParentExtensions(java.lang.Object, org.freeplane.features.map.NodeModel):void, org.freeplane.features.mode.ModeController::undoableCopyExtensions(java.lang.Object, org.freeplane.features.map.NodeModel, org.freeplane.features.map.NodeModel):void, org.freeplane.features.mode.ModeController::undoableRemoveExtensions(java.lang.Object, org.freeplane.features.map.NodeModel, org.freeplane.features.map.NodeModel):void, org.freeplane.features.mode.ModeController::undoableResolveParentExtensions(java.lang.Object, org.freeplane.features.map.NodeModel):void]
org.freeplane.features.nodestyle.NodeStyleController	[org.freeplane.features.nodestyle.NodeStyleController::org.freeplane.features.mode.CombinedPropertyChain<java.awt.Font,org.freeplane.features.map.NodeModel> fontHandlers, org.freeplane.features.nodestyle.NodeStyleController::getFont(org.freeplane.features.map.NodeModel, org.freeplane.features.styles.LogicalStyleController.StyleOption):java.awt.Font, org.freeplane.features.nodestyle.NodeStyleController::getFontFamilyName(org.freeplane.features.map.NodeModel, org.freeplane.features.styles.LogicalStyleController.StyleOption):java.lang.String, org.freeplane.features.nodestyle.NodeStyleController::getFontSize(org.freeplane.features.map.NodeModel, org.freeplane.features.styles.LogicalStyleController.StyleOption):int, org.freeplane.features.nodestyle.NodeStyleController::isBold(org.freeplane.features.map.NodeModel, org.freeplane.features.styles.LogicalStyleController.StyleOption):boolean, org.freeplane.features.nodestyle.NodeStyleController::isItalic(org.freeplane.features.map.NodeModel, org.freeplane.features.styles.LogicalStyleController.StyleOption):boolean, org.freeplane.features.nodestyle.NodeStyleController::isStrikedThrough(org.freeplane.features.map.NodeModel, org.freeplane.features.styles.LogicalStyleController.StyleOption):boolean]
org.freeplane.features.print.Preview	[org.freeplane.features.print.Preview::int index, org.freeplane.features.print.Preview::moveIndex(int):void, org.freeplane.features.print.Preview::java.awt.image.BufferedImage previewPageImage]
org.freeplane.features.styles.LogicalStyleController	[org.freeplane.features.styles.LogicalStyleController::java.lang.ref.WeakReference<org.freeplane.features.map.NodeModel> cachedNode, org.freeplane.features.styles.LogicalStyleController::java.util.Collection<org.freeplane.features.styles.IStyle> cachedStyles, org.freeplane.features.styles.LogicalStyleController::clearCache():void]
org.freeplane.features.styles.LogicalStyleController	[org.freeplane.features.styles.LogicalStyleController::java.util.List<org.freeplane.features.styles.IStyle> cachedStylesForSelectedNode, org.freeplane.features.styles.LogicalStyleController::org.freeplane.features.mode.CombinedPropertyChain<java.util.Collection<org.freeplane.features.styles.IStyle>,org.freeplane.features.map.NodeModel> styleHandlers, org.freeplane.features.styles.LogicalStyleController::getFirstStyle(org.freeplane.features.map.NodeModel):org.freeplane.features.styles.IStyle, org.freeplane.features.styles.LogicalStyleController::getStyles(org.freeplane.features.map.NodeModel, org.freeplane.features.styles.LogicalStyleController.StyleOption):java.util.Collection<org.freeplane.features.styles.IStyle>]
org.freeplane.features.styles.MapStyleModel	[org.freeplane.features.styles.MapStyleModel::java.util.Map<java.lang.String,java.lang.String> properties, org.freeplane.features.styles.MapStyleModel::setNonStyleUserPropertiesFrom(org.freeplane.features.styles.MapStyleModel):void, org.freeplane.features.styles.MapStyleModel::setProperty(java.lang.String, java.lang.String):void, org.freeplane.features.styles.MapStyleModel::getProperty(java.lang.String):java.lang.String, org.freeplane.features.styles.MapStyleModel::getEnumProperty(java.lang.String, T):T, org.freeplane.features.styles.MapStyleModel::getBooleanProperty(java.lang.String):boolean]
org.freeplane.features.styles.MapStyleModel	[org.freeplane.features.styles.MapStyleModel::java.util.Map<org.freeplane.features.styles.IStyle,org.freeplane.features.map.NodeModel> styleNodes, org.freeplane.features.styles.MapStyleModel::org.freeplane.features.map.NodeModel defaultStyleNode, org.freeplane.features.styles.MapStyleModel::javax.swing.DefaultComboBoxModel stylesComboBoxModel, org.freeplane.features.styles.MapStyleModel::getStyleNode(org.freeplane.features.styles.IStyle):org.freeplane.features.map.NodeModel, org.freeplane.features.styles.MapStyleModel::getStyles():java.util.Set<org.freeplane.features.styles.IStyle>, org.freeplane.features.styles.MapStyleModel::insertStyleMap(org.freeplane.features.map.MapModel, org.freeplane.features.map.MapModel):void, org.freeplane.features.styles.MapStyleModel::refreshStyles():void, org.freeplane.features.styles.MapStyleModel::addStyleNode(org.freeplane.features.map.NodeModel):void, org.freeplane.features.styles.MapStyleModel::removeStyleNode(org.freeplane.features.map.NodeModel):void, org.freeplane.features.styles.MapStyleModel::setStylesFrom(org.freeplane.features.styles.MapStyleModel):void, org.freeplane.features.styles.MapStyleModel::initStylesComboBoxModel():void, org.freeplane.features.styles.MapStyleModel::getNodeStyles():java.util.List<org.freeplane.features.styles.IStyle>, org.freeplane.features.styles.MapStyleModel::addUserStylesFrom(org.freeplane.features.styles.MapStyleModel):void, org.freeplane.features.styles.MapStyleModel::getStyleNodeGroup(org.freeplane.features.map.MapModel, java.lang.String):org.freeplane.features.map.NodeModel, org.freeplane.features.styles.MapStyleModel::copyStyle(org.freeplane.features.map.NodeModel, org.freeplane.features.styles.IStyle):void, org.freeplane.features.styles.MapStyleModel::java.awt.Color backgroundColor, org.freeplane.features.styles.MapStyleModel::setStylesFrom(org.freeplane.features.styles.MapStyleModel, boolean):void, org.freeplane.features.styles.MapStyleModel::setBackgroundFrom(org.freeplane.features.styles.MapStyleModel):void, org.freeplane.features.styles.MapStyleModel::createStyleGroupNode(org.freeplane.features.map.MapModel, java.lang.String):org.freeplane.features.map.NodeModel, org.freeplane.features.styles.MapStyleModel::getStyleNodeSafe(org.freeplane.features.styles.IStyle):org.freeplane.features.map.NodeModel, org.freeplane.features.styles.MapStyleModel::org.freeplane.features.map.MapModel styleMap, org.freeplane.features.styles.MapStyleModel::org.freeplane.features.styles.ConditionalStyleModel conditionalStyleModel, org.freeplane.features.styles.MapStyleModel::setConditionalStylesIfEmpty(org.freeplane.features.styles.MapStyleModel):void, org.freeplane.features.styles.MapStyleModel::isDefaultStyleNode(org.freeplane.features.map.NodeModel):boolean, org.freeplane.features.styles.MapStyleModel::isUserStyleNode(org.freeplane.features.map.NodeModel):boolean, org.freeplane.features.styles.MapStyleModel::isPredefinedStyleNode(org.freeplane.features.map.NodeModel):boolean, org.freeplane.features.styles.MapStyleModel::isStyleNode(org.freeplane.features.map.NodeModel):boolean, org.freeplane.features.styles.MapStyleModel::getStyleNodeGroup(org.freeplane.features.map.NodeModel):org.freeplane.features.map.NodeModel]
org.freeplane.features.styles.MapStyleModel	[org.freeplane.features.styles.MapStyleModel::java.util.Map<org.freeplane.features.styles.IStyle,org.freeplane.features.map.NodeModel> styleNodes, org.freeplane.features.styles.MapStyleModel::org.freeplane.features.map.NodeModel defaultStyleNode, org.freeplane.features.styles.MapStyleModel::javax.swing.DefaultComboBoxModel stylesComboBoxModel, org.freeplane.features.styles.MapStyleModel::getStyleNode(org.freeplane.features.styles.IStyle):org.freeplane.features.map.NodeModel, org.freeplane.features.styles.MapStyleModel::getStyles():java.util.Set<org.freeplane.features.styles.IStyle>, org.freeplane.features.styles.MapStyleModel::insertStyleMap(org.freeplane.features.map.MapModel, org.freeplane.features.map.MapModel):void, org.freeplane.features.styles.MapStyleModel::refreshStyles():void, org.freeplane.features.styles.MapStyleModel::addStyleNode(org.freeplane.features.map.NodeModel):void, org.freeplane.features.styles.MapStyleModel::removeStyleNode(org.freeplane.features.map.NodeModel):void, org.freeplane.features.styles.MapStyleModel::setStylesFrom(org.freeplane.features.styles.MapStyleModel):void, org.freeplane.features.styles.MapStyleModel::initStylesComboBoxModel():void, org.freeplane.features.styles.MapStyleModel::getNodeStyles():java.util.List<org.freeplane.features.styles.IStyle>, org.freeplane.features.styles.MapStyleModel::addUserStylesFrom(org.freeplane.features.styles.MapStyleModel):void, org.freeplane.features.styles.MapStyleModel::getStyleNodeGroup(org.freeplane.features.map.MapModel, java.lang.String):org.freeplane.features.map.NodeModel, org.freeplane.features.styles.MapStyleModel::copyStyle(org.freeplane.features.map.NodeModel, org.freeplane.features.styles.IStyle):void, org.freeplane.features.styles.MapStyleModel::java.awt.Color backgroundColor, org.freeplane.features.styles.MapStyleModel::setStylesFrom(org.freeplane.features.styles.MapStyleModel, boolean):void, org.freeplane.features.styles.MapStyleModel::setBackgroundFrom(org.freeplane.features.styles.MapStyleModel):void, org.freeplane.features.styles.MapStyleModel::createStyleGroupNode(org.freeplane.features.map.MapModel, java.lang.String):org.freeplane.features.map.NodeModel, org.freeplane.features.styles.MapStyleModel::getStyleNodeSafe(org.freeplane.features.styles.IStyle):org.freeplane.features.map.NodeModel, org.freeplane.features.styles.MapStyleModel::org.freeplane.features.map.MapModel styleMap, org.freeplane.features.styles.MapStyleModel::org.freeplane.features.styles.ConditionalStyleModel conditionalStyleModel, org.freeplane.features.styles.MapStyleModel::setConditionalStylesIfEmpty(org.freeplane.features.styles.MapStyleModel):void]
org.freeplane.features.styles.MapStyleModel	[org.freeplane.features.styles.MapStyleModel::java.util.Map<org.freeplane.features.styles.IStyle,org.freeplane.features.map.NodeModel> styleNodes, org.freeplane.features.styles.MapStyleModel::org.freeplane.features.map.NodeModel defaultStyleNode, org.freeplane.features.styles.MapStyleModel::javax.swing.DefaultComboBoxModel stylesComboBoxModel, org.freeplane.features.styles.MapStyleModel::getStyleNode(org.freeplane.features.styles.IStyle):org.freeplane.features.map.NodeModel, org.freeplane.features.styles.MapStyleModel::getStyles():java.util.Set<org.freeplane.features.styles.IStyle>, org.freeplane.features.styles.MapStyleModel::insertStyleMap(org.freeplane.features.map.MapModel, org.freeplane.features.map.MapModel):void, org.freeplane.features.styles.MapStyleModel::refreshStyles():void, org.freeplane.features.styles.MapStyleModel::addStyleNode(org.freeplane.features.map.NodeModel):void, org.freeplane.features.styles.MapStyleModel::removeStyleNode(org.freeplane.features.map.NodeModel):void, org.freeplane.features.styles.MapStyleModel::setStylesFrom(org.freeplane.features.styles.MapStyleModel):void, org.freeplane.features.styles.MapStyleModel::initStylesComboBoxModel():void, org.freeplane.features.styles.MapStyleModel::getNodeStyles():java.util.List<org.freeplane.features.styles.IStyle>, org.freeplane.features.styles.MapStyleModel::addUserStylesFrom(org.freeplane.features.styles.MapStyleModel):void, org.freeplane.features.styles.MapStyleModel::getStyleNodeGroup(org.freeplane.features.map.MapModel, java.lang.String):org.freeplane.features.map.NodeModel, org.freeplane.features.styles.MapStyleModel::copyStyle(org.freeplane.features.map.NodeModel, org.freeplane.features.styles.IStyle):void, org.freeplane.features.styles.MapStyleModel::java.awt.Color backgroundColor, org.freeplane.features.styles.MapStyleModel::setStylesFrom(org.freeplane.features.styles.MapStyleModel, boolean):void, org.freeplane.features.styles.MapStyleModel::setBackgroundFrom(org.freeplane.features.styles.MapStyleModel):void, org.freeplane.features.styles.MapStyleModel::createStyleGroupNode(org.freeplane.features.map.MapModel, java.lang.String):org.freeplane.features.map.NodeModel, org.freeplane.features.styles.MapStyleModel::getStyleNodeSafe(org.freeplane.features.styles.IStyle):org.freeplane.features.map.NodeModel, org.freeplane.features.styles.MapStyleModel::org.freeplane.features.map.MapModel styleMap]
org.freeplane.features.url.mindmapmode.MFileManager	[org.freeplane.features.url.mindmapmode.MFileManager::findFileRevisions(java.io.File, java.io.File, org.freeplane.features.url.mindmapmode.MFileManager.AlternativeFileMode):java.io.File[], org.freeplane.features.url.mindmapmode.MFileManager::backupFile(java.io.File, java.io.File, int, org.freeplane.features.url.mindmapmode.MFileManager.AlternativeFileMode):java.io.File, org.freeplane.features.url.mindmapmode.MFileManager::getAlternativeFile(java.io.File, org.freeplane.features.url.mindmapmode.MFileManager.AlternativeFileMode):java.io.File, org.freeplane.features.url.mindmapmode.MFileManager::getAlternativeURL(java.net.URL, org.freeplane.features.url.mindmapmode.MFileManager.AlternativeFileMode):java.net.URL]
org.freeplane.main.application.MapViewDockingWindows	[org.freeplane.main.application.MapViewDockingWindows::getCustomTitle(net.infonode.docking.DockingWindow):java.lang.String, org.freeplane.main.application.MapViewDockingWindows::isAnyChildWindowDirty(net.infonode.docking.DockingWindow):boolean, org.freeplane.main.application.MapViewDockingWindows::getChildWindowsCount(net.infonode.docking.DockingWindow):int]
org.freeplane.main.application.MapViewDockingWindows	[org.freeplane.main.application.MapViewDockingWindows::org.freeplane.main.application.MapViewSerializer viewSerializer, org.freeplane.main.application.MapViewDockingWindows::addDockedWindow(java.awt.Component, java.awt.Component):void, org.freeplane.main.application.MapViewDockingWindows::updateTitle(java.awt.Component):void, org.freeplane.main.application.MapViewDockingWindows::updateTabTooltip(java.awt.Component):void, org.freeplane.main.application.MapViewDockingWindows::createTitle(java.awt.Component):java.lang.String]
org.freeplane.main.application.MapViewDockingWindows	[org.freeplane.main.application.MapViewDockingWindows::setTabAreaPolicy(net.infonode.docking.TabWindow, net.infonode.tabbedpanel.TabAreaVisiblePolicy):void, org.freeplane.main.application.MapViewDockingWindows::setTabAreaVisiblePolicies(net.infonode.docking.DockingWindow):void, org.freeplane.main.application.MapViewDockingWindows::setTabAreaInvisiblePolicies(net.infonode.docking.DockingWindow):void]
org.freeplane.main.application.MapViewDockingWindows	[org.freeplane.main.application.MapViewDockingWindows::net.infonode.docking.theme.DockingWindowsTheme theme, org.freeplane.main.application.MapViewDockingWindows::configureDefaultDockingWindowProperties():void, org.freeplane.main.application.MapViewDockingWindows::createClassicTheme():net.infonode.docking.theme.ClassicDockingTheme]
org.freeplane.main.application.MapViewDockingWindows	[org.freeplane.main.application.MapViewDockingWindows::removeDesktopPaneAccelerators():void, org.freeplane.main.application.MapViewDockingWindows::getLastFocusedChildWindow(net.infonode.docking.DockingWindow):net.infonode.docking.DockingWindow, org.freeplane.main.application.MapViewDockingWindows::addDockedView(net.infonode.docking.View, net.infonode.docking.View):void, org.freeplane.main.application.MapViewDockingWindows::saveLayout():void, org.freeplane.main.application.MapViewDockingWindows::setTabAreaVisiblePolicy(javax.swing.JFrame):void, org.freeplane.main.application.MapViewDockingWindows::setTabAreaPolicy(net.infonode.docking.TabWindow, net.infonode.tabbedpanel.TabAreaVisiblePolicy):void, org.freeplane.main.application.MapViewDockingWindows::setTabAreaVisiblePolicies(net.infonode.docking.DockingWindow):void, org.freeplane.main.application.MapViewDockingWindows::setTabAreaInvisiblePolicies(net.infonode.docking.DockingWindow):void, org.freeplane.main.application.MapViewDockingWindows::setTabAreaInvisiblePolicy(javax.swing.JFrame):void]
org.freeplane.main.application.survey.FreeplaneSurveyProperties	[org.freeplane.main.application.survey.FreeplaneSurveyProperties::long nextCheckDay, org.freeplane.main.application.survey.FreeplaneSurveyProperties::mayAskUserAgain():boolean, org.freeplane.main.application.survey.FreeplaneSurveyProperties::dayNow():long]
org.freeplane.main.application.survey.FreeplaneSurveyProperties	[org.freeplane.main.application.survey.FreeplaneSurveyProperties::org.freeplane.core.resources.ResourceController resourceController, org.freeplane.main.application.survey.FreeplaneSurveyProperties::mayAskUserToFillSurveys():boolean, org.freeplane.main.application.survey.FreeplaneSurveyProperties::isLanguageSupported():boolean, org.freeplane.main.application.survey.FreeplaneSurveyProperties::getSurveyUrl():java.net.URL, org.freeplane.main.application.survey.FreeplaneSurveyProperties::mayAskUserToFillSurvey(java.lang.String):boolean, org.freeplane.main.application.survey.FreeplaneSurveyProperties::hasUserAlreadyFilled(java.lang.String):boolean, org.freeplane.main.application.survey.FreeplaneSurveyProperties::filledSurveyPropertyOf(java.lang.String):java.lang.String, org.freeplane.main.application.survey.FreeplaneSurveyProperties::openRemoteConfiguration():java.io.InputStream]
org.freeplane.view.swing.features.filepreview.BitmapViewerComponent	[org.freeplane.view.swing.features.filepreview.BitmapViewerComponent::java.awt.Dimension maximumSize, org.freeplane.view.swing.features.filepreview.BitmapViewerComponent::fitToMaximumSize(java.awt.Dimension):java.awt.Dimension, org.freeplane.view.swing.features.filepreview.BitmapViewerComponent::isUnderMaximumSize(java.awt.Dimension):boolean]
org.freeplane.view.swing.features.filepreview.BitmapViewerComponent	[org.freeplane.view.swing.features.filepreview.BitmapViewerComponent::java.util.concurrent.atomic.AtomicReference<java.awt.image.BufferedImage> cachedImage, org.freeplane.view.swing.features.filepreview.BitmapViewerComponent::getCachedImage():java.awt.image.BufferedImage, org.freeplane.view.swing.features.filepreview.BitmapViewerComponent::setCachedImage(java.awt.image.BufferedImage):void]
org.freeplane.view.swing.features.filepreview.BitmapViewerComponent	[org.freeplane.view.swing.features.filepreview.BitmapViewerComponent::isCachedImageValid(int, int):boolean, org.freeplane.view.swing.features.filepreview.BitmapViewerComponent::componentHasSameHeightAsCachedImage(int):boolean, org.freeplane.view.swing.features.filepreview.BitmapViewerComponent::cachedImageWidthFitsComponentWidth(int):boolean, org.freeplane.view.swing.features.filepreview.BitmapViewerComponent::cachedImageHeightFitsComponentHeight(int):boolean, org.freeplane.view.swing.features.filepreview.BitmapViewerComponent::componentHasSameWidthAsCachedImage(int):boolean]
org.freeplane.view.swing.features.filepreview.BitmapViewerComponent	[org.freeplane.view.swing.features.filepreview.BitmapViewerComponent::java.util.concurrent.atomic.AtomicReference<java.awt.image.BufferedImage> cachedImage, org.freeplane.view.swing.features.filepreview.BitmapViewerComponent::getCachedImage():java.awt.image.BufferedImage, org.freeplane.view.swing.features.filepreview.BitmapViewerComponent::setCachedImage(java.awt.image.BufferedImage):void, org.freeplane.view.swing.features.filepreview.BitmapViewerComponent::java.lang.ref.WeakReference<java.awt.image.BufferedImage> cachedImageWeakRef, org.freeplane.view.swing.features.filepreview.BitmapViewerComponent::flushImage():void, org.freeplane.view.swing.features.filepreview.BitmapViewerComponent::loadImageFromCacheFile():java.awt.image.BufferedImage]
org.freeplane.view.swing.map.NodeViewLayoutHelper	[org.freeplane.view.swing.map.NodeViewLayoutHelper::hasChildViews(org.freeplane.view.swing.map.NodeView):boolean, org.freeplane.view.swing.map.NodeViewLayoutHelper::isAligned(org.freeplane.view.swing.map.NodeView):boolean, org.freeplane.view.swing.map.NodeViewLayoutHelper::isConsideredForAlignment(org.freeplane.view.swing.map.NodeView):boolean]
org.freeplane.view.swing.map.NodeViewLayoutHelper	[org.freeplane.view.swing.map.NodeViewLayoutHelper::int minimumContentWidth, org.freeplane.view.swing.map.NodeViewLayoutHelper::setMinimumContentWidth(int):void, org.freeplane.view.swing.map.NodeViewLayoutHelper::resetMinimumChildContentWidth():void, org.freeplane.view.swing.map.NodeViewLayoutHelper::getComponent(int):org.freeplane.view.swing.map.NodeViewLayoutHelper, org.freeplane.view.swing.map.NodeViewLayoutHelper::getParentView():org.freeplane.view.swing.map.NodeViewLayoutHelper, org.freeplane.view.swing.map.NodeViewLayoutHelper::calculateContentSize():java.awt.Dimension, org.freeplane.view.swing.map.NodeViewLayoutHelper::getContentX():int, org.freeplane.view.swing.map.NodeViewLayoutHelper::getContentY():int, org.freeplane.view.swing.map.NodeViewLayoutHelper::getContentWidth():int, org.freeplane.view.swing.map.NodeViewLayoutHelper::getContentHeight():int, org.freeplane.view.swing.map.NodeViewLayoutHelper::setContentBounds(int, int, int, int):void, org.freeplane.view.swing.map.NodeViewLayoutHelper::setSize(int, int):void, org.freeplane.view.swing.map.NodeViewLayoutHelper::setContentVisible(boolean):void, org.freeplane.view.swing.map.NodeViewLayoutHelper::setLocation(int, int):void, org.freeplane.view.swing.map.NodeViewLayoutHelper::usesHorizontallayout(java.awt.Component):boolean, org.freeplane.view.swing.map.NodeViewLayoutHelper::isRight():boolean]
org.freeplane.view.swing.map.ZoomableLabel	[org.freeplane.view.swing.map.ZoomableLabel::int minimumWidth, org.freeplane.view.swing.map.ZoomableLabel::int maximumWidth, org.freeplane.view.swing.map.ZoomableLabel::limitWidth(int, int):int, org.freeplane.view.swing.map.ZoomableLabel::limitWidth(double, int):double]
org.freeplane.view.swing.map.link.ConnectorView	[org.freeplane.view.swing.map.link.ConnectorView::java.awt.Shape arrowLinkCurve, org.freeplane.view.swing.map.link.ConnectorView::getCenterPoint():java.awt.Point, org.freeplane.view.swing.map.link.ConnectorView::getHalfLength():double]
org.freeplane.view.swing.map.link.ConnectorView	[org.freeplane.view.swing.map.link.ConnectorView::java.awt.Color bgColor, org.freeplane.view.swing.map.link.ConnectorView::drawEndPointText(java.awt.Graphics2D, java.lang.String, java.awt.Point, java.awt.Point):java.awt.Rectangle, org.freeplane.view.swing.map.link.ConnectorView::drawMiddleLabel(java.awt.Graphics2D, java.lang.String, java.awt.Point):java.awt.Rectangle]
org.freeplane.view.swing.map.mindmapmode.CharacterColorAction	[org.freeplane.view.swing.map.mindmapmode.CharacterColorAction::java.awt.Color darkColor, org.freeplane.view.swing.map.mindmapmode.CharacterColorAction::getColorCloserTo(java.awt.Color):java.awt.Color, org.freeplane.view.swing.map.mindmapmode.CharacterColorAction::java.awt.Color lightColor]
org.freeplane.view.swing.ui.NodeSelector	[org.freeplane.view.swing.ui.NodeSelector::isInside(java.awt.event.MouseEvent):boolean, org.freeplane.view.swing.ui.NodeSelector::shouldSelectOnClick(java.awt.event.MouseEvent):boolean, org.freeplane.view.swing.ui.NodeSelector::extendSelection(java.awt.event.MouseEvent, boolean):void, org.freeplane.view.swing.ui.NodeSelector::selectSingleNode(java.awt.event.MouseEvent):void, org.freeplane.view.swing.ui.NodeSelector::getRelatedNodeView(java.awt.event.MouseEvent):org.freeplane.view.swing.map.NodeView]
org.freeplane.view.swing.ui.NodeSelector	[org.freeplane.view.swing.ui.NodeSelector::java.awt.Rectangle controlRegionForDelayedSelection, org.freeplane.view.swing.ui.NodeSelector::javax.swing.Timer timerForDelayedSelection, org.freeplane.view.swing.ui.NodeSelector::org.freeplane.view.swing.ui.NodeSelector.TimeDelayedSelection delayedSelection, org.freeplane.view.swing.ui.NodeSelector::stopTimerForDelayedSelection():void, org.freeplane.view.swing.ui.NodeSelector::createTimer(java.awt.event.MouseEvent, boolean):void]
org.freeplane.view.swing.ui.mindmapmode.GlassPaneNodeSelector	[org.freeplane.view.swing.ui.mindmapmode.GlassPaneNodeSelector::redispatchMouseEvent(java.awt.event.MouseEvent, java.awt.Component):void, org.freeplane.view.swing.ui.mindmapmode.GlassPaneNodeSelector::convertToComponentEvent(java.awt.event.MouseEvent, java.awt.Component):java.awt.event.MouseEvent, org.freeplane.view.swing.ui.mindmapmode.GlassPaneNodeSelector::getPointAtComponent(java.awt.event.MouseEvent, java.awt.Component):java.awt.Point]
org.freeplane.core.resources.components.PropertyAdapter	[org.freeplane.core.resources.components.PropertyAdapter::javax.swing.JLabel labelComponent, org.freeplane.core.resources.components.PropertyAdapter::setEnabled(boolean):void, org.freeplane.core.resources.components.PropertyAdapter::isEnabled():boolean]
org.freeplane.core.ui.components.IconListComponent	[org.freeplane.core.ui.components.IconListComponent::java.util.List<javax.swing.Icon> icons, org.freeplane.core.ui.components.IconListComponent::getIcons():java.util.List<javax.swing.Icon>, org.freeplane.core.ui.components.IconListComponent::getIconCount():int]
org.freeplane.core.ui.components.IconListComponent	[org.freeplane.core.ui.components.IconListComponent::javax.swing.Icon removedIcon, org.freeplane.core.ui.components.IconListComponent::highlightRemovedIcon(javax.swing.Icon):void, org.freeplane.core.ui.components.IconListComponent::paintIcon(java.awt.Graphics, javax.swing.Icon, int, int):void, org.freeplane.core.ui.components.IconListComponent::java.awt.Color removalColor, org.freeplane.core.ui.components.IconListComponent::setRemovalColor(java.awt.Color):void, org.freeplane.core.ui.components.IconListComponent::renderIcons(java.awt.Graphics, java.util.List<org.freeplane.core.ui.components.IconListComponent.IconLayout>):void]
org.freeplane.core.ui.components.OptionalDontShowMeAgainDialog	[org.freeplane.core.ui.components.OptionalDontShowMeAgainDialog::java.lang.String propertyName, org.freeplane.core.ui.components.OptionalDontShowMeAgainDialog::getProperty():java.lang.String, org.freeplane.core.ui.components.OptionalDontShowMeAgainDialog::setProperty(java.lang.String):void]
org.freeplane.core.ui.components.OptionalDontShowMeAgainDialog	[org.freeplane.core.ui.components.OptionalDontShowMeAgainDialog::javax.swing.JDialog dialog, org.freeplane.core.ui.components.OptionalDontShowMeAgainDialog::javax.swing.JCheckBox mDontShowAgainBox, org.freeplane.core.ui.components.OptionalDontShowMeAgainDialog::org.freeplane.core.ui.components.OptionalDontShowMeAgainDialog.MessageType messageType, org.freeplane.core.ui.components.OptionalDontShowMeAgainDialog::int mResult, org.freeplane.core.ui.components.OptionalDontShowMeAgainDialog::showWithExplanation(java.lang.String, java.lang.String, java.lang.String, org.freeplane.core.ui.components.OptionalDontShowMeAgainDialog.MessageType):int, org.freeplane.core.ui.components.OptionalDontShowMeAgainDialog::show(java.lang.String, java.lang.String, java.lang.String, org.freeplane.core.ui.components.OptionalDontShowMeAgainDialog.MessageType):int, org.freeplane.core.ui.components.OptionalDontShowMeAgainDialog::close(int):void, org.freeplane.core.ui.components.OptionalDontShowMeAgainDialog::show():org.freeplane.core.ui.components.OptionalDontShowMeAgainDialog, org.freeplane.core.ui.components.OptionalDontShowMeAgainDialog::java.lang.String messageId, org.freeplane.core.ui.components.OptionalDontShowMeAgainDialog::java.lang.String explanationId, org.freeplane.core.ui.components.OptionalDontShowMeAgainDialog::org.freeplane.features.map.NodeModel node, org.freeplane.core.ui.components.OptionalDontShowMeAgainDialog::java.awt.Frame parentComponent, org.freeplane.core.ui.components.OptionalDontShowMeAgainDialog::java.lang.String titleId]
org.freeplane.core.ui.menubuilders.generic.Entry	[org.freeplane.core.ui.menubuilders.generic.Entry::java.util.Map<java.lang.Object,java.lang.Object> attributes, org.freeplane.core.ui.menubuilders.generic.Entry::setAttributeObject(java.lang.Object, java.lang.Object):void, org.freeplane.core.ui.menubuilders.generic.Entry::getAttribute(java.lang.String):java.lang.Object, org.freeplane.core.ui.menubuilders.generic.Entry::getAttribute(java.lang.Class<T>):T, org.freeplane.core.ui.menubuilders.generic.Entry::removeAttribute(java.lang.String):java.lang.Object, org.freeplane.core.ui.menubuilders.generic.Entry::removeAttribute(java.lang.Class<T>):T]
org.freeplane.features.attribute.AttributeMatchesCondition	[org.freeplane.features.attribute.AttributeMatchesCondition::java.util.regex.Pattern searchPattern, org.freeplane.features.attribute.AttributeMatchesCondition::checkText(java.lang.String):boolean, org.freeplane.features.attribute.AttributeMatchesCondition::isMatchCase():boolean]
org.freeplane.features.attribute.NodeAttributeTableModel	[org.freeplane.features.attribute.NodeAttributeTableModel::java.util.Set<javax.swing.event.TableModelListener> listeners, org.freeplane.features.attribute.NodeAttributeTableModel::addTableModelListener(javax.swing.event.TableModelListener):void, org.freeplane.features.attribute.NodeAttributeTableModel::removeTableModelListener(javax.swing.event.TableModelListener):void, org.freeplane.features.attribute.NodeAttributeTableModel::fireTableChanged(org.freeplane.features.map.NodeModel, javax.swing.event.TableModelEvent):void]
org.freeplane.features.attribute.mindmapmode.ListDialog	[org.freeplane.features.attribute.mindmapmode.ListDialog::javax.swing.JTextField textField, org.freeplane.features.attribute.mindmapmode.ListDialog::getCurrentText():java.lang.String, org.freeplane.features.attribute.mindmapmode.ListDialog::selectText():void]
org.freeplane.features.format.Scanner	[org.freeplane.features.format.Scanner::java.util.ArrayList<java.lang.String> locales, org.freeplane.features.format.Scanner::validate():void, org.freeplane.features.format.Scanner::localeMatchesExactly(java.lang.String):boolean, org.freeplane.features.format.Scanner::countryMatches(java.lang.String):boolean]
org.freeplane.features.format.Scanner	[org.freeplane.features.format.Scanner::java.util.ArrayList<java.lang.String> locales, org.freeplane.features.format.Scanner::validate():void, org.freeplane.features.format.Scanner::localeMatchesExactly(java.lang.String):boolean, org.freeplane.features.format.Scanner::countryMatches(java.lang.String):boolean, org.freeplane.features.format.Scanner::boolean isDefault, org.freeplane.features.format.Scanner::toXml():org.freeplane.n3.nanoxml.XMLElement, org.freeplane.features.format.Scanner::java.lang.String firstChars, org.freeplane.features.format.Scanner::boolean checkFirstChars, org.freeplane.features.format.Scanner::setFirstChars(java.lang.String):void, org.freeplane.features.format.Scanner::firstCharsToXml():org.freeplane.n3.nanoxml.XMLElement, org.freeplane.features.format.Scanner::parse(java.lang.String):java.lang.Object]
org.freeplane.features.format.Scanner	[org.freeplane.features.format.Scanner::java.lang.String firstChars, org.freeplane.features.format.Scanner::boolean checkFirstChars, org.freeplane.features.format.Scanner::setFirstChars(java.lang.String):void, org.freeplane.features.format.Scanner::firstCharsToXml():org.freeplane.n3.nanoxml.XMLElement, org.freeplane.features.format.Scanner::parse(java.lang.String):java.lang.Object]
org.freeplane.features.format.Scanner	[org.freeplane.features.format.Scanner::boolean isDefault, org.freeplane.features.format.Scanner::toXml():org.freeplane.n3.nanoxml.XMLElement, org.freeplane.features.format.Scanner::java.lang.String firstChars, org.freeplane.features.format.Scanner::boolean checkFirstChars, org.freeplane.features.format.Scanner::setFirstChars(java.lang.String):void, org.freeplane.features.format.Scanner::firstCharsToXml():org.freeplane.n3.nanoxml.XMLElement, org.freeplane.features.format.Scanner::parse(java.lang.String):java.lang.Object]
org.freeplane.features.icon.mindmapmode.FastAccessableIcons	[org.freeplane.features.icon.mindmapmode.FastAccessableIcons::javax.swing.DefaultListModel<org.freeplane.core.ui.AFreeplaneAction> actions, org.freeplane.features.icon.mindmapmode.FastAccessableIcons::add(org.freeplane.features.icon.mindmapmode.IconAction):void, org.freeplane.features.icon.mindmapmode.FastAccessableIcons::getInitializer():java.lang.String]
org.freeplane.features.map.HistoryInformationModel	[org.freeplane.features.map.HistoryInformationModel::long lastModifiedAt, org.freeplane.features.map.HistoryInformationModel::getLastModifiedAt():java.util.Date, org.freeplane.features.map.HistoryInformationModel::setLastModifiedAt(java.util.Date):void]
org.freeplane.features.map.MapController.ActionEnablerOnChange	[org.freeplane.features.map.MapController.ActionEnablerOnChange::java.util.Collection<org.freeplane.core.ui.AFreeplaneAction> actions, org.freeplane.features.map.MapController.ActionEnablerOnChange::remove(org.freeplane.core.ui.AFreeplaneAction):void, org.freeplane.features.map.MapController.ActionEnablerOnChange::setActionsEnabledNow():void]
org.freeplane.features.map.MapController.ActionSelectorOnChange	[org.freeplane.features.map.MapController.ActionSelectorOnChange::java.util.Collection<org.freeplane.core.ui.AFreeplaneAction> actions, org.freeplane.features.map.MapController.ActionSelectorOnChange::remove(org.freeplane.core.ui.AFreeplaneAction):void, org.freeplane.features.map.MapController.ActionSelectorOnChange::setActionsSelectedNow():void]
org.freeplane.features.map.MapReader.NodeTreeCreator	[org.freeplane.features.map.MapReader.NodeTreeCreator::java.util.Map<java.lang.String,java.lang.String> newIds, org.freeplane.features.map.MapReader.NodeTreeCreator::substituteNodeID(java.lang.String, java.lang.String):void, org.freeplane.features.map.MapReader.NodeTreeCreator::substitutedID(java.lang.String):java.lang.String]
org.freeplane.features.map.MapReader.NodeTreeCreator	[org.freeplane.features.map.MapReader.NodeTreeCreator::java.util.Map<java.lang.Object,java.lang.Object> hints, org.freeplane.features.map.MapReader.NodeTreeCreator::getHint(java.lang.Object):java.lang.Object, org.freeplane.features.map.MapReader.NodeTreeCreator::setHint(java.lang.Object, java.lang.Object):void, org.freeplane.features.map.MapReader.NodeTreeCreator::putHints(java.util.Map<? extends java.lang.Object,? extends java.lang.Object>):void]
org.freeplane.features.map.NodeAbsolutePath	[org.freeplane.features.map.NodeAbsolutePath::java.util.ListIterator<org.freeplane.features.map.NodeModel> iterator, org.freeplane.features.map.NodeAbsolutePath::hasNext():boolean, org.freeplane.features.map.NodeAbsolutePath::next():org.freeplane.features.map.NodeModel, org.freeplane.features.map.NodeAbsolutePath::previousLevel():int, org.freeplane.features.map.NodeAbsolutePath::previous():org.freeplane.features.map.NodeModel]
org.freeplane.features.map.NodeWriter	[org.freeplane.features.map.NodeWriter::java.util.Map<org.freeplane.features.map.SharedNodeData,java.util.List<org.freeplane.features.map.NodeModel>> alreadyWrittenSharedContent, org.freeplane.features.map.NodeWriter::isAlreadyWritten(org.freeplane.features.map.NodeModel):boolean, org.freeplane.features.map.NodeWriter::registerWrittenNode(org.freeplane.features.map.NodeModel):void, org.freeplane.features.map.NodeWriter::writeReferenceNodeId(org.freeplane.core.io.ITreeWriter, org.freeplane.features.map.NodeModel):void, org.freeplane.features.map.NodeWriter::writeIconSize(org.freeplane.core.io.ITreeWriter, org.freeplane.features.map.NodeModel):void, org.freeplane.features.map.NodeWriter::shouldWriteSharedContent(org.freeplane.core.io.ITreeWriter):boolean]
org.freeplane.features.presentations.mindmapmode.PresentationKeyEventDispatcher	[org.freeplane.features.presentations.mindmapmode.PresentationKeyEventDispatcher::boolean isPresentationRunning, org.freeplane.features.presentations.mindmapmode.PresentationKeyEventDispatcher::activate():void, org.freeplane.features.presentations.mindmapmode.PresentationKeyEventDispatcher::deactivate():void]
org.freeplane.features.presentations.mindmapmode.PresentationState	[org.freeplane.features.presentations.mindmapmode.PresentationState::java.util.ArrayList<org.freeplane.features.presentations.mindmapmode.PresentationStateChangeListener> presentationStateChangeListeners, org.freeplane.features.presentations.mindmapmode.PresentationState::removePresentationStateListener(org.freeplane.features.presentations.mindmapmode.PresentationStateChangeListener):void, org.freeplane.features.presentations.mindmapmode.PresentationState::firePresentationStateChangedEvent(org.freeplane.features.presentations.mindmapmode.PresentationStateChangeEvent.EventType):void]
org.freeplane.features.presentations.mindmapmode.PresentationState	[org.freeplane.features.presentations.mindmapmode.PresentationState::org.freeplane.features.presentations.mindmapmode.NamedElementCollection<org.freeplane.features.presentations.mindmapmode.Presentation> presentations, org.freeplane.features.presentations.mindmapmode.PresentationState::org.freeplane.features.presentations.mindmapmode.Presentation currentPresentation, org.freeplane.features.presentations.mindmapmode.PresentationState::boolean combinesAllPresentations, org.freeplane.features.presentations.mindmapmode.PresentationState::setCombinesAllPresentations(boolean):void, org.freeplane.features.presentations.mindmapmode.PresentationState::showNextSlide():void, org.freeplane.features.presentations.mindmapmode.PresentationState::showPreviousSlide():void, org.freeplane.features.presentations.mindmapmode.PresentationState::currentPresentationHasNextSlide():boolean, org.freeplane.features.presentations.mindmapmode.PresentationState::currentPresentationHasPreviousSlide():boolean, org.freeplane.features.presentations.mindmapmode.PresentationState::findPreviousNotEmptyPresentationIndex():int, org.freeplane.features.presentations.mindmapmode.PresentationState::findFollowingNotEmptyPresentationIndex():int, org.freeplane.features.presentations.mindmapmode.PresentationState::showLastSlide():void, org.freeplane.features.presentations.mindmapmode.PresentationState::showFirstSlide():void, org.freeplane.features.presentations.mindmapmode.PresentationState::canShowCurrentSlide():boolean, org.freeplane.features.presentations.mindmapmode.PresentationState::shouldHighlightNodeContainedOnSlide(org.freeplane.features.map.NodeModel):boolean, org.freeplane.features.presentations.mindmapmode.PresentationState::shouldHighlightNodeFoldedOnSlide(org.freeplane.features.map.NodeModel):boolean, org.freeplane.features.presentations.mindmapmode.PresentationState::isSlideRoot(org.freeplane.features.map.NodeModel):boolean, org.freeplane.features.presentations.mindmapmode.PresentationState::canShowPreviousSlide():boolean, org.freeplane.features.presentations.mindmapmode.PresentationState::canShowNextSlide():boolean, org.freeplane.features.presentations.mindmapmode.PresentationState::org.freeplane.features.presentations.mindmapmode.Slide currentSlide, org.freeplane.features.presentations.mindmapmode.PresentationState::float zoomFactor, org.freeplane.features.presentations.mindmapmode.PresentationState::restore():void, org.freeplane.features.presentations.mindmapmode.PresentationState::isPresentationRunning():boolean, org.freeplane.features.presentations.mindmapmode.PresentationState::getPresentationZoomFactor():float, org.freeplane.features.presentations.mindmapmode.PresentationState::changePresentation(org.freeplane.features.presentations.mindmapmode.CollectionChangedEvent<org.freeplane.features.presentations.mindmapmode.Presentation>):void, org.freeplane.features.presentations.mindmapmode.PresentationState::changeSlide():void, org.freeplane.features.presentations.mindmapmode.PresentationState::showPresentation():void, org.freeplane.features.presentations.mindmapmode.PresentationState::stopPresentation():void, org.freeplane.features.presentations.mindmapmode.PresentationState::usesMapZoom():boolean, org.freeplane.features.presentations.mindmapmode.PresentationState::boolean highlightsNodes, org.freeplane.features.presentations.mindmapmode.PresentationState::setHighlightsNodes(boolean):void, org.freeplane.features.presentations.mindmapmode.PresentationState::anyPreviousPresentationIsNotEmpty():boolean, org.freeplane.features.presentations.mindmapmode.PresentationState::anyFollowingPresentationIsNotEmpty():boolean]
org.freeplane.features.presentations.mindmapmode.PresentationState	[org.freeplane.features.presentations.mindmapmode.PresentationState::org.freeplane.features.presentations.mindmapmode.Slide currentSlide, org.freeplane.features.presentations.mindmapmode.PresentationState::float zoomFactor, org.freeplane.features.presentations.mindmapmode.PresentationState::restore():void, org.freeplane.features.presentations.mindmapmode.PresentationState::isPresentationRunning():boolean, org.freeplane.features.presentations.mindmapmode.PresentationState::getPresentationZoomFactor():float]
org.freeplane.features.presentations.mindmapmode.Slide	[org.freeplane.features.presentations.mindmapmode.Slide::getCurrentFoldedNodeIds():java.util.Collection<java.lang.String>, org.freeplane.features.presentations.mindmapmode.Slide::createNodeIterator():org.freeplane.features.presentations.mindmapmode.Slide.NodeIterator, org.freeplane.features.presentations.mindmapmode.Slide::foldNodes():void]
org.freeplane.features.presentations.mindmapmode.Slide	[org.freeplane.features.presentations.mindmapmode.Slide::java.util.ArrayList<org.freeplane.features.presentations.mindmapmode.SlideChangeListener> slideChangeListeners, org.freeplane.features.presentations.mindmapmode.Slide::removeSlideChangeListener(org.freeplane.features.presentations.mindmapmode.SlideChangeListener):void, org.freeplane.features.presentations.mindmapmode.Slide::fireSlideChangeEvent():void]
org.freeplane.features.presentations.mindmapmode.Slide	[org.freeplane.features.presentations.mindmapmode.Slide::boolean changesZoom, org.freeplane.features.presentations.mindmapmode.Slide::float zoom, org.freeplane.features.presentations.mindmapmode.Slide::java.lang.String placedNodeId, org.freeplane.features.presentations.mindmapmode.Slide::org.freeplane.features.map.IMapSelection.NodePosition placedNodePosition, org.freeplane.features.presentations.mindmapmode.Slide::boolean showsOnlySpecificNodes, org.freeplane.features.presentations.mindmapmode.Slide::boolean showsAncestors, org.freeplane.features.presentations.mindmapmode.Slide::boolean showsDescendants, org.freeplane.features.presentations.mindmapmode.Slide::java.lang.String rootNodeId, org.freeplane.features.presentations.mindmapmode.Slide::org.freeplane.features.filter.condition.ASelectableCondition filterCondition, org.freeplane.features.presentations.mindmapmode.Slide::setZoom(float):void, org.freeplane.features.presentations.mindmapmode.Slide::java.util.Set<java.lang.String> foldedNodeIds, org.freeplane.features.presentations.mindmapmode.Slide::isNodeFolded(org.freeplane.features.map.NodeModel):boolean, org.freeplane.features.presentations.mindmapmode.Slide::foldsNodes():boolean, org.freeplane.features.presentations.mindmapmode.Slide::unsetFoldsNodes():void, org.freeplane.features.presentations.mindmapmode.Slide::setFoldedNodeIDs(java.util.Collection<java.lang.String>):void, org.freeplane.features.presentations.mindmapmode.Slide::java.util.ArrayList<org.freeplane.features.presentations.mindmapmode.SlideChangeListener> slideChangeListeners, org.freeplane.features.presentations.mindmapmode.Slide::removeSlideChangeListener(org.freeplane.features.presentations.mindmapmode.SlideChangeListener):void, org.freeplane.features.presentations.mindmapmode.Slide::fireSlideChangeEvent():void, org.freeplane.features.presentations.mindmapmode.Slide::setSelectedNodeIds(java.util.Set<java.lang.String>):void, org.freeplane.features.presentations.mindmapmode.Slide::addSelectedNodeIds(java.util.Collection<java.lang.String>):void, org.freeplane.features.presentations.mindmapmode.Slide::removeSelectedNodeIds(java.util.Collection<java.lang.String>):void, org.freeplane.features.presentations.mindmapmode.Slide::setRootNodeId(java.lang.String):void, org.freeplane.features.presentations.mindmapmode.Slide::setPlacedNodeId(java.lang.String):void, org.freeplane.features.presentations.mindmapmode.Slide::setPlacedNodePosition(org.freeplane.features.map.IMapSelection.NodePosition):void, org.freeplane.features.presentations.mindmapmode.Slide::setChangesZoom(boolean):void, org.freeplane.features.presentations.mindmapmode.Slide::setShowsOnlySpecificNodes(boolean):void, org.freeplane.features.presentations.mindmapmode.Slide::setShowsAncestors(boolean):void, org.freeplane.features.presentations.mindmapmode.Slide::setShowsDescendants(boolean):void, org.freeplane.features.presentations.mindmapmode.Slide::setFilterCondition(org.freeplane.features.filter.condition.ASelectableCondition):void, org.freeplane.features.presentations.mindmapmode.Slide::applyZoom(float):void]
org.freeplane.features.presentations.mindmapmode.Slide	[org.freeplane.features.presentations.mindmapmode.Slide::java.util.Set<java.lang.String> foldedNodeIds, org.freeplane.features.presentations.mindmapmode.Slide::isNodeFolded(org.freeplane.features.map.NodeModel):boolean, org.freeplane.features.presentations.mindmapmode.Slide::foldsNodes():boolean]
org.freeplane.features.presentations.mindmapmode.Slide	[org.freeplane.features.presentations.mindmapmode.Slide::boolean changesZoom, org.freeplane.features.presentations.mindmapmode.Slide::float zoom, org.freeplane.features.presentations.mindmapmode.Slide::java.lang.String placedNodeId, org.freeplane.features.presentations.mindmapmode.Slide::org.freeplane.features.map.IMapSelection.NodePosition placedNodePosition, org.freeplane.features.presentations.mindmapmode.Slide::boolean showsOnlySpecificNodes, org.freeplane.features.presentations.mindmapmode.Slide::boolean showsAncestors, org.freeplane.features.presentations.mindmapmode.Slide::boolean showsDescendants, org.freeplane.features.presentations.mindmapmode.Slide::java.lang.String rootNodeId, org.freeplane.features.presentations.mindmapmode.Slide::org.freeplane.features.filter.condition.ASelectableCondition filterCondition, org.freeplane.features.presentations.mindmapmode.Slide::setZoom(float):void, org.freeplane.features.presentations.mindmapmode.Slide::java.util.Set<java.lang.String> foldedNodeIds, org.freeplane.features.presentations.mindmapmode.Slide::isNodeFolded(org.freeplane.features.map.NodeModel):boolean, org.freeplane.features.presentations.mindmapmode.Slide::foldsNodes():boolean, org.freeplane.features.presentations.mindmapmode.Slide::unsetFoldsNodes():void, org.freeplane.features.presentations.mindmapmode.Slide::setFoldedNodeIDs(java.util.Collection<java.lang.String>):void, org.freeplane.features.presentations.mindmapmode.Slide::java.util.ArrayList<org.freeplane.features.presentations.mindmapmode.SlideChangeListener> slideChangeListeners, org.freeplane.features.presentations.mindmapmode.Slide::removeSlideChangeListener(org.freeplane.features.presentations.mindmapmode.SlideChangeListener):void, org.freeplane.features.presentations.mindmapmode.Slide::fireSlideChangeEvent():void, org.freeplane.features.presentations.mindmapmode.Slide::setSelectedNodeIds(java.util.Set<java.lang.String>):void, org.freeplane.features.presentations.mindmapmode.Slide::addSelectedNodeIds(java.util.Collection<java.lang.String>):void, org.freeplane.features.presentations.mindmapmode.Slide::removeSelectedNodeIds(java.util.Collection<java.lang.String>):void, org.freeplane.features.presentations.mindmapmode.Slide::setRootNodeId(java.lang.String):void, org.freeplane.features.presentations.mindmapmode.Slide::setPlacedNodeId(java.lang.String):void, org.freeplane.features.presentations.mindmapmode.Slide::setPlacedNodePosition(org.freeplane.features.map.IMapSelection.NodePosition):void, org.freeplane.features.presentations.mindmapmode.Slide::setChangesZoom(boolean):void, org.freeplane.features.presentations.mindmapmode.Slide::setShowsOnlySpecificNodes(boolean):void, org.freeplane.features.presentations.mindmapmode.Slide::setShowsAncestors(boolean):void, org.freeplane.features.presentations.mindmapmode.Slide::setShowsDescendants(boolean):void, org.freeplane.features.presentations.mindmapmode.Slide::setFilterCondition(org.freeplane.features.filter.condition.ASelectableCondition):void, org.freeplane.features.presentations.mindmapmode.Slide::applyZoom(float):void, org.freeplane.features.presentations.mindmapmode.Slide::getEffectiveFilterCondition():org.freeplane.features.filter.condition.ICondition, org.freeplane.features.presentations.mindmapmode.Slide::getFilterConditionForSelectedNodes():org.freeplane.features.filter.condition.SelectedViewSnapshotCondition]
org.freeplane.features.presentations.mindmapmode.Slide	[org.freeplane.features.presentations.mindmapmode.Slide::getSelectedNodes(boolean):java.util.ArrayList<org.freeplane.features.map.NodeModel>, org.freeplane.features.presentations.mindmapmode.Slide::getSlideRootNode():org.freeplane.features.map.NodeModel, org.freeplane.features.presentations.mindmapmode.Slide::getCurrentNode(java.lang.String):org.freeplane.features.map.NodeModel, org.freeplane.features.presentations.mindmapmode.Slide::getMap():org.freeplane.features.map.MapModel]
org.freeplane.features.styles.mindmapmode.ManageAssociatedMindMapsDialog	[org.freeplane.features.styles.mindmapmode.ManageAssociatedMindMapsDialog::javax.swing.JDialog dialog, org.freeplane.features.styles.mindmapmode.ManageAssociatedMindMapsDialog::createCloseMapButton():javax.swing.JButton, org.freeplane.features.styles.mindmapmode.ManageAssociatedMindMapsDialog::show():void, org.freeplane.features.styles.mindmapmode.ManageAssociatedMindMapsDialog::createOpenButton(java.util.function.Supplier<java.net.URI>):javax.swing.JButton]
org.freeplane.features.styles.mindmapmode.ManageAssociatedMindMapsDialog	[org.freeplane.features.styles.mindmapmode.ManageAssociatedMindMapsDialog::org.freeplane.features.map.MapModel map, org.freeplane.features.styles.mindmapmode.ManageAssociatedMindMapsDialog::createChangeMapButton(java.lang.String, java.lang.String, javax.swing.JTextArea):javax.swing.JButton, org.freeplane.features.styles.mindmapmode.ManageAssociatedMindMapsDialog::java.net.URI followedMapLocation, org.freeplane.features.styles.mindmapmode.ManageAssociatedMindMapsDialog::javax.swing.JButton[] followedMapButtons, org.freeplane.features.styles.mindmapmode.ManageAssociatedMindMapsDialog::createUnfollowButton(javax.swing.JTextArea):javax.swing.JButton, org.freeplane.features.styles.mindmapmode.ManageAssociatedMindMapsDialog::updateAssociatedMap(java.lang.String, javax.swing.JTextArea, java.lang.String):void, org.freeplane.features.styles.mindmapmode.ManageAssociatedMindMapsDialog::java.net.URI associatedMapLocation, org.freeplane.features.styles.mindmapmode.ManageAssociatedMindMapsDialog::javax.swing.JButton[] associatedMapButtons]
org.freeplane.features.styles.mindmapmode.ManageAssociatedMindMapsDialog	[org.freeplane.features.styles.mindmapmode.ManageAssociatedMindMapsDialog::org.freeplane.features.map.MapModel map, org.freeplane.features.styles.mindmapmode.ManageAssociatedMindMapsDialog::createChangeMapButton(java.lang.String, java.lang.String, javax.swing.JTextArea):javax.swing.JButton, org.freeplane.features.styles.mindmapmode.ManageAssociatedMindMapsDialog::java.net.URI followedMapLocation, org.freeplane.features.styles.mindmapmode.ManageAssociatedMindMapsDialog::javax.swing.JButton[] followedMapButtons, org.freeplane.features.styles.mindmapmode.ManageAssociatedMindMapsDialog::createUnfollowButton(javax.swing.JTextArea):javax.swing.JButton, org.freeplane.features.styles.mindmapmode.ManageAssociatedMindMapsDialog::updateAssociatedMap(java.lang.String, javax.swing.JTextArea, java.lang.String):void, org.freeplane.features.styles.mindmapmode.ManageAssociatedMindMapsDialog::java.net.URI associatedMapLocation, org.freeplane.features.styles.mindmapmode.ManageAssociatedMindMapsDialog::javax.swing.JButton[] associatedMapButtons, org.freeplane.features.styles.mindmapmode.ManageAssociatedMindMapsDialog::createReplaceStylesButton(java.util.function.Supplier<java.net.URI>):javax.swing.JButton, org.freeplane.features.styles.mindmapmode.ManageAssociatedMindMapsDialog::createCopyStylesButton(java.util.function.Supplier<java.net.URI>):javax.swing.JButton]
org.freeplane.features.url.MapVersionInterpreter	[org.freeplane.features.url.MapVersionInterpreter::java.lang.String mapBegin, org.freeplane.features.url.MapVersionInterpreter::knows(java.lang.String):boolean, org.freeplane.features.url.MapVersionInterpreter::getVersionInterpreter(java.lang.String):org.freeplane.features.url.MapVersionInterpreter]
org.freeplane.view.swing.features.filepreview.MindMapPreviewWithOptions	[org.freeplane.view.swing.features.filepreview.MindMapPreviewWithOptions::javax.swing.JCheckBox associate, org.freeplane.view.swing.features.filepreview.MindMapPreviewWithOptions::associateAlways():org.freeplane.view.swing.features.filepreview.MindMapPreviewWithOptions, org.freeplane.view.swing.features.filepreview.MindMapPreviewWithOptions::isAssociateChecked():boolean]
org.freeplane.view.swing.features.nodehistory.NodeHistory	[org.freeplane.view.swing.features.nodehistory.NodeHistory::java.util.ListIterator<org.freeplane.view.swing.features.nodehistory.NodeHolder> nodeIterator, org.freeplane.view.swing.features.nodehistory.NodeHistory::canGoBack():boolean, org.freeplane.view.swing.features.nodehistory.NodeHistory::canGoForward():boolean]
org.freeplane.view.swing.features.time.mindmapmode.PeriodPanel	[org.freeplane.view.swing.features.time.mindmapmode.PeriodPanel::javax.swing.JComboBox periodUnitBox, org.freeplane.view.swing.features.time.mindmapmode.PeriodPanel::setPeriodUnit(org.freeplane.view.swing.features.time.mindmapmode.PeriodUnit):void, org.freeplane.view.swing.features.time.mindmapmode.PeriodPanel::getPeriodUnit():org.freeplane.view.swing.features.time.mindmapmode.PeriodUnit]
org.freeplane.view.swing.features.time.mindmapmode.PeriodPanel	[org.freeplane.view.swing.features.time.mindmapmode.PeriodPanel::javax.swing.JSpinner periodComponent, org.freeplane.view.swing.features.time.mindmapmode.PeriodPanel::getPeriod():int, org.freeplane.view.swing.features.time.mindmapmode.PeriodPanel::setPeriod(int):void, org.freeplane.view.swing.features.time.mindmapmode.PeriodPanel::calculateNextTime(java.util.Date):java.util.Date]
org.freeplane.view.swing.map.MapView	[org.freeplane.view.swing.map.MapView::java.lang.String showConnectors, org.freeplane.view.swing.map.MapView::showsConnectorLinesOrArrows(boolean):boolean, org.freeplane.view.swing.map.MapView::showsConnectorLines(boolean):boolean]
org.freeplane.view.swing.map.MapView	[org.freeplane.view.swing.map.MapView::getNodeContentLocation(org.freeplane.view.swing.map.NodeView):java.awt.Point, org.freeplane.view.swing.map.MapView::getRoundRectangleAround(org.freeplane.view.swing.map.NodeView, int, int):java.awt.geom.RoundRectangle2D.Float, org.freeplane.view.swing.map.MapView::findNodesInSelectingRectangle(java.awt.Component, java.awt.Rectangle, java.util.List<org.freeplane.view.swing.map.NodeView>):void]
org.freeplane.view.swing.map.MapView	[org.freeplane.view.swing.map.MapView::java.awt.Rectangle selectionRectangle, org.freeplane.view.swing.map.MapView::paintSelectionRectangle(java.awt.Graphics):void, org.freeplane.view.swing.map.MapView::setSelectionRectangle(java.awt.Rectangle):void, org.freeplane.view.swing.map.MapView::getIntersectingNodes():java.util.List<org.freeplane.view.swing.map.NodeView>, org.freeplane.view.swing.map.MapView::getNodeContentLocation(org.freeplane.view.swing.map.NodeView):java.awt.Point, org.freeplane.view.swing.map.MapView::getRoundRectangleAround(org.freeplane.view.swing.map.NodeView, int, int):java.awt.geom.RoundRectangle2D.Float, org.freeplane.view.swing.map.MapView::findNodesInSelectingRectangle(java.awt.Component, java.awt.Rectangle, java.util.List<org.freeplane.view.swing.map.NodeView>):void, org.freeplane.view.swing.map.MapView::paintSelectionRectangle(java.awt.Graphics2D, org.freeplane.view.swing.map.NodeView):void]
org.freeplane.view.swing.map.MapView	[org.freeplane.view.swing.map.MapView::org.freeplane.view.swing.map.NodeView currentRootParentView, org.freeplane.view.swing.map.MapView::calculateComponentIndex(java.awt.Container, int):int, org.freeplane.view.swing.map.MapView::calculateCurrentRootNodePosition():int]
org.freeplane.view.swing.map.MapViewChangeObserverCompound	[org.freeplane.view.swing.map.MapViewChangeObserverCompound::java.util.HashSet<org.freeplane.features.ui.IMapViewChangeListener> viewListeners, org.freeplane.view.swing.map.MapViewChangeObserverCompound::removeListener(org.freeplane.features.ui.IMapViewChangeListener):void, org.freeplane.view.swing.map.MapViewChangeObserverCompound::afterMapViewClose(org.freeplane.view.swing.map.MapView):void, org.freeplane.view.swing.map.MapViewChangeObserverCompound::fireMapViewCreated(org.freeplane.view.swing.map.MapView):void, org.freeplane.view.swing.map.MapViewChangeObserverCompound::fireMapViewDisplayed(org.freeplane.view.swing.map.MapView, org.freeplane.view.swing.map.MapView):void]
org.freeplane.view.swing.map.MapViewChangeObserverCompound	[org.freeplane.view.swing.map.MapViewChangeObserverCompound::java.util.HashSet<org.freeplane.features.map.IMapSelectionListener> mapListeners, org.freeplane.view.swing.map.MapViewChangeObserverCompound::removeListener(org.freeplane.features.map.IMapSelectionListener):void, org.freeplane.view.swing.map.MapViewChangeObserverCompound::afterMapChange(org.freeplane.features.map.MapModel, org.freeplane.features.map.MapModel):void, org.freeplane.view.swing.map.MapViewChangeObserverCompound::beforeMapChange(org.freeplane.features.map.MapModel, org.freeplane.features.map.MapModel):void]
org.freeplane.view.swing.map.MapViewChangeObserverCompound	[org.freeplane.view.swing.map.MapViewChangeObserverCompound::java.util.HashSet<org.freeplane.features.ui.IMapViewChangeListener> viewListeners, org.freeplane.view.swing.map.MapViewChangeObserverCompound::removeListener(org.freeplane.features.ui.IMapViewChangeListener):void, org.freeplane.view.swing.map.MapViewChangeObserverCompound::afterMapViewClose(org.freeplane.view.swing.map.MapView):void, org.freeplane.view.swing.map.MapViewChangeObserverCompound::fireMapViewCreated(org.freeplane.view.swing.map.MapView):void, org.freeplane.view.swing.map.MapViewChangeObserverCompound::fireMapViewDisplayed(org.freeplane.view.swing.map.MapView, org.freeplane.view.swing.map.MapView):void, org.freeplane.view.swing.map.MapViewChangeObserverCompound::afterMapViewChange(org.freeplane.view.swing.map.MapView, org.freeplane.view.swing.map.MapView):void, org.freeplane.view.swing.map.MapViewChangeObserverCompound::beforeMapViewChange(org.freeplane.view.swing.map.MapView, org.freeplane.view.swing.map.MapView):void, org.freeplane.view.swing.map.MapViewChangeObserverCompound::getMap(org.freeplane.view.swing.map.MapView):org.freeplane.features.map.MapModel, org.freeplane.view.swing.map.MapViewChangeObserverCompound::mapViewCreated(org.freeplane.view.swing.map.MapView, org.freeplane.view.swing.map.MapView):void, org.freeplane.view.swing.map.MapViewChangeObserverCompound::fireMapViewDisplayedLater(org.freeplane.view.swing.map.MapView, org.freeplane.view.swing.map.MapView):void, org.freeplane.view.swing.map.MapViewChangeObserverCompound::fireMapViewCreatedAfterItIsDisplayed(org.freeplane.view.swing.map.MapView, org.freeplane.view.swing.map.MapView):void]
org.freeplane.view.swing.map.MapViewChangeObserverCompound	[org.freeplane.view.swing.map.MapViewChangeObserverCompound::mapViewCreated(org.freeplane.view.swing.map.MapView, org.freeplane.view.swing.map.MapView):void, org.freeplane.view.swing.map.MapViewChangeObserverCompound::fireMapViewDisplayedLater(org.freeplane.view.swing.map.MapView, org.freeplane.view.swing.map.MapView):void, org.freeplane.view.swing.map.MapViewChangeObserverCompound::fireMapViewCreatedAfterItIsDisplayed(org.freeplane.view.swing.map.MapView, org.freeplane.view.swing.map.MapView):void]
org.freeplane.view.swing.map.SummaryEdgePainter	[org.freeplane.view.swing.map.SummaryEdgePainter::int[] yMins, org.freeplane.view.swing.map.SummaryEdgePainter::int[] yMaxs, org.freeplane.view.swing.map.SummaryEdgePainter::int[] xs, org.freeplane.view.swing.map.SummaryEdgePainter::boolean isTopOrLeft, org.freeplane.view.swing.map.SummaryEdgePainter::addChild(org.freeplane.view.swing.map.NodeView):void, org.freeplane.view.swing.map.SummaryEdgePainter::int level, org.freeplane.view.swing.map.SummaryEdgePainter::setCurrentLevel(org.freeplane.view.swing.map.NodeView):void, org.freeplane.view.swing.map.SummaryEdgePainter::int currentX, org.freeplane.view.swing.map.SummaryEdgePainter::int currentY2, org.freeplane.view.swing.map.SummaryEdgePainter::int currentY1, org.freeplane.view.swing.map.SummaryEdgePainter::hasSummaryEdge():boolean, org.freeplane.view.swing.map.SummaryEdgePainter::paintSummaryEdge(java.awt.Graphics2D, org.freeplane.view.swing.map.NodeView, org.freeplane.view.swing.map.NodeView):boolean, org.freeplane.view.swing.map.SummaryEdgePainter::resetLevelValues(int):void, org.freeplane.view.swing.map.SummaryEdgePainter::saveCurrentValues():void, org.freeplane.view.swing.map.SummaryEdgePainter::updateLevelValues(org.freeplane.view.swing.map.NodeView):void]
org.freeplane.view.swing.map.SummaryEdgePainter	[org.freeplane.view.swing.map.SummaryEdgePainter::int currentX, org.freeplane.view.swing.map.SummaryEdgePainter::int currentY2, org.freeplane.view.swing.map.SummaryEdgePainter::int currentY1, org.freeplane.view.swing.map.SummaryEdgePainter::hasSummaryEdge():boolean, org.freeplane.view.swing.map.SummaryEdgePainter::paintSummaryEdge(java.awt.Graphics2D, org.freeplane.view.swing.map.NodeView, org.freeplane.view.swing.map.NodeView):boolean]
org.freeplane.features.format.ScannerController	[org.freeplane.features.format.ScannerController::java.lang.String pathToFile, org.freeplane.features.format.ScannerController::initScanners():void, org.freeplane.features.format.ScannerController::loadScanners():void, org.freeplane.features.format.ScannerController::parseScanner(org.freeplane.n3.nanoxml.XMLElement):org.freeplane.features.format.Scanner, org.freeplane.features.format.ScannerController::parseParser(org.freeplane.n3.nanoxml.XMLElement, java.util.Locale):org.freeplane.features.format.Parser, org.freeplane.features.format.ScannerController::createScanner_en():org.freeplane.features.format.Scanner, org.freeplane.features.format.ScannerController::createScanner_de():org.freeplane.features.format.Scanner, org.freeplane.features.format.ScannerController::createScanner_hr():org.freeplane.features.format.Scanner, org.freeplane.features.format.ScannerController::createScanner(java.util.Locale):org.freeplane.features.format.Scanner, org.freeplane.features.format.ScannerController::saveScanners(java.util.List<org.freeplane.features.format.Scanner>):void, org.freeplane.features.format.ScannerController::saveScannersNoThrow():void, org.freeplane.features.format.ScannerController::addAndSaveStandardScanners():void, org.freeplane.features.format.ScannerController::commentLines(java.lang.String[]):java.lang.String]
org.freeplane.features.format.ScannerController	[org.freeplane.features.format.ScannerController::java.lang.String pathToFile, org.freeplane.features.format.ScannerController::initScanners():void, org.freeplane.features.format.ScannerController::loadScanners():void, org.freeplane.features.format.ScannerController::parseScanner(org.freeplane.n3.nanoxml.XMLElement):org.freeplane.features.format.Scanner, org.freeplane.features.format.ScannerController::parseParser(org.freeplane.n3.nanoxml.XMLElement, java.util.Locale):org.freeplane.features.format.Parser]
org.freeplane.core.ui.svgicons.SVGIconCreator	[org.freeplane.core.ui.svgicons.SVGIconCreator::java.net.URL url, org.freeplane.core.ui.svgicons.SVGIconCreator::load(com.kitfox.svg.SVGUniverse):void, org.freeplane.core.ui.svgicons.SVGIconCreator::openStream(boolean):java.io.InputStream, org.freeplane.core.ui.svgicons.SVGIconCreator::urlWithoutQuery():java.net.URL, org.freeplane.core.ui.svgicons.SVGIconCreator::getInternalUri():java.lang.String, org.freeplane.core.ui.svgicons.SVGIconCreator::java.net.URI svgUri, org.freeplane.core.ui.svgicons.SVGIconCreator::boolean diagramWasAlreadyLoaded, org.freeplane.core.ui.svgicons.SVGIconCreator::getSize():java.awt.Dimension, org.freeplane.core.ui.svgicons.SVGIconCreator::loadImage():java.awt.Image, org.freeplane.core.ui.svgicons.SVGIconCreator::createSvgIcon():com.kitfox.svg.app.beans.SVGIcon, org.freeplane.core.ui.svgicons.SVGIconCreator::int heightPixels, org.freeplane.core.ui.svgicons.SVGIconCreator::setHeight(int):org.freeplane.core.ui.svgicons.SVGIconCreator]
org.freeplane.core.ui.svgicons.SVGIconCreator	[org.freeplane.core.ui.svgicons.SVGIconCreator::java.net.URL url, org.freeplane.core.ui.svgicons.SVGIconCreator::load(com.kitfox.svg.SVGUniverse):void, org.freeplane.core.ui.svgicons.SVGIconCreator::openStream(boolean):java.io.InputStream, org.freeplane.core.ui.svgicons.SVGIconCreator::urlWithoutQuery():java.net.URL, org.freeplane.core.ui.svgicons.SVGIconCreator::getInternalUri():java.lang.String, org.freeplane.core.ui.svgicons.SVGIconCreator::java.net.URI svgUri, org.freeplane.core.ui.svgicons.SVGIconCreator::boolean diagramWasAlreadyLoaded, org.freeplane.core.ui.svgicons.SVGIconCreator::getSize():java.awt.Dimension, org.freeplane.core.ui.svgicons.SVGIconCreator::loadImage():java.awt.Image, org.freeplane.core.ui.svgicons.SVGIconCreator::createSvgIcon():com.kitfox.svg.app.beans.SVGIcon]
org.freeplane.core.ui.svgicons.SVGIconCreator	[org.freeplane.core.ui.svgicons.SVGIconCreator::java.net.URL url, org.freeplane.core.ui.svgicons.SVGIconCreator::load(com.kitfox.svg.SVGUniverse):void, org.freeplane.core.ui.svgicons.SVGIconCreator::openStream(boolean):java.io.InputStream, org.freeplane.core.ui.svgicons.SVGIconCreator::urlWithoutQuery():java.net.URL, org.freeplane.core.ui.svgicons.SVGIconCreator::getInternalUri():java.lang.String]
org.freeplane.core.ui.textchanger.UITextChanger	[org.freeplane.core.ui.textchanger.UITextChanger::replaceComponentTexts(javax.swing.JComponent, java.util.ArrayList<javax.swing.JTextField>):void, org.freeplane.core.ui.textchanger.UITextChanger::setEditedTexts(javax.swing.JComponent, java.util.ArrayList<javax.swing.JTextField>):void, org.freeplane.core.ui.textchanger.UITextChanger::showDialog(java.awt.Component, java.util.ArrayList<javax.swing.JTextField>):int, org.freeplane.core.ui.textchanger.UITextChanger::setFocusWhenShowed(javax.swing.JTextField):void, org.freeplane.core.ui.textchanger.UITextChanger::setEditedText(javax.swing.JComponent, javax.swing.JTextField):void, org.freeplane.core.ui.textchanger.UITextChanger::setNewText(java.awt.Component, java.lang.String):void, org.freeplane.core.ui.textchanger.UITextChanger::setNewBorderTitle(javax.swing.JComponent, java.lang.String):void, org.freeplane.core.ui.textchanger.UITextChanger::setNewTitle(javax.swing.border.Border, java.lang.String):void]
org.freeplane.core.ui.textchanger.UITextChanger	[org.freeplane.core.ui.textchanger.UITextChanger::replaceComponentTexts(javax.swing.JComponent, java.util.ArrayList<javax.swing.JTextField>):void, org.freeplane.core.ui.textchanger.UITextChanger::setEditedTexts(javax.swing.JComponent, java.util.ArrayList<javax.swing.JTextField>):void, org.freeplane.core.ui.textchanger.UITextChanger::showDialog(java.awt.Component, java.util.ArrayList<javax.swing.JTextField>):int, org.freeplane.core.ui.textchanger.UITextChanger::setFocusWhenShowed(javax.swing.JTextField):void, org.freeplane.core.ui.textchanger.UITextChanger::setEditedText(javax.swing.JComponent, javax.swing.JTextField):void, org.freeplane.core.ui.textchanger.UITextChanger::setNewText(java.awt.Component, java.lang.String):void]
org.freeplane.core.ui.textchanger.UITextChanger	[org.freeplane.core.ui.textchanger.UITextChanger::replaceComponentTexts(javax.swing.JComponent, java.util.ArrayList<javax.swing.JTextField>):void, org.freeplane.core.ui.textchanger.UITextChanger::setEditedTexts(javax.swing.JComponent, java.util.ArrayList<javax.swing.JTextField>):void, org.freeplane.core.ui.textchanger.UITextChanger::showDialog(java.awt.Component, java.util.ArrayList<javax.swing.JTextField>):int, org.freeplane.core.ui.textchanger.UITextChanger::setFocusWhenShowed(javax.swing.JTextField):void]
org.freeplane.core.ui.components.EnterPasswordDialog	[org.freeplane.core.ui.components.EnterPasswordDialog::boolean enterTwoPasswords, org.freeplane.core.ui.components.EnterPasswordDialog::checkEqualAndMinimumSize():boolean, org.freeplane.core.ui.components.EnterPasswordDialog::javax.swing.JPasswordField jPasswordField1, org.freeplane.core.ui.components.EnterPasswordDialog::getJPasswordField1():javax.swing.JPasswordField, org.freeplane.core.ui.components.EnterPasswordDialog::javax.swing.JPasswordField jPasswordField, org.freeplane.core.ui.components.EnterPasswordDialog::getJPasswordField():javax.swing.JPasswordField, org.freeplane.core.ui.components.EnterPasswordDialog::okPressed():void, org.freeplane.core.ui.components.EnterPasswordDialog::cancelPressed():void, org.freeplane.core.ui.components.EnterPasswordDialog::java.lang.StringBuilder password, org.freeplane.core.ui.components.EnterPasswordDialog::int result]
org.freeplane.core.ui.components.EnterPasswordDialog	[org.freeplane.core.ui.components.EnterPasswordDialog::boolean enterTwoPasswords, org.freeplane.core.ui.components.EnterPasswordDialog::checkEqualAndMinimumSize():boolean, org.freeplane.core.ui.components.EnterPasswordDialog::javax.swing.JPasswordField jPasswordField1, org.freeplane.core.ui.components.EnterPasswordDialog::getJPasswordField1():javax.swing.JPasswordField]
org.freeplane.features.attribute.AttributeRegistryElement	[org.freeplane.features.attribute.AttributeRegistryElement::boolean isRestricted, org.freeplane.features.attribute.AttributeRegistryElement::org.freeplane.features.attribute.AttributeRegistryElement.RegisteredAttributeValues values, org.freeplane.features.attribute.AttributeRegistryElement::org.freeplane.features.attribute.AttributeRegistry registry, org.freeplane.features.attribute.AttributeRegistryElement::java.lang.Boolean restrictionModel, org.freeplane.features.attribute.AttributeRegistryElement::addValue(java.lang.Object):void, org.freeplane.features.attribute.AttributeRegistryElement::removeAllValues():void, org.freeplane.features.attribute.AttributeRegistryElement::removeValue(java.lang.Object):void, org.freeplane.features.attribute.AttributeRegistryElement::replaceValue(java.lang.Object, java.lang.Object):void, org.freeplane.features.attribute.AttributeRegistryElement::setRestriction(boolean):void, org.freeplane.features.attribute.AttributeRegistryElement::java.lang.Boolean visibilityModel, org.freeplane.features.attribute.AttributeRegistryElement::setVisibility(boolean):void]
org.freeplane.features.export.mindmapmode.ExportController	[org.freeplane.features.export.mindmapmode.ExportController::java.util.HashMap<javax.swing.filechooser.FileFilter,org.freeplane.features.export.mindmapmode.IExportEngine> mapExportEngines, org.freeplane.features.export.mindmapmode.ExportController::createMapExportDialog():org.freeplane.features.export.mindmapmode.ExportDialog, org.freeplane.features.export.mindmapmode.ExportController::addMapExportEngine(javax.swing.filechooser.FileFilter, org.freeplane.features.export.mindmapmode.IExportEngine):void, org.freeplane.features.export.mindmapmode.ExportController::java.util.ArrayList<javax.swing.filechooser.FileFilter> mapExportFileFilters, org.freeplane.features.export.mindmapmode.ExportController::getMapExportFileFilters():java.util.List<javax.swing.filechooser.FileFilter>, org.freeplane.features.export.mindmapmode.ExportController::sortFileFilters():void, org.freeplane.features.export.mindmapmode.ExportController::java.util.ArrayList<javax.swing.filechooser.FileFilter> branchExportFileFilters, org.freeplane.features.export.mindmapmode.ExportController::getBranchExportFileFilters():java.util.List<javax.swing.filechooser.FileFilter>]
org.freeplane.features.export.mindmapmode.ExportController	[org.freeplane.features.export.mindmapmode.ExportController::java.util.ArrayList<javax.swing.filechooser.FileFilter> mapExportFileFilters, org.freeplane.features.export.mindmapmode.ExportController::getMapExportFileFilters():java.util.List<javax.swing.filechooser.FileFilter>, org.freeplane.features.export.mindmapmode.ExportController::sortFileFilters():void, org.freeplane.features.export.mindmapmode.ExportController::java.util.ArrayList<javax.swing.filechooser.FileFilter> branchExportFileFilters, org.freeplane.features.export.mindmapmode.ExportController::getBranchExportFileFilters():java.util.List<javax.swing.filechooser.FileFilter>]
org.freeplane.features.map.clipboard.MindMapHTMLWriter	[org.freeplane.features.map.clipboard.MindMapHTMLWriter::boolean writeFoldingCode, org.freeplane.features.map.clipboard.MindMapHTMLWriter::writeStyle():void, org.freeplane.features.map.clipboard.MindMapHTMLWriter::java.awt.Font defaultFont, org.freeplane.features.map.clipboard.MindMapHTMLWriter::java.awt.Color defaultColor, org.freeplane.features.map.clipboard.MindMapHTMLWriter::fontStyle(java.awt.Color, java.awt.Font):java.lang.String, org.freeplane.features.map.clipboard.MindMapHTMLWriter::writeDefaultFontStyle():void, org.freeplane.features.map.clipboard.MindMapHTMLWriter::resetDefaults():void]
org.freeplane.features.map.clipboard.MindMapHTMLWriter	[org.freeplane.features.map.clipboard.MindMapHTMLWriter::java.awt.Font defaultFont, org.freeplane.features.map.clipboard.MindMapHTMLWriter::java.awt.Color defaultColor, org.freeplane.features.map.clipboard.MindMapHTMLWriter::fontStyle(java.awt.Color, java.awt.Font):java.lang.String, org.freeplane.features.map.clipboard.MindMapHTMLWriter::writeDefaultFontStyle():void, org.freeplane.features.map.clipboard.MindMapHTMLWriter::resetDefaults():void]
org.freeplane.features.map.clipboard.MindMapHTMLWriter	[org.freeplane.features.map.clipboard.MindMapHTMLWriter::org.freeplane.features.cloud.CloudController clouds, org.freeplane.features.map.clipboard.MindMapHTMLWriter::getCloudColor(org.freeplane.features.map.NodeModel, boolean):java.awt.Color, org.freeplane.features.map.clipboard.MindMapHTMLWriter::getWrittenCloudColor(org.freeplane.features.map.NodeModel, java.awt.Color):java.awt.Color]
org.freeplane.features.map.clipboard.MindMapHTMLWriter	[org.freeplane.features.map.clipboard.MindMapHTMLWriter::boolean writesColors, org.freeplane.features.map.clipboard.MindMapHTMLWriter::org.freeplane.features.nodestyle.NodeStyleController nodeStyleController, org.freeplane.features.map.clipboard.MindMapHTMLWriter::getWrittenBackgroundColor(org.freeplane.features.map.NodeModel):java.awt.Color, org.freeplane.features.map.clipboard.MindMapHTMLWriter::setDefaultsFrom(org.freeplane.features.map.MapModel):void, org.freeplane.features.map.clipboard.MindMapHTMLWriter::org.freeplane.features.cloud.CloudController clouds, org.freeplane.features.map.clipboard.MindMapHTMLWriter::getCloudColor(org.freeplane.features.map.NodeModel, boolean):java.awt.Color, org.freeplane.features.map.clipboard.MindMapHTMLWriter::getWrittenCloudColor(org.freeplane.features.map.NodeModel, java.awt.Color):java.awt.Color]
org.freeplane.features.styles.mindmapmode.MUIFactory	[org.freeplane.features.styles.mindmapmode.MUIFactory::boolean ignoreChangeEvent, org.freeplane.features.styles.mindmapmode.MUIFactory::changeToolbar(org.freeplane.features.map.NodeModel):void, org.freeplane.features.styles.mindmapmode.MUIFactory::javax.swing.DefaultComboBoxModel fonts, org.freeplane.features.styles.mindmapmode.MUIFactory::createFontBox():javax.swing.JComboBox, org.freeplane.features.styles.mindmapmode.MUIFactory::selectFontName(java.lang.String):void, org.freeplane.features.styles.mindmapmode.MUIFactory::javax.swing.DefaultComboBoxModel size, org.freeplane.features.styles.mindmapmode.MUIFactory::createSizeBox():java.awt.Container, org.freeplane.features.styles.mindmapmode.MUIFactory::selectFontSize(java.lang.String):void, org.freeplane.features.styles.mindmapmode.MUIFactory::updateMapStyles(org.freeplane.features.map.MapModel):void]
org.freeplane.features.styles.mindmapmode.MUIFactory	[org.freeplane.features.styles.mindmapmode.MUIFactory::boolean ignoreChangeEvent, org.freeplane.features.styles.mindmapmode.MUIFactory::changeToolbar(org.freeplane.features.map.NodeModel):void, org.freeplane.features.styles.mindmapmode.MUIFactory::javax.swing.DefaultComboBoxModel fonts, org.freeplane.features.styles.mindmapmode.MUIFactory::createFontBox():javax.swing.JComboBox, org.freeplane.features.styles.mindmapmode.MUIFactory::selectFontName(java.lang.String):void]
org.freeplane.features.styles.mindmapmode.styleeditorpanel.StyleEditorPanel	[org.freeplane.features.styles.mindmapmode.styleeditorpanel.StyleEditorPanel::boolean internalChange, org.freeplane.features.styles.mindmapmode.styleeditorpanel.StyleEditorPanel::setStyle(org.freeplane.features.map.NodeModel):void, org.freeplane.features.styles.mindmapmode.styleeditorpanel.StyleEditorPanel::org.freeplane.features.styles.mindmapmode.styleeditorpanel.ControlGroup[] controlGroups, org.freeplane.features.styles.mindmapmode.styleeditorpanel.StyleEditorPanel::org.freeplane.features.styles.mindmapmode.styleeditorpanel.StyleEditorPanel.PanelEnabler panelEnabler, org.freeplane.features.styles.mindmapmode.styleeditorpanel.StyleEditorPanel::addListeners():void, org.freeplane.features.styles.mindmapmode.styleeditorpanel.StyleEditorPanel::org.freeplane.features.mode.ModeController modeController, org.freeplane.features.styles.mindmapmode.styleeditorpanel.StyleEditorPanel::updatePanel(org.freeplane.features.map.NodeModel):void]
org.freeplane.features.styles.mindmapmode.styleeditorpanel.StyleEditorPanel	[org.freeplane.features.styles.mindmapmode.styleeditorpanel.StyleEditorPanel::boolean internalChange, org.freeplane.features.styles.mindmapmode.styleeditorpanel.StyleEditorPanel::setStyle(org.freeplane.features.map.NodeModel):void, org.freeplane.features.styles.mindmapmode.styleeditorpanel.StyleEditorPanel::org.freeplane.features.styles.mindmapmode.styleeditorpanel.ControlGroup[] controlGroups, org.freeplane.features.styles.mindmapmode.styleeditorpanel.StyleEditorPanel::org.freeplane.features.styles.mindmapmode.styleeditorpanel.StyleEditorPanel.PanelEnabler panelEnabler, org.freeplane.features.styles.mindmapmode.styleeditorpanel.StyleEditorPanel::addListeners():void]
org.freeplane.core.resources.ResourceBundles	[org.freeplane.core.resources.ResourceBundles::java.util.Properties userLanguageResources, org.freeplane.core.resources.ResourceBundles::boolean userResourcesHaveChanged, org.freeplane.core.resources.ResourceBundles::putUserResourceString(java.lang.String, java.lang.String):void, org.freeplane.core.resources.ResourceBundles::addUserDefinedString(java.lang.String, java.lang.String):void, org.freeplane.core.resources.ResourceBundles::removeUserDefinedString(java.lang.String):void, org.freeplane.core.resources.ResourceBundles::loadUserResources():void, org.freeplane.core.resources.ResourceBundles::saveUserResources():void]
org.freeplane.core.resources.ResourceController	[org.freeplane.core.resources.ResourceController::getResource(java.lang.String):java.net.URL, org.freeplane.core.resources.ResourceController::getResourceStream(java.lang.String):java.io.InputStream, org.freeplane.core.resources.ResourceController::getIconResource(java.lang.String):java.net.URL, org.freeplane.core.resources.ResourceController::withAccentColorQuery(java.net.URL):java.net.URL, org.freeplane.core.resources.ResourceController::loadString(java.lang.String):java.lang.String, org.freeplane.core.resources.ResourceController::loadIcon(java.lang.String, boolean):javax.swing.Icon]
org.freeplane.core.ui.components.calendar.JDayChooser	[org.freeplane.core.ui.components.calendar.JDayChooser::java.util.Date defaultMaxSelectableDate, org.freeplane.core.ui.components.calendar.JDayChooser::java.util.Date maxSelectableDate, org.freeplane.core.ui.components.calendar.JDayChooser::setMaxSelectableDate(java.util.Date):java.util.Date, org.freeplane.core.ui.components.calendar.JDayChooser::setSelectableDateRange(java.util.Date, java.util.Date):void, org.freeplane.core.ui.components.calendar.JDayChooser::java.util.Date minSelectableDate, org.freeplane.core.ui.components.calendar.JDayChooser::setMinSelectableDate(java.util.Date):java.util.Date, org.freeplane.core.ui.components.calendar.JDayChooser::java.util.Date defaultMinSelectableDate]
org.freeplane.core.ui.components.calendar.JDayChooser	[org.freeplane.core.ui.components.calendar.JDayChooser::boolean dayBordersVisible, org.freeplane.core.ui.components.calendar.JDayChooser::setDayBordersVisible(boolean):void, org.freeplane.core.ui.components.calendar.JDayChooser::boolean initialized]
org.freeplane.core.ui.components.calendar.JDayChooser	[org.freeplane.core.ui.components.calendar.JDayChooser::boolean alwaysFireDayProperty, org.freeplane.core.ui.components.calendar.JDayChooser::int day, org.freeplane.core.ui.components.calendar.JDayChooser::setMonth(int):void, org.freeplane.core.ui.components.calendar.JDayChooser::java.util.Calendar calendar]
org.freeplane.core.ui.components.resizer.UIComponentVisibilityDispatcher	[org.freeplane.core.ui.components.resizer.UIComponentVisibilityDispatcher::javax.swing.JComponent component, org.freeplane.core.ui.components.resizer.UIComponentVisibilityDispatcher::isContainedInFullScreenWindow():boolean, org.freeplane.core.ui.components.resizer.UIComponentVisibilityDispatcher::makeComponentVisible(boolean):void, org.freeplane.core.ui.components.resizer.UIComponentVisibilityDispatcher::setVisible(boolean):void, org.freeplane.core.ui.components.resizer.UIComponentVisibilityDispatcher::org.freeplane.core.ui.components.resizer.OneTouchCollapseResizer resizer]
org.freeplane.features.icon.mindmapmode.TagPanelManager	[org.freeplane.features.icon.mindmapmode.TagPanelManager::org.freeplane.features.icon.mindmapmode.JTagTree tagTree, org.freeplane.features.icon.mindmapmode.TagPanelManager::setupFilterField():void, org.freeplane.features.icon.mindmapmode.TagPanelManager::javax.swing.JTextField filterField, org.freeplane.features.icon.mindmapmode.TagPanelManager::applyFilter():void, org.freeplane.features.icon.mindmapmode.TagPanelManager::javax.swing.Timer filterTimer]
org.freeplane.core.ui.MenuSplitter	[org.freeplane.core.ui.MenuSplitter::addMenuComponent(javax.swing.JMenu, java.awt.Component, int):void, org.freeplane.core.ui.MenuSplitter::removeMenuComponent(java.awt.Component):void, org.freeplane.core.ui.MenuSplitter::isExtraSubMenu(java.awt.Component):boolean, org.freeplane.core.ui.MenuSplitter::hasExtraSubMenu(javax.swing.JMenu):boolean, org.freeplane.core.ui.MenuSplitter::getExtraSubMenu(javax.swing.JMenu):javax.swing.JMenu]
org.freeplane.features.icon.TagCategories	[org.freeplane.features.icon.TagCategories::writeCategorizedTag(javax.swing.tree.DefaultMutableTreeNode, java.io.StringWriter):void, org.freeplane.features.icon.TagCategories::containsTag(javax.swing.tree.DefaultMutableTreeNode):boolean, org.freeplane.features.icon.TagCategories::writeTagCategories(javax.swing.tree.DefaultMutableTreeNode, java.lang.String, java.io.Writer):void, org.freeplane.features.icon.TagCategories::tagWithoutCategories(javax.swing.tree.DefaultMutableTreeNode):org.freeplane.features.icon.Tag]
org.freeplane.features.icon.mindmapmode.FilterableJTree.FilterableTreeModel	[org.freeplane.features.icon.mindmapmode.FilterableJTree.FilterableTreeModel::java.util.function.Predicate<java.lang.Object> filter, org.freeplane.features.icon.mindmapmode.FilterableJTree.FilterableTreeModel::isFiltering():boolean, org.freeplane.features.icon.mindmapmode.FilterableJTree.FilterableTreeModel::setFilter(java.util.function.Predicate<java.lang.Object>):void, org.freeplane.features.icon.mindmapmode.FilterableJTree.FilterableTreeModel::getFilteredChildren(java.lang.Object):java.util.List<java.lang.Object>, org.freeplane.features.icon.mindmapmode.FilterableJTree.FilterableTreeModel::java.util.Map<java.lang.Object,java.util.List<java.lang.Object>> filteredCache, org.freeplane.features.icon.mindmapmode.FilterableJTree.FilterableTreeModel::invalidateCache(java.lang.Object[]):void]
org.freeplane.features.link.mindmapmode.SelectMenuItemDialog	[org.freeplane.features.link.mindmapmode.SelectMenuItemDialog::javax.swing.JButton btnOK, org.freeplane.features.link.mindmapmode.SelectMenuItemDialog::javax.swing.JTree tree, org.freeplane.features.link.mindmapmode.SelectMenuItemDialog::createButtonBar():javax.swing.Box, org.freeplane.features.link.mindmapmode.SelectMenuItemDialog::createTree():javax.swing.JTree, org.freeplane.features.link.mindmapmode.SelectMenuItemDialog::createButton(java.lang.String, org.freeplane.features.link.mindmapmode.SelectMenuItemDialog.CloseAction):javax.swing.JButton]
org.freeplane.features.map.NodeRelativePath	[org.freeplane.features.map.NodeRelativePath::int[] beginPath, org.freeplane.features.map.NodeRelativePath::int[] endPath, org.freeplane.features.map.NodeRelativePath::equalPathsTo(org.freeplane.features.map.NodeRelativePath):boolean, org.freeplane.features.map.NodeRelativePath::getPathLength():int, org.freeplane.features.map.NodeRelativePath::compareNodePositions():int, org.freeplane.features.map.NodeRelativePath::ancestorForBegin(org.freeplane.features.map.NodeModel):org.freeplane.features.map.NodeModel, org.freeplane.features.map.NodeRelativePath::ancestor(org.freeplane.features.map.NodeModel, int):org.freeplane.features.map.NodeModel, org.freeplane.features.map.NodeRelativePath::comparator():java.util.Comparator<org.freeplane.features.map.NodeModel>, org.freeplane.features.map.NodeRelativePath::path(org.freeplane.features.map.NodeAbsolutePath, int):int[]]
org.freeplane.features.map.mindmapmode.MMapController	[org.freeplane.features.map.mindmapmode.MMapController::addNewNode(org.freeplane.features.map.NodeModel, int, java.util.function.Consumer<org.freeplane.features.map.NodeModel>):org.freeplane.features.map.NodeModel, org.freeplane.features.map.mindmapmode.MMapController::addNewNode(org.freeplane.features.map.NodeModel, org.freeplane.features.map.NodeModel, int):boolean, org.freeplane.features.map.mindmapmode.MMapController::isWriteable(org.freeplane.features.map.NodeModel):boolean, org.freeplane.features.map.mindmapmode.MMapController::newNode(java.lang.Object, org.freeplane.features.map.MapModel):org.freeplane.features.map.NodeModel]
org.freeplane.features.map.mindmapmode.clipboard.MMapClipboardController.StructuredHtmlFlavorHandler	[org.freeplane.features.map.mindmapmode.clipboard.MMapClipboardController.StructuredHtmlFlavorHandler::getParentElement(javax.swing.text.html.HTMLDocument):javax.swing.text.Element, org.freeplane.features.map.mindmapmode.clipboard.MMapClipboardController.StructuredHtmlFlavorHandler::split(java.lang.String):org.freeplane.features.map.mindmapmode.clipboard.MMapClipboardController.TextFragment[], org.freeplane.features.map.mindmapmode.clipboard.MMapClipboardController.StructuredHtmlFlavorHandler::isSeparateElement(javax.swing.text.Element):boolean, org.freeplane.features.map.mindmapmode.clipboard.MMapClipboardController.StructuredHtmlFlavorHandler::split(javax.swing.text.html.HTMLDocument, javax.swing.text.Element, java.util.LinkedList<org.freeplane.features.map.mindmapmode.clipboard.MMapClipboardController.TextFragment>, int):void]
org.freeplane.features.text.mindmapmode.MTextController	[org.freeplane.features.text.mindmapmode.MTextController::setDetailsHtmlText(org.freeplane.features.map.NodeModel, java.lang.String):void, org.freeplane.features.text.mindmapmode.MTextController::removeHtmlHead(java.lang.String):java.lang.String, org.freeplane.features.text.mindmapmode.MTextController::containsFormatting(java.lang.String):boolean, org.freeplane.features.text.mindmapmode.MTextController::makePlainIfNoFormattingFound(java.lang.String):java.lang.String, org.freeplane.features.text.mindmapmode.MTextController::setDetails(org.freeplane.features.map.NodeModel, java.lang.String):void, org.freeplane.features.text.mindmapmode.MTextController::setDetailsContentType(org.freeplane.features.map.NodeModel, java.lang.String):void]
org.freeplane.features.text.mindmapmode.MTextController	[org.freeplane.features.text.mindmapmode.MTextController::setDetailsHtmlText(org.freeplane.features.map.NodeModel, java.lang.String):void, org.freeplane.features.text.mindmapmode.MTextController::removeHtmlHead(java.lang.String):java.lang.String, org.freeplane.features.text.mindmapmode.MTextController::containsFormatting(java.lang.String):boolean, org.freeplane.features.text.mindmapmode.MTextController::makePlainIfNoFormattingFound(java.lang.String):java.lang.String]
org.freeplane.features.text.mindmapmode.MTextController	[org.freeplane.features.text.mindmapmode.MTextController::org.freeplane.features.text.mindmapmode.EditNodeBase currentBlockingEditor, org.freeplane.features.text.mindmapmode.MTextController::unsetCurrentBlockingEditor(org.freeplane.features.text.mindmapmode.EditNodeBase):void, org.freeplane.features.text.mindmapmode.MTextController::org.freeplane.features.text.mindmapmode.MTextController.EditEventDispatcher keyEventDispatcher, org.freeplane.features.text.mindmapmode.MTextController::stopInlineEditing():void]
org.freeplane.view.swing.map.MainView	[org.freeplane.view.swing.map.MainView::java.awt.Color borderColor, org.freeplane.view.swing.map.MainView::java.lang.Boolean borderColorMatchesEdgeColor, org.freeplane.view.swing.map.MainView::getBorderColor():java.awt.Color, org.freeplane.view.swing.map.MainView::getFoldingMarkBorderColor():java.awt.Color]
org.freeplane.view.swing.map.NodeView	[org.freeplane.view.swing.map.NodeView::getZoomedFoldingMarkHalfSize(double):int, org.freeplane.view.swing.map.NodeView::getZoomedFoldingMarkHalfWidth(double):int, org.freeplane.view.swing.map.NodeView::getZoomedFoldingSwitchMinWidth():int, org.freeplane.view.swing.map.NodeView::getZoomedStateSymbolHalfWidth():int, org.freeplane.view.swing.map.NodeView::getPreferredFoldingSymbolWidth():int]
org.freeplane.view.swing.map.cloud.CloudView	[org.freeplane.view.swing.map.cloud.CloudView::int iterativeLevel, org.freeplane.view.swing.map.cloud.CloudView::getDistanceToConvexHull():double, org.freeplane.view.swing.map.cloud.CloudView::calcDistanceBetweenPoints():double, org.freeplane.view.swing.map.cloud.CloudView::getAdditionalHeight(org.freeplane.features.cloud.CloudModel, org.freeplane.view.swing.map.NodeView):int, org.freeplane.view.swing.map.cloud.CloudView::getZoom():double]
org.freeplane.core.ui.ActionAcceleratorManager	[org.freeplane.core.ui.ActionAcceleratorManager::java.util.Properties keysetProps, org.freeplane.core.ui.ActionAcceleratorManager::getShortcut(java.lang.String):java.lang.String, org.freeplane.core.ui.ActionAcceleratorManager::storeAcceleratorPreset(java.io.OutputStream):void, org.freeplane.core.ui.ActionAcceleratorManager::setKeysetProperty(java.lang.String, java.lang.String):void, org.freeplane.core.ui.ActionAcceleratorManager::saveAcceleratorPresets():void]
org.freeplane.core.ui.ActionAcceleratorManager	[org.freeplane.core.ui.ActionAcceleratorManager::java.util.Properties keysetProps, org.freeplane.core.ui.ActionAcceleratorManager::getShortcut(java.lang.String):java.lang.String, org.freeplane.core.ui.ActionAcceleratorManager::storeAcceleratorPreset(java.io.OutputStream):void, org.freeplane.core.ui.ActionAcceleratorManager::setKeysetProperty(java.lang.String, java.lang.String):void, org.freeplane.core.ui.ActionAcceleratorManager::saveAcceleratorPresets():void, org.freeplane.core.ui.ActionAcceleratorManager::loadAcceleratorPresets():void, org.freeplane.core.ui.ActionAcceleratorManager::getPresetsFile():java.io.File]
org.freeplane.core.util.MenuUtils.MenuEntryTreeBuilder	[org.freeplane.core.util.MenuUtils.MenuEntryTreeBuilder::build(java.lang.String):javax.swing.tree.DefaultMutableTreeNode, org.freeplane.core.util.MenuUtils.MenuEntryTreeBuilder::addChildrenRecursively(javax.swing.tree.DefaultMutableTreeNode, java.lang.Iterable<org.freeplane.core.ui.menubuilders.generic.Entry>):void, org.freeplane.core.util.MenuUtils.MenuEntryTreeBuilder::entryIsActionOrIsSubmenu(org.freeplane.core.ui.menubuilders.generic.Entry, javax.swing.tree.DefaultMutableTreeNode):boolean]
org.freeplane.features.icon.factory.IconStoreFactory	[org.freeplane.features.icon.factory.IconStoreFactory::int order, org.freeplane.features.icon.factory.IconStoreFactory::createMindIcon(java.lang.String):org.freeplane.features.icon.MindIcon, org.freeplane.features.icon.factory.IconStoreFactory::getUserIcons():org.freeplane.features.icon.IconGroup, org.freeplane.features.icon.factory.IconStoreFactory::createStateIcon(java.lang.String, java.lang.String):void]
org.freeplane.features.icon.factory.IconStoreFactory	[org.freeplane.features.icon.factory.IconStoreFactory::getUserIconsFromDirectory(java.io.File, java.lang.String):java.util.List<org.freeplane.features.icon.IconGroup>, org.freeplane.features.icon.factory.IconStoreFactory::hasValidIconFileExtension(java.lang.String):boolean, org.freeplane.features.icon.factory.IconStoreFactory::getIconFileNameWithoutExtension(java.lang.String):java.lang.String]
org.freeplane.features.mode.mindmapmode.MModeController	[org.freeplane.features.mode.mindmapmode.MModeController::org.freeplane.features.mode.mindmapmode.RedoAction redo, org.freeplane.features.mode.mindmapmode.MModeController::org.freeplane.features.mode.mindmapmode.UndoAction undo, org.freeplane.features.mode.mindmapmode.MModeController::createActions():void]
org.freeplane.features.note.mindmapmode.MNoteController	[org.freeplane.features.note.mindmapmode.MNoteController::setNoteText(org.freeplane.features.map.NodeModel, java.lang.String):void, org.freeplane.features.note.mindmapmode.MNoteController::setNoteContentType(org.freeplane.features.map.NodeModel, java.lang.String):void, org.freeplane.features.note.mindmapmode.MNoteController::setNote(org.freeplane.features.map.NodeModel, org.freeplane.features.note.NoteModel, org.freeplane.features.note.NoteModel, java.lang.String):void]
org.freeplane.features.note.mindmapmode.MNoteController	[org.freeplane.features.note.mindmapmode.MNoteController::org.freeplane.features.note.mindmapmode.NoteManager noteManager, org.freeplane.features.note.mindmapmode.MNoteController::shutdownController():void, org.freeplane.features.note.mindmapmode.MNoteController::startupController():void, org.freeplane.features.note.mindmapmode.MNoteController::org.freeplane.features.mode.mindmapmode.MModeController modeController, org.freeplane.features.note.mindmapmode.MNoteController::stopEditing():void, org.freeplane.features.note.mindmapmode.MNoteController::hideNotesPanel():void, org.freeplane.features.note.mindmapmode.MNoteController::showNotesPanel():void]
org.freeplane.features.text.mindmapmode.MTextController.EditEventDispatcher	[org.freeplane.features.text.mindmapmode.MTextController.EditEventDispatcher::org.freeplane.features.mode.ModeController modeController, org.freeplane.features.text.mindmapmode.MTextController.EditEventDispatcher::java.awt.Component selectedComponent, org.freeplane.features.text.mindmapmode.MTextController.EditEventDispatcher::uninstall():void, org.freeplane.features.text.mindmapmode.MTextController.EditEventDispatcher::install():void]
org.freeplane.main.application.ColoredIconCreator	[org.freeplane.main.application.ColoredIconCreator::java.util.Map<java.awt.Color,javax.swing.Icon> coloredNoteIcons, org.freeplane.main.application.ColoredIconCreator::java.awt.Image originalImage, org.freeplane.main.application.ColoredIconCreator::createColoredIcon(java.awt.Color):javax.swing.Icon]
org.freeplane.main.application.LastOpenedList	[org.freeplane.main.application.LastOpenedList::java.util.List<org.freeplane.main.application.LastOpenedList.RecentFile> lastOpenedList, org.freeplane.main.application.LastOpenedList::updateList(org.freeplane.features.map.MapModel, java.lang.String):void, org.freeplane.main.application.LastOpenedList::findRecentFileByRestorable(java.lang.String):org.freeplane.main.application.LastOpenedList.RecentFile, org.freeplane.main.application.LastOpenedList::getRestoreables():java.util.List<java.lang.String>]
org.freeplane.n3.nanoxml.XMLWriter	[org.freeplane.n3.nanoxml.XMLWriter::boolean inContent, org.freeplane.n3.nanoxml.XMLWriter::writeEncodedContent(java.lang.String):void, org.freeplane.n3.nanoxml.XMLWriter::writeEncoded(java.lang.String):void]
org.freeplane.view.swing.features.filepreview.ViewerLayoutManager	[org.freeplane.view.swing.features.filepreview.ViewerLayoutManager::org.freeplane.view.swing.features.filepreview.ExternalResource externalResource, org.freeplane.view.swing.features.filepreview.ViewerLayoutManager::calculatePreferredSize():java.awt.Dimension, org.freeplane.view.swing.features.filepreview.ViewerLayoutManager::java.awt.Dimension originalSize]
org.freeplane.view.swing.features.time.mindmapmode.nodelist.TableColumnVisibilityChanger	[org.freeplane.view.swing.features.time.mindmapmode.nodelist.TableColumnVisibilityChanger::int[] originalColumnWidths, org.freeplane.view.swing.features.time.mindmapmode.nodelist.TableColumnVisibilityChanger::getState():java.lang.String, org.freeplane.view.swing.features.time.mindmapmode.nodelist.TableColumnVisibilityChanger::initializeColumnWidths():void]
org.freeplane.view.swing.features.time.mindmapmode.nodelist.TableSorter	[org.freeplane.view.swing.features.time.mindmapmode.nodelist.TableSorter::java.util.List<org.freeplane.view.swing.features.time.mindmapmode.nodelist.TableSorter.Directive> sortingColumns, org.freeplane.view.swing.features.time.mindmapmode.nodelist.TableSorter::cancelSorting():void, org.freeplane.view.swing.features.time.mindmapmode.nodelist.TableSorter::setSortingStatus(int, int):void, org.freeplane.view.swing.features.time.mindmapmode.nodelist.TableSorter::getDirective(int):org.freeplane.view.swing.features.time.mindmapmode.nodelist.TableSorter.Directive, org.freeplane.view.swing.features.time.mindmapmode.nodelist.TableSorter::getHeaderRendererIcon(int, int):javax.swing.Icon, org.freeplane.view.swing.features.time.mindmapmode.nodelist.TableSorter::getSortingStatus(int):int, org.freeplane.view.swing.features.time.mindmapmode.nodelist.TableSorter::isSorting():boolean]
org.freeplane.view.swing.features.time.mindmapmode.nodelist.TableSorter	[org.freeplane.view.swing.features.time.mindmapmode.nodelist.TableSorter::int[] modelToView, org.freeplane.view.swing.features.time.mindmapmode.nodelist.TableSorter::org.freeplane.view.swing.features.time.mindmapmode.nodelist.TableSorter.Row[] viewToModel, org.freeplane.view.swing.features.time.mindmapmode.nodelist.TableSorter::clearSortingState():void, org.freeplane.view.swing.features.time.mindmapmode.nodelist.TableSorter::getViewToModel():org.freeplane.view.swing.features.time.mindmapmode.nodelist.TableSorter.Row[], org.freeplane.view.swing.features.time.mindmapmode.nodelist.TableSorter::getModelToView():int[], org.freeplane.view.swing.features.time.mindmapmode.nodelist.TableSorter::modelIndex(int):int]
org.freeplane.view.swing.features.time.mindmapmode.nodelist.TagsHolder	[org.freeplane.view.swing.features.time.mindmapmode.nodelist.TagsHolder::org.freeplane.features.map.NodeModel node, org.freeplane.view.swing.features.time.mindmapmode.nodelist.TagsHolder::boolean showsTagCategories, org.freeplane.view.swing.features.time.mindmapmode.nodelist.TagsHolder::initialize():void]
org.freeplane.view.swing.map.VerticalNodeViewLayoutStrategy	[org.freeplane.view.swing.map.VerticalNodeViewLayoutStrategy::org.freeplane.view.swing.map.StepFunction leftBottomBoundary, org.freeplane.view.swing.map.VerticalNodeViewLayoutStrategy::org.freeplane.view.swing.map.StepFunction rightBottomBoundary, org.freeplane.view.swing.map.VerticalNodeViewLayoutStrategy::calculateBottomBoundary(int, int, int, int, int):org.freeplane.view.swing.map.StepFunction]
org.freeplane.core.ui.AntiAliasingConfigurator	[org.freeplane.core.ui.AntiAliasingConfigurator::javax.swing.Timer repaintTimer, org.freeplane.core.ui.AntiAliasingConfigurator::stopRepaintTimer():void, org.freeplane.core.ui.AntiAliasingConfigurator::int repaintDelay, org.freeplane.core.ui.AntiAliasingConfigurator::boolean isRepaintScheduled, org.freeplane.core.ui.AntiAliasingConfigurator::boolean isRepaintInProgress, org.freeplane.core.ui.AntiAliasingConfigurator::java.awt.Rectangle repaintedClipBounds, org.freeplane.core.ui.AntiAliasingConfigurator::javax.swing.JComponent component, org.freeplane.core.ui.AntiAliasingConfigurator::managesPaint(java.awt.Graphics2D):boolean, org.freeplane.core.ui.AntiAliasingConfigurator::withAntialias(java.awt.Graphics2D, java.lang.Runnable):void, org.freeplane.core.ui.AntiAliasingConfigurator::restartRepaintTimer():void, org.freeplane.core.ui.AntiAliasingConfigurator::java.awt.Dimension lastPaintedComponentSize, org.freeplane.core.ui.AntiAliasingConfigurator::java.awt.Point lastComponentLocation]
org.freeplane.features.map.FoldingController.FoldLevelChanger	[org.freeplane.features.map.FoldingController.FoldLevelChanger::org.freeplane.features.filter.Filter filter, org.freeplane.features.map.FoldingController.FoldLevelChanger::foldOneStage(org.freeplane.features.map.NodeModel):void, org.freeplane.features.map.FoldingController.FoldLevelChanger::foldAll(org.freeplane.features.map.NodeModel, int):void, org.freeplane.features.map.FoldingController.FoldLevelChanger::foldStageN(org.freeplane.features.map.NodeModel, int):void, org.freeplane.features.map.FoldingController.FoldLevelChanger::unfoldStageN(org.freeplane.features.map.NodeModel, int):void, org.freeplane.features.map.FoldingController.FoldLevelChanger::unfoldAll(org.freeplane.features.map.NodeModel):void, org.freeplane.features.map.FoldingController.FoldLevelChanger::getMaxDepth(org.freeplane.features.map.NodeModel):int, org.freeplane.features.map.FoldingController.FoldLevelChanger::getMinDepth(org.freeplane.features.map.NodeModel):int, org.freeplane.features.map.FoldingController.FoldLevelChanger::unfoldOneStage(org.freeplane.features.map.NodeModel):void, org.freeplane.features.map.FoldingController.FoldLevelChanger::depth(org.freeplane.features.map.NodeModel, int):int, org.freeplane.features.map.FoldingController.FoldLevelChanger::setFolded(org.freeplane.features.map.NodeModel, boolean):void, org.freeplane.features.map.FoldingController.FoldLevelChanger::org.freeplane.features.map.IMapSelection selection]
org.freeplane.features.icon.IconController	[org.freeplane.features.icon.IconController::java.util.Collection<org.freeplane.features.icon.IStateIconProvider> stateIconProviders, org.freeplane.features.icon.IconController::removeStateIconProvider(org.freeplane.features.icon.IStateIconProvider):boolean, org.freeplane.features.icon.IconController::install(org.freeplane.features.mode.ModeController):void, org.freeplane.features.icon.IconController::getStateIcons(org.freeplane.features.map.NodeModel):java.util.Collection<org.freeplane.features.icon.UIIcon>, org.freeplane.features.icon.IconController::org.freeplane.features.mode.ModeController modeController, org.freeplane.features.icon.IconController::getTagIcons(org.freeplane.features.map.NodeModel):java.util.List<org.freeplane.core.ui.components.TagIcon>, org.freeplane.features.icon.IconController::getTagFont(org.freeplane.features.map.NodeModel):java.awt.Font, org.freeplane.features.icon.IconController::getTagComponentAlignment(org.freeplane.features.map.NodeModel):org.freeplane.api.HorizontalTextAlignment, org.freeplane.features.icon.IconController::getTagBackgroundColor(org.freeplane.features.map.NodeModel):java.awt.Color, org.freeplane.features.icon.IconController::getTagTextColor(org.freeplane.features.map.NodeModel):java.awt.Color, org.freeplane.features.icon.IconController::getTagIcons(org.freeplane.features.map.NodeModel, boolean):java.util.List<org.freeplane.core.ui.components.TagIcon>, org.freeplane.features.icon.IconController::getIconSize(org.freeplane.features.map.NodeModel, org.freeplane.features.styles.LogicalStyleController.StyleOption):org.freeplane.api.Quantity<org.freeplane.api.LengthUnit>, org.freeplane.features.icon.IconController::getStyleIconSize(org.freeplane.features.map.MapModel, java.util.Collection<org.freeplane.features.styles.IStyle>):org.freeplane.api.Quantity<org.freeplane.api.LengthUnit>, org.freeplane.features.icon.IconController::tagIcon(org.freeplane.features.icon.Tag, java.awt.Font, java.awt.Color, java.awt.Color, boolean, java.lang.String):org.freeplane.core.ui.components.TagIcon, org.freeplane.features.icon.IconController::getTags(org.freeplane.features.map.NodeModel):java.util.List<org.freeplane.features.icon.Tag>]
org.freeplane.view.swing.map.edge.EdgeView	[org.freeplane.view.swing.map.edge.EdgeView::java.awt.Color color, org.freeplane.view.swing.map.edge.EdgeView::getColor():java.awt.Color, org.freeplane.view.swing.map.edge.EdgeView::getColor(java.awt.Graphics2D):java.awt.Color, org.freeplane.view.swing.map.edge.EdgeView::java.lang.Integer width, org.freeplane.view.swing.map.edge.EdgeView::getWidth():int, org.freeplane.view.swing.map.edge.EdgeView::getStroke():java.awt.Stroke, org.freeplane.view.swing.map.edge.EdgeView::int[] dash, org.freeplane.view.swing.map.edge.EdgeView::getDash():int[], org.freeplane.view.swing.map.edge.EdgeView::getStroke(float):java.awt.Stroke]
org.freeplane.view.swing.map.edge.EdgeView	[org.freeplane.view.swing.map.edge.EdgeView::java.awt.Color color, org.freeplane.view.swing.map.edge.EdgeView::getColor():java.awt.Color, org.freeplane.view.swing.map.edge.EdgeView::getColor(java.awt.Graphics2D):java.awt.Color, org.freeplane.view.swing.map.edge.EdgeView::java.lang.Integer width, org.freeplane.view.swing.map.edge.EdgeView::getWidth():int, org.freeplane.view.swing.map.edge.EdgeView::getStroke():java.awt.Stroke]
org.freeplane.core.resources.WindowConfigurationStorage	[org.freeplane.core.resources.WindowConfigurationStorage::int height, org.freeplane.core.resources.WindowConfigurationStorage::int width, org.freeplane.core.resources.WindowConfigurationStorage::int x, org.freeplane.core.resources.WindowConfigurationStorage::int y, org.freeplane.core.resources.WindowConfigurationStorage::marshall():java.lang.String, org.freeplane.core.resources.WindowConfigurationStorage::storeDialogPositions(javax.swing.JDialog, java.lang.String):void, org.freeplane.core.resources.WindowConfigurationStorage::unmarschall(java.lang.String, javax.swing.JDialog):org.freeplane.n3.nanoxml.XMLElement]
org.freeplane.core.ui.menubuilders.generic.RecursiveMenuStructureProcessor	[org.freeplane.core.ui.menubuilders.generic.RecursiveMenuStructureProcessor::java.util.Map<java.lang.String,org.freeplane.core.ui.menubuilders.generic.BuilderDestroyerPair> visitors, org.freeplane.core.ui.menubuilders.generic.RecursiveMenuStructureProcessor::java.util.Map<java.lang.String,java.lang.String> subtreeDefaultVisitors, org.freeplane.core.ui.menubuilders.generic.RecursiveMenuStructureProcessor::forChildren(org.freeplane.core.ui.menubuilders.generic.Entry, org.freeplane.core.ui.menubuilders.generic.Entry):org.freeplane.core.ui.menubuilders.generic.RecursiveMenuStructureProcessor, org.freeplane.core.ui.menubuilders.generic.RecursiveMenuStructureProcessor::explicitDefaultBuilder(java.lang.String):org.freeplane.core.ui.menubuilders.generic.BuilderDestroyerPair, org.freeplane.core.ui.menubuilders.generic.RecursiveMenuStructureProcessor::findSubtreeChildrenDefaultBuilder(org.freeplane.core.ui.menubuilders.generic.Entry, org.freeplane.core.ui.menubuilders.generic.Entry):org.freeplane.core.ui.menubuilders.generic.BuilderDestroyerPair, org.freeplane.core.ui.menubuilders.generic.RecursiveMenuStructureProcessor::explicitDefaultBuilderEntry(org.freeplane.core.ui.menubuilders.generic.Entry, org.freeplane.core.ui.menubuilders.generic.Entry):org.freeplane.core.ui.menubuilders.generic.Entry, org.freeplane.core.ui.menubuilders.generic.RecursiveMenuStructureProcessor::setSubtreeDefaultBuilderPair(java.lang.String, java.lang.String):void]
org.freeplane.features.icon.mindmapmode.TagCategoryEditor	[org.freeplane.features.icon.mindmapmode.TagCategoryEditor::javax.swing.JDialog dialog, org.freeplane.features.icon.mindmapmode.TagCategoryEditor::show():void, org.freeplane.features.icon.mindmapmode.TagCategoryEditor::confirmedSubmit():void, org.freeplane.features.icon.mindmapmode.TagCategoryEditor::close():boolean, org.freeplane.features.icon.mindmapmode.TagCategoryEditor::boolean contentWasModified, org.freeplane.features.icon.mindmapmode.TagCategoryEditor::org.freeplane.features.map.MapModel map]
org.freeplane.core.resources.components.PathProperty	[org.freeplane.core.resources.components.PathProperty::boolean isDir, org.freeplane.core.resources.components.PathProperty::java.lang.String[] suffixes, org.freeplane.core.resources.components.PathProperty::java.lang.String value, org.freeplane.core.resources.components.PathProperty::createFileChooser():org.freeplane.api.swing.JFileChooser]
org.freeplane.core.ui.IndexedTree	[org.freeplane.core.ui.IndexedTree::addElement(java.lang.Object, java.lang.Object, java.lang.Object, int):javax.swing.tree.DefaultMutableTreeNode, org.freeplane.core.ui.IndexedTree::get(java.lang.Object):javax.swing.tree.DefaultMutableTreeNode, org.freeplane.core.ui.IndexedTree::getNode(java.lang.Object):javax.swing.tree.DefaultMutableTreeNode, org.freeplane.core.ui.IndexedTree::removeChildElements(java.lang.Object):void]
org.freeplane.core.ui.components.PersistentEditableComboBox	[org.freeplane.core.ui.components.PersistentEditableComboBox::java.lang.String pStorageKey, org.freeplane.core.ui.components.PersistentEditableComboBox::addUrl(java.lang.String):void, org.freeplane.core.ui.components.PersistentEditableComboBox::boolean sendExternalEvents, org.freeplane.core.ui.components.PersistentEditableComboBox::setText(java.lang.String):void]
org.freeplane.core.ui.components.html.ScaledHTML.Renderer	[org.freeplane.core.ui.components.html.ScaledHTML.Renderer::float initialWidth, org.freeplane.core.ui.components.html.ScaledHTML.Renderer::getPreferredWidth():float, org.freeplane.core.ui.components.html.ScaledHTML.Renderer::float initialHeight, org.freeplane.core.ui.components.html.ScaledHTML.Renderer::setWidth(int):void, org.freeplane.core.ui.components.html.ScaledHTML.Renderer::initialize():void, org.freeplane.core.ui.components.html.ScaledHTML.Renderer::resetWidth():void]
org.freeplane.features.commandsearch.MenuStructureIndexer	[org.freeplane.features.commandsearch.MenuStructureIndexer::org.freeplane.core.ui.menubuilders.generic.EntryAccessor entryAccessor, org.freeplane.features.commandsearch.MenuStructureIndexer::translateMenuItemComponent(org.freeplane.core.ui.menubuilders.generic.Entry):java.lang.String, org.freeplane.features.commandsearch.MenuStructureIndexer::loadMenuItems():void, org.freeplane.features.commandsearch.MenuStructureIndexer::computePath(org.freeplane.core.ui.menubuilders.generic.Entry, java.lang.String, boolean):java.lang.String, org.freeplane.features.commandsearch.MenuStructureIndexer::contributesToPath(org.freeplane.core.ui.menubuilders.generic.Entry):boolean]
org.freeplane.features.icon.mindmapmode.TagEditor	[org.freeplane.features.icon.mindmapmode.TagEditor::javax.swing.JTextField tagCategorySeparatorField, org.freeplane.features.icon.mindmapmode.TagEditor::getTagCategorySeparator():java.lang.String, org.freeplane.features.icon.mindmapmode.TagEditor::getCurrentTags():java.util.List<org.freeplane.features.icon.Tag>, org.freeplane.features.icon.mindmapmode.TagEditor::updateTagCategorySeparator():void, org.freeplane.features.icon.mindmapmode.TagEditor::toTableEvent(java.awt.event.ActionEvent):java.awt.event.ActionEvent, org.freeplane.features.icon.mindmapmode.TagEditor::collectSelectedTags():java.util.stream.Stream<org.freeplane.features.icon.Tag>, org.freeplane.features.icon.mindmapmode.TagEditor::insertTags():void, org.freeplane.features.icon.mindmapmode.TagEditor::getTableModel():org.freeplane.features.icon.mindmapmode.TagEditor.TagsWrapper, org.freeplane.features.icon.mindmapmode.TagEditor::sortSelectedTags():void, org.freeplane.features.icon.mindmapmode.TagEditor::deleteTags():void, org.freeplane.features.icon.mindmapmode.TagEditor::selectRowsAfterUpdate(javax.swing.event.TableModelEvent):void]
org.freeplane.features.icon.mindmapmode.TagEditor	[org.freeplane.features.icon.mindmapmode.TagEditor::org.freeplane.core.resources.components.JColorButton colorButton, org.freeplane.features.icon.mindmapmode.TagEditor::javax.swing.Action modifyColorAction, org.freeplane.features.icon.mindmapmode.TagEditor::updateColorButton(javax.swing.event.ListSelectionEvent):void, org.freeplane.features.icon.mindmapmode.TagEditor::modifyTagColor():void, org.freeplane.features.icon.mindmapmode.TagEditor::updateColorButton():void]
org.freeplane.view.swing.map.MapScroller	[org.freeplane.view.swing.map.MapScroller::boolean showsSelectedAfterScroll, org.freeplane.view.swing.map.MapScroller::showSelectedAfterScroll():void, org.freeplane.view.swing.map.MapScroller::keepShowingSelectedAfterScroll():void, org.freeplane.view.swing.map.MapScroller::scrollNodeTreeToVisible(org.freeplane.view.swing.map.NodeView):void]
org.freeplane.view.swing.map.attribute.AttributePopupMenu	[org.freeplane.view.swing.map.attribute.AttributePopupMenu::javax.swing.JMenuItem delete, org.freeplane.view.swing.map.attribute.AttributePopupMenu::getDelete():javax.swing.JMenuItem, org.freeplane.view.swing.map.attribute.AttributePopupMenu::getDown():javax.swing.JMenuItem, org.freeplane.view.swing.map.attribute.AttributePopupMenu::getUp():javax.swing.JMenuItem, org.freeplane.view.swing.map.attribute.AttributePopupMenu::javax.swing.JMenuItem down, org.freeplane.view.swing.map.attribute.AttributePopupMenu::javax.swing.JMenuItem up]
org.freeplane.view.swing.map.overview.MapViewPane	[org.freeplane.view.swing.map.overview.MapViewPane::javax.swing.JScrollPane mapViewScrollPane, org.freeplane.view.swing.map.overview.MapViewPane::convertOriginByAttachPoint(java.awt.Rectangle):void, org.freeplane.view.swing.map.overview.MapViewPane::updateMapOverviewAttachPoint(org.freeplane.view.swing.map.overview.MapOverviewAttachPoint):void, org.freeplane.view.swing.map.overview.MapViewPane::setMapOverviewBounds(java.awt.Rectangle, boolean):void]
