org.isf.utils.excel.ExcelExporter	[org.isf.utils.excel.ExcelExporter::org.apache.poi.ss.usermodel.Workbook workbook, org.isf.utils.excel.ExcelExporter::org.apache.poi.ss.usermodel.CellStyle headerStyle, org.isf.utils.excel.ExcelExporter::org.apache.poi.ss.usermodel.CreationHelper createHelper, org.isf.utils.excel.ExcelExporter::exportTableToExcel(javax.swing.JTable, java.io.File):void, org.isf.utils.excel.ExcelExporter::exportResultsetToExcel(java.sql.ResultSet, java.io.File):void, org.isf.utils.excel.ExcelExporter::exportDataToExcel(java.util.Collection, java.io.File):void, org.isf.utils.excel.ExcelExporter::exportTableToExcelOLD(javax.swing.JTable, java.io.File):void, org.isf.utils.excel.ExcelExporter::exportResultsetToExcelOLD(java.sql.ResultSet, java.io.File):void, org.isf.utils.excel.ExcelExporter::exportDataToExcelOLD(java.util.Collection, java.io.File):void, org.isf.utils.excel.ExcelExporter::initStyles():void, org.isf.utils.excel.ExcelExporter::setValueForExcel(org.apache.poi.ss.usermodel.Cell, java.lang.Object):void, org.isf.utils.excel.ExcelExporter::setValueForExcelOLD(org.apache.poi.hssf.usermodel.HSSFCell, java.lang.Object):void, org.isf.utils.excel.ExcelExporter::org.apache.poi.ss.usermodel.CellStyle doubleStyle, org.isf.utils.excel.ExcelExporter::org.apache.poi.ss.usermodel.CellStyle dateStyle, org.isf.utils.excel.ExcelExporter::org.apache.poi.ss.usermodel.CellStyle dateTimeStyle, org.isf.utils.excel.ExcelExporter::org.apache.poi.ss.usermodel.CellStyle bigDecimalStyle]
org.isf.utils.excel.ExcelExporter	[org.isf.utils.excel.ExcelExporter::java.nio.charset.CharsetEncoder encoder, org.isf.utils.excel.ExcelExporter::exportResultsetToCSV(java.sql.ResultSet, java.io.File, java.lang.String):void, org.isf.utils.excel.ExcelExporter::java.util.Locale currentLocale, org.isf.utils.excel.ExcelExporter::exportTableToCSV(javax.swing.JTable, java.io.File, java.lang.String):void, org.isf.utils.excel.ExcelExporter::writeBOM(java.io.FileOutputStream):void]
org.isf.lab.manager.LabManager	[org.isf.lab.manager.LabManager::org.isf.lab.service.LabIoOperations ioOperations, org.isf.lab.manager.LabManager::getLaboratoryForPrint(java.lang.String, java.time.LocalDateTime, java.time.LocalDateTime):java.util.List<org.isf.lab.model.LaboratoryForPrint>, org.isf.lab.manager.LabManager::setLabMultipleResults(java.util.List<org.isf.lab.model.LaboratoryForPrint>):void, org.isf.lab.manager.LabManager::setPatientConsistency(org.isf.lab.model.Laboratory):void, org.isf.lab.manager.LabManager::validateLaboratory(org.isf.lab.model.Laboratory):void, org.isf.lab.manager.LabManager::newLaboratory(org.isf.lab.model.Laboratory, java.util.List<java.lang.String>):boolean, org.isf.lab.manager.LabManager::newLaboratory2(org.isf.lab.model.Laboratory, java.util.List<org.isf.lab.model.LaboratoryRow>):boolean, org.isf.lab.manager.LabManager::updateLaboratory(org.isf.lab.model.Laboratory, java.util.List<java.lang.String>):boolean, org.isf.lab.manager.LabManager::newLaboratory(java.util.List<org.isf.lab.model.Laboratory>, java.util.List<java.util.List<java.lang.String>>):boolean, org.isf.lab.manager.LabManager::newLaboratory2(java.util.List<org.isf.lab.model.Laboratory>, java.util.List<java.util.List<org.isf.lab.model.LaboratoryRow>>):boolean]
org.isf.lab.manager.LabManager	[org.isf.lab.manager.LabManager::java.util.HashMap<java.lang.String,java.lang.String> materialHashMap, org.isf.lab.manager.LabManager::getMaterialTranslated(java.lang.String):java.lang.String, org.isf.lab.manager.LabManager::buildMaterialHashMap():void, org.isf.lab.manager.LabManager::getMaterialKey(java.lang.String):java.lang.String, org.isf.lab.manager.LabManager::getMaterialList():java.util.List<java.lang.String>]
org.isf.lab.manager.LabManager	[org.isf.lab.manager.LabManager::org.isf.lab.service.LabIoOperations ioOperations, org.isf.lab.manager.LabManager::getLaboratoryForPrint(java.lang.String, java.time.LocalDateTime, java.time.LocalDateTime):java.util.List<org.isf.lab.model.LaboratoryForPrint>, org.isf.lab.manager.LabManager::setLabMultipleResults(java.util.List<org.isf.lab.model.LaboratoryForPrint>):void]
org.isf.lab.manager.LabManager	[org.isf.lab.manager.LabManager::setPatientConsistency(org.isf.lab.model.Laboratory):void, org.isf.lab.manager.LabManager::validateLaboratory(org.isf.lab.model.Laboratory):void, org.isf.lab.manager.LabManager::newLaboratory(org.isf.lab.model.Laboratory, java.util.List<java.lang.String>):boolean, org.isf.lab.manager.LabManager::newLaboratory2(org.isf.lab.model.Laboratory, java.util.List<org.isf.lab.model.LaboratoryRow>):boolean, org.isf.lab.manager.LabManager::updateLaboratory(org.isf.lab.model.Laboratory, java.util.List<java.lang.String>):boolean]
org.isf.patient.manager.PatientBrowserManager	[org.isf.patient.manager.PatientBrowserManager::org.isf.patient.service.PatientIoOperations ioOperations, org.isf.patient.manager.PatientBrowserManager::savePatient(org.isf.patient.model.Patient):org.isf.patient.model.Patient, org.isf.patient.manager.PatientBrowserManager::validatePatient(org.isf.patient.model.Patient):void, org.isf.patient.manager.PatientBrowserManager::checkAge(org.isf.patient.model.Patient):boolean, org.isf.patient.manager.PatientBrowserManager::mergePatient(org.isf.patient.model.Patient, org.isf.patient.model.Patient):boolean, org.isf.patient.manager.PatientBrowserManager::org.isf.admission.manager.AdmissionBrowserManager admissionManager, org.isf.patient.manager.PatientBrowserManager::org.isf.accounting.manager.BillBrowserManager billManager, org.isf.patient.manager.PatientBrowserManager::validateMergePatients(org.isf.patient.model.Patient, org.isf.patient.model.Patient):void]
org.isf.patient.manager.PatientBrowserManager	[org.isf.patient.manager.PatientBrowserManager::org.isf.admission.manager.AdmissionBrowserManager admissionManager, org.isf.patient.manager.PatientBrowserManager::org.isf.accounting.manager.BillBrowserManager billManager, org.isf.patient.manager.PatientBrowserManager::validateMergePatients(org.isf.patient.model.Patient, org.isf.patient.model.Patient):void]
org.isf.patient.manager.PatientBrowserManager	[org.isf.patient.manager.PatientBrowserManager::java.util.LinkedHashMap<java.lang.String,java.lang.String> professionHashMap, org.isf.patient.manager.PatientBrowserManager::buildProfessionHashMap():void, org.isf.patient.manager.PatientBrowserManager::getProfessionList():java.lang.String[], org.isf.patient.manager.PatientBrowserManager::getProfessionTranslated(java.lang.String):java.lang.String, org.isf.patient.manager.PatientBrowserManager::getProfessionKey(java.lang.String):java.lang.String]
org.isf.patient.manager.PatientBrowserManager	[org.isf.patient.manager.PatientBrowserManager::java.util.LinkedHashMap<java.lang.String,java.lang.String> maritalHashMap, org.isf.patient.manager.PatientBrowserManager::buildMaritalHashMap():void, org.isf.patient.manager.PatientBrowserManager::getMaritalList():java.lang.String[], org.isf.patient.manager.PatientBrowserManager::getMaritalTranslated(java.lang.String):java.lang.String, org.isf.patient.manager.PatientBrowserManager::getMaritalKey(java.lang.String):java.lang.String]
org.isf.patient.manager.PatientBrowserManager	[org.isf.patient.manager.PatientBrowserManager::org.isf.patient.service.PatientIoOperations ioOperations, org.isf.patient.manager.PatientBrowserManager::savePatient(org.isf.patient.model.Patient):org.isf.patient.model.Patient, org.isf.patient.manager.PatientBrowserManager::validatePatient(org.isf.patient.model.Patient):void, org.isf.patient.manager.PatientBrowserManager::checkAge(org.isf.patient.model.Patient):boolean, org.isf.patient.manager.PatientBrowserManager::mergePatient(org.isf.patient.model.Patient, org.isf.patient.model.Patient):boolean]
org.isf.menu.service.MenuIoOperations	[org.isf.menu.service.MenuIoOperations::org.isf.menu.service.UserGroupIoOperationRepository groupRepository, org.isf.menu.service.MenuIoOperations::isGroupNamePresent(java.lang.String):boolean, org.isf.menu.service.MenuIoOperations::newUserGroup(org.isf.menu.model.UserGroup):boolean, org.isf.menu.service.MenuIoOperations::org.isf.menu.service.GroupMenuIoOperationRepository groupMenuRepository, org.isf.menu.service.MenuIoOperations::setGroupMenu(org.isf.menu.model.UserGroup, java.util.List<org.isf.menu.model.UserMenuItem>, boolean):boolean, org.isf.menu.service.MenuIoOperations::deleteGroupMenu(org.isf.menu.model.UserGroup):boolean, org.isf.menu.service.MenuIoOperations::deleteGroup(org.isf.menu.model.UserGroup):boolean, org.isf.menu.service.MenuIoOperations::updateUserGroup(org.isf.menu.model.UserGroup):boolean, org.isf.menu.service.MenuIoOperations::insertGroupMenu(org.isf.menu.model.UserGroup, org.isf.menu.model.UserMenuItem, boolean):boolean, org.isf.menu.service.MenuIoOperations::getMenu(org.isf.menu.model.User):java.util.List<org.isf.menu.model.UserMenuItem>, org.isf.menu.service.MenuIoOperations::getGroupMenu(org.isf.menu.model.UserGroup):java.util.List<org.isf.menu.model.UserMenuItem>, org.isf.menu.service.MenuIoOperations::org.isf.menu.service.UserMenuItemIoOperationRepository menuRepository]
org.isf.menu.service.MenuIoOperations	[org.isf.menu.service.MenuIoOperations::org.isf.menu.service.UserGroupIoOperationRepository groupRepository, org.isf.menu.service.MenuIoOperations::isGroupNamePresent(java.lang.String):boolean, org.isf.menu.service.MenuIoOperations::newUserGroup(org.isf.menu.model.UserGroup):boolean, org.isf.menu.service.MenuIoOperations::org.isf.menu.service.GroupMenuIoOperationRepository groupMenuRepository, org.isf.menu.service.MenuIoOperations::setGroupMenu(org.isf.menu.model.UserGroup, java.util.List<org.isf.menu.model.UserMenuItem>, boolean):boolean, org.isf.menu.service.MenuIoOperations::deleteGroupMenu(org.isf.menu.model.UserGroup):boolean, org.isf.menu.service.MenuIoOperations::deleteGroup(org.isf.menu.model.UserGroup):boolean, org.isf.menu.service.MenuIoOperations::updateUserGroup(org.isf.menu.model.UserGroup):boolean, org.isf.menu.service.MenuIoOperations::insertGroupMenu(org.isf.menu.model.UserGroup, org.isf.menu.model.UserMenuItem, boolean):boolean]
org.isf.menu.service.MenuIoOperations	[org.isf.menu.service.MenuIoOperations::org.isf.menu.service.UserIoOperationRepository repository, org.isf.menu.service.MenuIoOperations::isUserNamePresent(java.lang.String):boolean, org.isf.menu.service.MenuIoOperations::newUser(org.isf.menu.model.User):boolean, org.isf.menu.service.MenuIoOperations::deleteUser(org.isf.menu.model.User):boolean]
org.isf.menu.service.MenuIoOperations	[org.isf.menu.service.MenuIoOperations::org.isf.menu.service.UserIoOperationRepository repository, org.isf.menu.service.MenuIoOperations::isUserNamePresent(java.lang.String):boolean, org.isf.menu.service.MenuIoOperations::newUser(org.isf.menu.model.User):boolean, org.isf.menu.service.MenuIoOperations::deleteUser(org.isf.menu.model.User):boolean, org.isf.menu.service.MenuIoOperations::getUsrInfo(java.lang.String):java.lang.String, org.isf.menu.service.MenuIoOperations::updateUser(org.isf.menu.model.User):boolean, org.isf.menu.service.MenuIoOperations::updatePassword(org.isf.menu.model.User):boolean]
org.isf.menu.service.MenuIoOperations	[org.isf.menu.service.MenuIoOperations::org.isf.menu.service.UserGroupIoOperationRepository groupRepository, org.isf.menu.service.MenuIoOperations::isGroupNamePresent(java.lang.String):boolean, org.isf.menu.service.MenuIoOperations::newUserGroup(org.isf.menu.model.UserGroup):boolean]
org.isf.medicals.service.MedicalsIoOperations	[org.isf.medicals.service.MedicalsIoOperations::org.isf.medicals.service.MedicalsIoOperationRepository repository, org.isf.medicals.service.MedicalsIoOperations::getMedicals(java.lang.String):java.util.List<org.isf.medicals.model.Medical>, org.isf.medicals.service.MedicalsIoOperations::getMedicals(boolean):java.util.List<org.isf.medicals.model.Medical>, org.isf.medicals.service.MedicalsIoOperations::getMedical(int):org.isf.medicals.model.Medical, org.isf.medicals.service.MedicalsIoOperations::newMedical(org.isf.medicals.model.Medical):boolean, org.isf.medicals.service.MedicalsIoOperations::updateMedical(org.isf.medicals.model.Medical):boolean, org.isf.medicals.service.MedicalsIoOperations::deleteMedical(org.isf.medicals.model.Medical):boolean, org.isf.medicals.service.MedicalsIoOperations::getMedicalsByType(java.lang.String, boolean):java.util.List<org.isf.medicals.model.Medical>, org.isf.medicals.service.MedicalsIoOperations::getMedicals(java.lang.String, boolean):java.util.List<org.isf.medicals.model.Medical>]
org.isf.medicals.service.MedicalsIoOperations	[org.isf.medicals.service.MedicalsIoOperations::org.isf.medicals.service.MedicalsIoOperationRepository repository, org.isf.medicals.service.MedicalsIoOperations::getMedicals(java.lang.String):java.util.List<org.isf.medicals.model.Medical>, org.isf.medicals.service.MedicalsIoOperations::getMedicals(boolean):java.util.List<org.isf.medicals.model.Medical>, org.isf.medicals.service.MedicalsIoOperations::getMedical(int):org.isf.medicals.model.Medical, org.isf.medicals.service.MedicalsIoOperations::newMedical(org.isf.medicals.model.Medical):boolean, org.isf.medicals.service.MedicalsIoOperations::updateMedical(org.isf.medicals.model.Medical):boolean, org.isf.medicals.service.MedicalsIoOperations::deleteMedical(org.isf.medicals.model.Medical):boolean, org.isf.medicals.service.MedicalsIoOperations::getMedicalsByType(java.lang.String, boolean):java.util.List<org.isf.medicals.model.Medical>, org.isf.medicals.service.MedicalsIoOperations::getMedicals(java.lang.String, boolean):java.util.List<org.isf.medicals.model.Medical>, org.isf.medicals.service.MedicalsIoOperations::medicalCheck(org.isf.medicals.model.Medical, boolean):java.util.List<org.isf.medicals.model.Medical>, org.isf.medicals.service.MedicalsIoOperations::medicalExists(org.isf.medicals.model.Medical, boolean):boolean, org.isf.medicals.service.MedicalsIoOperations::productCodeExists(org.isf.medicals.model.Medical, boolean):boolean, org.isf.medicals.service.MedicalsIoOperations::getMedicals(java.lang.String, java.lang.String, boolean):java.util.List<org.isf.medicals.model.Medical>]
org.isf.medicals.service.MedicalsIoOperations	[org.isf.medicals.service.MedicalsIoOperations::org.isf.medicals.service.MedicalsIoOperationRepository repository, org.isf.medicals.service.MedicalsIoOperations::getMedicals(java.lang.String):java.util.List<org.isf.medicals.model.Medical>, org.isf.medicals.service.MedicalsIoOperations::getMedicals(boolean):java.util.List<org.isf.medicals.model.Medical>]
org.isf.medicalstockward.service.MedicalStockWardIoOperations	[org.isf.medicalstockward.service.MedicalStockWardIoOperations::org.isf.medicalstockward.service.MedicalStockWardIoOperationRepository repository, org.isf.medicalstockward.service.MedicalStockWardIoOperations::org.isf.medicalstock.service.LotIoOperationRepository lotRepository, org.isf.medicalstockward.service.MedicalStockWardIoOperations::getCurrentQuantityInWard(org.isf.ward.model.Ward, org.isf.medicals.model.Medical):int, org.isf.medicalstockward.service.MedicalStockWardIoOperations::getCurrentQuantityInWard(org.isf.ward.model.Ward, org.isf.medicalstock.model.Lot):int, org.isf.medicalstockward.service.MedicalStockWardIoOperations::getMedicalsWardTotalQuantity(char):java.util.List<org.isf.medicalstockward.model.MedicalWard>, org.isf.medicalstockward.service.MedicalStockWardIoOperations::getMedicalsWard(char, boolean):java.util.List<org.isf.medicalstockward.model.MedicalWard>]
org.isf.stat.manager.JasperReportsManager	[org.isf.stat.manager.JasperReportsManager::addBundleParameter(java.lang.String, java.util.HashMap<java.lang.String,java.lang.Object>):void, org.isf.stat.manager.JasperReportsManager::addSubReportsBundleParameters(java.lang.String, java.util.HashMap<java.lang.String,java.lang.Object>):void, org.isf.stat.manager.JasperReportsManager::addReportBundleParameter(java.lang.String, java.lang.String, java.util.Map<java.lang.String,java.lang.Object>):void, org.isf.stat.manager.JasperReportsManager::compileJasperFilename(java.lang.String):java.lang.String]
org.isf.accounting.service.AccountingIoOperations	[org.isf.accounting.service.AccountingIoOperations::org.isf.accounting.service.AccountingBillIoOperationRepository billRepository, org.isf.accounting.service.AccountingIoOperations::getBill(int):org.isf.accounting.model.Bill, org.isf.accounting.service.AccountingIoOperations::updateBill(org.isf.accounting.model.Bill):boolean, org.isf.accounting.service.AccountingIoOperations::newBill(org.isf.accounting.model.Bill):int, org.isf.accounting.service.AccountingIoOperations::deleteBill(org.isf.accounting.model.Bill):boolean, org.isf.accounting.service.AccountingIoOperations::org.isf.accounting.service.AccountingBillPaymentIoOperationRepository billPaymentRepository, org.isf.accounting.service.AccountingIoOperations::getPayments(int):java.util.List<org.isf.accounting.model.BillPayments>, org.isf.accounting.service.AccountingIoOperations::getUsers():java.util.List<java.lang.String>, org.isf.accounting.service.AccountingIoOperations::newBillPayments(org.isf.accounting.model.Bill, java.util.List<org.isf.accounting.model.BillPayments>):boolean, org.isf.accounting.service.AccountingIoOperations::getBills(java.util.List<org.isf.accounting.model.BillPayments>):java.util.List<org.isf.accounting.model.Bill>, org.isf.accounting.service.AccountingIoOperations::getPendingBills(int):java.util.List<org.isf.accounting.model.Bill>, org.isf.accounting.service.AccountingIoOperations::getBillsBetweenDatesWhereBillItem(java.time.LocalDateTime, java.time.LocalDateTime, org.isf.accounting.model.BillItems):java.util.List<org.isf.accounting.model.Bill>]
org.isf.accounting.service.AccountingIoOperations	[org.isf.accounting.service.AccountingIoOperations::org.isf.accounting.service.AccountingBillItemsIoOperationRepository billItemsRepository, org.isf.accounting.service.AccountingIoOperations::getItems(int):java.util.List<org.isf.accounting.model.BillItems>, org.isf.accounting.service.AccountingIoOperations::newBillItems(org.isf.accounting.model.Bill, java.util.List<org.isf.accounting.model.BillItems>):boolean]
org.isf.accounting.service.AccountingIoOperations	[org.isf.accounting.service.AccountingIoOperations::org.isf.accounting.service.AccountingBillIoOperationRepository billRepository, org.isf.accounting.service.AccountingIoOperations::getBill(int):org.isf.accounting.model.Bill, org.isf.accounting.service.AccountingIoOperations::updateBill(org.isf.accounting.model.Bill):boolean, org.isf.accounting.service.AccountingIoOperations::newBill(org.isf.accounting.model.Bill):int, org.isf.accounting.service.AccountingIoOperations::deleteBill(org.isf.accounting.model.Bill):boolean]
org.isf.accounting.service.AccountingIoOperations	[org.isf.accounting.service.AccountingIoOperations::org.isf.accounting.service.AccountingBillIoOperationRepository billRepository, org.isf.accounting.service.AccountingIoOperations::getBill(int):org.isf.accounting.model.Bill, org.isf.accounting.service.AccountingIoOperations::updateBill(org.isf.accounting.model.Bill):boolean]
org.isf.admission.service.AdmissionIoOperations	[org.isf.admission.service.AdmissionIoOperations::org.isf.admission.service.AdmissionIoOperationRepository repository, org.isf.admission.service.AdmissionIoOperations::getAdmittedPatients(java.lang.String):java.util.List<org.isf.admission.model.AdmittedPatient>, org.isf.admission.service.AdmissionIoOperations::getAdmission(int):org.isf.admission.model.Admission, org.isf.admission.service.AdmissionIoOperations::newAdmission(org.isf.admission.model.Admission):boolean, org.isf.admission.service.AdmissionIoOperations::updateAdmission(org.isf.admission.model.Admission):boolean, org.isf.admission.service.AdmissionIoOperations::newAdmissionReturnKey(org.isf.admission.model.Admission):int, org.isf.admission.service.AdmissionIoOperations::setDeleted(int):boolean, org.isf.admission.service.AdmissionIoOperations::getUsedWardBed(java.lang.String):int, org.isf.admission.service.AdmissionIoOperations::getNextYProg(java.lang.String):int]
org.isf.dicom.manager.SourceFiles	[org.isf.dicom.manager.SourceFiles::int filesCount, org.isf.dicom.manager.SourceFiles::working():boolean, org.isf.dicom.manager.SourceFiles::int filesLoaded]
org.isf.exa.service.ExamIoOperations	[org.isf.exa.service.ExamIoOperations::org.isf.exa.service.ExamIoOperationRepository repository, org.isf.exa.service.ExamIoOperations::newExam(org.isf.exa.model.Exam):boolean, org.isf.exa.service.ExamIoOperations::updateExam(org.isf.exa.model.Exam):boolean, org.isf.exa.service.ExamIoOperations::isCodePresent(java.lang.String):boolean, org.isf.exa.service.ExamIoOperations::deleteExam(org.isf.exa.model.Exam):boolean, org.isf.exa.service.ExamIoOperations::isKeyPresent(org.isf.exa.model.Exam):boolean, org.isf.exa.service.ExamIoOperations::org.isf.exa.service.ExamRowIoOperationRepository rowRepository, org.isf.exa.service.ExamIoOperations::newExamRow(org.isf.exa.model.ExamRow):boolean, org.isf.exa.service.ExamIoOperations::deleteExamRow(org.isf.exa.model.ExamRow):boolean, org.isf.exa.service.ExamIoOperations::isRowPresent(java.lang.Integer):boolean]
org.isf.exa.service.ExamIoOperations	[org.isf.exa.service.ExamIoOperations::org.isf.exa.service.ExamIoOperationRepository repository, org.isf.exa.service.ExamIoOperations::newExam(org.isf.exa.model.Exam):boolean, org.isf.exa.service.ExamIoOperations::updateExam(org.isf.exa.model.Exam):boolean, org.isf.exa.service.ExamIoOperations::isCodePresent(java.lang.String):boolean, org.isf.exa.service.ExamIoOperations::deleteExam(org.isf.exa.model.Exam):boolean, org.isf.exa.service.ExamIoOperations::isKeyPresent(org.isf.exa.model.Exam):boolean, org.isf.exa.service.ExamIoOperations::org.isf.exa.service.ExamRowIoOperationRepository rowRepository, org.isf.exa.service.ExamIoOperations::newExamRow(org.isf.exa.model.ExamRow):boolean, org.isf.exa.service.ExamIoOperations::deleteExamRow(org.isf.exa.model.ExamRow):boolean, org.isf.exa.service.ExamIoOperations::isRowPresent(java.lang.Integer):boolean, org.isf.exa.service.ExamIoOperations::getExamsByDesc(java.lang.String):java.util.List<org.isf.exa.model.Exam>, org.isf.exa.service.ExamIoOperations::getExamsByExamTypeDesc(java.lang.String):java.util.List<org.isf.exa.model.Exam>]
org.isf.exa.service.ExamIoOperations	[org.isf.exa.service.ExamIoOperations::org.isf.exa.service.ExamRowIoOperationRepository rowRepository, org.isf.exa.service.ExamIoOperations::newExamRow(org.isf.exa.model.ExamRow):boolean, org.isf.exa.service.ExamIoOperations::deleteExamRow(org.isf.exa.model.ExamRow):boolean, org.isf.exa.service.ExamIoOperations::isRowPresent(java.lang.Integer):boolean]
org.isf.exa.service.ExamIoOperations	[org.isf.exa.service.ExamIoOperations::org.isf.exa.service.ExamIoOperationRepository repository, org.isf.exa.service.ExamIoOperations::newExam(org.isf.exa.model.Exam):boolean, org.isf.exa.service.ExamIoOperations::updateExam(org.isf.exa.model.Exam):boolean, org.isf.exa.service.ExamIoOperations::isCodePresent(java.lang.String):boolean]
org.isf.examination.manager.ExaminationBrowserManager	[org.isf.examination.manager.ExaminationBrowserManager::java.util.HashMap<java.lang.String,java.lang.String> bowelDescriptionHashMap, org.isf.examination.manager.ExaminationBrowserManager::buildBowelDescriptionHashMap():void, org.isf.examination.manager.ExaminationBrowserManager::getBowelDescriptionList():java.util.List<java.lang.String>, org.isf.examination.manager.ExaminationBrowserManager::getBowelDescriptionTranslated(java.lang.String):java.lang.String, org.isf.examination.manager.ExaminationBrowserManager::getBowelDescriptionKey(java.lang.String):java.lang.String]
org.isf.examination.manager.ExaminationBrowserManager	[org.isf.examination.manager.ExaminationBrowserManager::java.util.LinkedHashMap<java.lang.String,java.lang.String> auscultationHashMap, org.isf.examination.manager.ExaminationBrowserManager::buildAuscultationHashMap():void, org.isf.examination.manager.ExaminationBrowserManager::getAuscultationList():java.util.List<java.lang.String>, org.isf.examination.manager.ExaminationBrowserManager::getAuscultationTranslated(java.lang.String):java.lang.String, org.isf.examination.manager.ExaminationBrowserManager::getAuscultationKey(java.lang.String):java.lang.String]
org.isf.examination.manager.ExaminationBrowserManager	[org.isf.examination.manager.ExaminationBrowserManager::java.util.HashMap<java.lang.String,java.lang.String> diuresisDescriptionHashMap, org.isf.examination.manager.ExaminationBrowserManager::buildDiuresisDescriptionHashMap():void, org.isf.examination.manager.ExaminationBrowserManager::getDiuresisDescriptionList():java.util.List<java.lang.String>, org.isf.examination.manager.ExaminationBrowserManager::getDiuresisDescriptionTranslated(java.lang.String):java.lang.String, org.isf.examination.manager.ExaminationBrowserManager::getDiuresisDescriptionKey(java.lang.String):java.lang.String, org.isf.examination.manager.ExaminationBrowserManager::validateExamination(org.isf.examination.model.PatientExamination):void, org.isf.examination.manager.ExaminationBrowserManager::java.util.HashMap<java.lang.String,java.lang.String> bowelDescriptionHashMap, org.isf.examination.manager.ExaminationBrowserManager::buildBowelDescriptionHashMap():void, org.isf.examination.manager.ExaminationBrowserManager::getBowelDescriptionList():java.util.List<java.lang.String>, org.isf.examination.manager.ExaminationBrowserManager::getBowelDescriptionTranslated(java.lang.String):java.lang.String, org.isf.examination.manager.ExaminationBrowserManager::getBowelDescriptionKey(java.lang.String):java.lang.String, org.isf.examination.manager.ExaminationBrowserManager::java.util.LinkedHashMap<java.lang.String,java.lang.String> auscultationHashMap, org.isf.examination.manager.ExaminationBrowserManager::buildAuscultationHashMap():void, org.isf.examination.manager.ExaminationBrowserManager::getAuscultationList():java.util.List<java.lang.String>, org.isf.examination.manager.ExaminationBrowserManager::getAuscultationTranslated(java.lang.String):java.lang.String, org.isf.examination.manager.ExaminationBrowserManager::getAuscultationKey(java.lang.String):java.lang.String, org.isf.examination.manager.ExaminationBrowserManager::getFromLastPatientExamination(org.isf.examination.model.PatientExamination):org.isf.examination.model.PatientExamination]
org.isf.examination.manager.ExaminationBrowserManager	[org.isf.examination.manager.ExaminationBrowserManager::java.util.HashMap<java.lang.String,java.lang.String> diuresisDescriptionHashMap, org.isf.examination.manager.ExaminationBrowserManager::buildDiuresisDescriptionHashMap():void, org.isf.examination.manager.ExaminationBrowserManager::getDiuresisDescriptionList():java.util.List<java.lang.String>, org.isf.examination.manager.ExaminationBrowserManager::getDiuresisDescriptionTranslated(java.lang.String):java.lang.String, org.isf.examination.manager.ExaminationBrowserManager::getDiuresisDescriptionKey(java.lang.String):java.lang.String, org.isf.examination.manager.ExaminationBrowserManager::validateExamination(org.isf.examination.model.PatientExamination):void, org.isf.examination.manager.ExaminationBrowserManager::java.util.HashMap<java.lang.String,java.lang.String> bowelDescriptionHashMap, org.isf.examination.manager.ExaminationBrowserManager::buildBowelDescriptionHashMap():void, org.isf.examination.manager.ExaminationBrowserManager::getBowelDescriptionList():java.util.List<java.lang.String>, org.isf.examination.manager.ExaminationBrowserManager::getBowelDescriptionTranslated(java.lang.String):java.lang.String, org.isf.examination.manager.ExaminationBrowserManager::getBowelDescriptionKey(java.lang.String):java.lang.String]
org.isf.sms.providers.textbelt.TextbeltGatewayService	[org.isf.sms.providers.textbelt.TextbeltGatewayService::java.lang.String SERVICE_NAME, org.isf.sms.providers.textbelt.TextbeltGatewayService::java.util.Properties smsProperties, org.isf.sms.providers.textbelt.TextbeltGatewayService::buildHttlClient():org.isf.sms.providers.textbelt.remote.TextbeltGatewayRemoteService, org.isf.sms.providers.textbelt.TextbeltGatewayService::retrieveSessionKey():java.lang.String]
org.isf.therapy.manager.TherapyManager	[org.isf.therapy.manager.TherapyManager::org.isf.therapy.service.TherapyIoOperations ioOperations, org.isf.therapy.manager.TherapyManager::org.isf.patient.manager.PatientBrowserManager patientManager, org.isf.therapy.manager.TherapyManager::deleteAllTherapies(java.lang.Integer):boolean]
org.isf.therapy.manager.TherapyManager	[org.isf.therapy.manager.TherapyManager::org.isf.medicals.manager.MedicalBrowsingManager medManager, org.isf.therapy.manager.TherapyManager::createTherapy(int, int, java.lang.Integer, java.lang.Double, java.time.LocalDateTime, java.time.LocalDateTime, int, int, java.lang.String, boolean, boolean):org.isf.therapy.model.Therapy, org.isf.therapy.manager.TherapyManager::org.isf.medicalstockward.manager.MovWardBrowserManager wardManager, org.isf.therapy.manager.TherapyManager::getTherapies(java.util.List<org.isf.therapy.model.TherapyRow>):java.util.List<org.isf.therapy.model.Therapy>, org.isf.therapy.manager.TherapyManager::prepareSmsFromTherapy(org.isf.therapy.model.Therapy):java.lang.String, org.isf.therapy.manager.TherapyManager::getMedicalsOutOfStock(java.util.List<org.isf.therapy.model.Therapy>):java.util.List<org.isf.medicals.model.Medical>]
org.isf.dicom.model.FileDicom	[org.isf.dicom.model.FileDicom::java.sql.Blob dicomThumbnail, org.isf.dicom.model.FileDicom::setDicomThumbnail(java.awt.image.BufferedImage):void, org.isf.dicom.model.FileDicom::getDicomThumbnailAsImage():java.awt.image.BufferedImage]
org.isf.exa.service.ExamRowIoOperations	[org.isf.exa.service.ExamRowIoOperations::org.isf.exa.service.ExamRowIoOperationRepository rowRepository, org.isf.exa.service.ExamRowIoOperations::getExamsRowByDesc(java.lang.String):java.util.List<org.isf.exa.model.ExamRow>, org.isf.exa.service.ExamRowIoOperations::newExamRow(org.isf.exa.model.ExamRow):boolean, org.isf.exa.service.ExamRowIoOperations::updateExamRow(org.isf.exa.model.ExamRow):boolean, org.isf.exa.service.ExamRowIoOperations::isCodePresent(int):boolean, org.isf.exa.service.ExamRowIoOperations::isRowPresent(java.lang.Integer):boolean, org.isf.exa.service.ExamRowIoOperations::deleteExamRow(org.isf.exa.model.ExamRow):boolean, org.isf.exa.service.ExamRowIoOperations::isKeyPresent(org.isf.exa.model.ExamRow):boolean, org.isf.exa.service.ExamRowIoOperations::getExamRow(int, java.lang.String):java.util.List<org.isf.exa.model.ExamRow>]
org.isf.medicalstock.service.MedicalStockIoOperations	[org.isf.medicalstock.service.MedicalStockIoOperations::org.isf.medicalstock.service.LotIoOperationRepository lotRepository, org.isf.medicalstock.service.MedicalStockIoOperations::generateLotCode():java.lang.String, org.isf.medicalstock.service.MedicalStockIoOperations::lotExists(java.lang.String):boolean]
org.isf.medicalstock.service.MedicalStockIoOperations	[org.isf.medicalstock.service.MedicalStockIoOperations::org.isf.medicals.service.MedicalsIoOperationRepository medicalRepository, org.isf.medicalstock.service.MedicalStockIoOperations::updateMedicalIncomingQuantity(int, double):boolean, org.isf.medicalstock.service.MedicalStockIoOperations::updateMedicalOutcomingQuantity(int, double):boolean]
org.isf.medicalstock.service.MedicalStockIoOperations	[org.isf.medicalstock.service.MedicalStockIoOperations::org.isf.medicalstock.service.MovementIoOperationRepository movRepository, org.isf.medicalstock.service.MedicalStockIoOperations::getMovements(java.lang.String, java.time.LocalDateTime, java.time.LocalDateTime):java.util.List<org.isf.medicalstock.model.Movement>, org.isf.medicalstock.service.MedicalStockIoOperations::getMovements(java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.time.LocalDateTime, java.time.LocalDateTime, java.time.LocalDateTime, java.time.LocalDateTime, java.time.LocalDateTime, java.time.LocalDateTime):java.util.List<org.isf.medicalstock.model.Movement>, org.isf.medicalstock.service.MedicalStockIoOperations::getMovementForPrint(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.time.LocalDateTime, java.time.LocalDateTime, java.lang.String, org.isf.medicalstock.service.MedicalStockIoOperations.MovementOrder):java.util.List<org.isf.medicalstock.model.Movement>, org.isf.medicalstock.service.MedicalStockIoOperations::refNoExists(java.lang.String):boolean]
org.isf.medicalstock.service.MedicalStockIoOperations	[org.isf.medicalstock.service.MedicalStockIoOperations::org.isf.medicalstock.service.MovementIoOperationRepository movRepository, org.isf.medicalstock.service.MedicalStockIoOperations::getMovements(java.lang.String, java.time.LocalDateTime, java.time.LocalDateTime):java.util.List<org.isf.medicalstock.model.Movement>, org.isf.medicalstock.service.MedicalStockIoOperations::getMovements(java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.time.LocalDateTime, java.time.LocalDateTime, java.time.LocalDateTime, java.time.LocalDateTime, java.time.LocalDateTime, java.time.LocalDateTime):java.util.List<org.isf.medicalstock.model.Movement>, org.isf.medicalstock.service.MedicalStockIoOperations::getMovementForPrint(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.time.LocalDateTime, java.time.LocalDateTime, java.lang.String, org.isf.medicalstock.service.MedicalStockIoOperations.MovementOrder):java.util.List<org.isf.medicalstock.model.Movement>, org.isf.medicalstock.service.MedicalStockIoOperations::refNoExists(java.lang.String):boolean, org.isf.medicalstock.service.MedicalStockIoOperations::org.isf.medicalstock.service.LotIoOperationRepository lotRepository, org.isf.medicalstock.service.MedicalStockIoOperations::generateLotCode():java.lang.String, org.isf.medicalstock.service.MedicalStockIoOperations::lotExists(java.lang.String):boolean, org.isf.medicalstock.service.MedicalStockIoOperations::newMovement(org.isf.medicalstock.model.Movement):boolean, org.isf.medicalstock.service.MedicalStockIoOperations::prepareDischargingMovement(org.isf.medicalstock.model.Movement):boolean, org.isf.medicalstock.service.MedicalStockIoOperations::storeMovement(org.isf.medicalstock.model.Movement, java.lang.String):boolean, org.isf.medicalstock.service.MedicalStockIoOperations::updateStockQuantity(org.isf.medicalstock.model.Movement):boolean, org.isf.medicalstock.service.MedicalStockIoOperations::newAutomaticDischargingMovement(org.isf.medicalstock.model.Movement):boolean, org.isf.medicalstock.service.MedicalStockIoOperations::storeLot(java.lang.String, org.isf.medicalstock.model.Lot, org.isf.medicals.model.Medical):boolean, org.isf.medicalstock.service.MedicalStockIoOperations::org.isf.medicals.service.MedicalsIoOperationRepository medicalRepository, org.isf.medicalstock.service.MedicalStockIoOperations::updateMedicalIncomingQuantity(int, double):boolean, org.isf.medicalstock.service.MedicalStockIoOperations::updateMedicalOutcomingQuantity(int, double):boolean, org.isf.medicalstock.service.MedicalStockIoOperations::getLotsByMedical(org.isf.medicals.model.Medical):java.util.List<org.isf.medicalstock.model.Lot>]
org.isf.priceslist.service.PricesListIoOperations	[org.isf.priceslist.service.PricesListIoOperations::org.isf.priceslist.service.PricesListIoOperationRepository pricesListIoOperationRepository, org.isf.priceslist.service.PricesListIoOperations::getLists():java.util.List<org.isf.priceslist.model.PriceList>, org.isf.priceslist.service.PricesListIoOperations::newList(org.isf.priceslist.model.PriceList):boolean, org.isf.priceslist.service.PricesListIoOperations::updateList(org.isf.priceslist.model.PriceList):boolean]
org.isf.therapy.model.TherapyRow	[org.isf.therapy.model.TherapyRow::int notifyInt, org.isf.therapy.model.TherapyRow::isNotify():boolean, org.isf.therapy.model.TherapyRow::setNotify(boolean):void]
org.isf.therapy.model.TherapyRow	[org.isf.therapy.model.TherapyRow::int smsInt, org.isf.therapy.model.TherapyRow::isSms():boolean, org.isf.therapy.model.TherapyRow::setSms(boolean):void]
org.isf.ward.service.WardIoOperations	[org.isf.ward.service.WardIoOperations::org.isf.ward.service.WardIoOperationRepository repository, org.isf.ward.service.WardIoOperations::newWard(org.isf.ward.model.Ward):org.isf.ward.model.Ward, org.isf.ward.service.WardIoOperations::updateWard(org.isf.ward.model.Ward):org.isf.ward.model.Ward, org.isf.ward.service.WardIoOperations::deleteWard(org.isf.ward.model.Ward):boolean, org.isf.ward.service.WardIoOperations::isCodePresent(java.lang.String):boolean, org.isf.ward.service.WardIoOperations::findWard(java.lang.String):org.isf.ward.model.Ward, org.isf.ward.service.WardIoOperations::getWardsNoMaternity():java.util.List<org.isf.ward.model.Ward>, org.isf.ward.service.WardIoOperations::getWards(java.lang.String):java.util.List<org.isf.ward.model.Ward>]
org.isf.xmpp.manager.Interaction	[org.isf.xmpp.manager.Interaction::org.isf.xmpp.service.Server server, org.isf.xmpp.manager.Interaction::sendMessage(org.jivesoftware.smack.MessageListener, java.lang.String, java.lang.String, boolean):void, org.isf.xmpp.manager.Interaction::sendFile(java.lang.String, java.io.File, java.lang.String):void]
org.isf.xmpp.service.Server	[org.isf.xmpp.service.Server::org.jivesoftware.smack.XMPPConnection connection, org.isf.xmpp.service.Server::getRoster():org.jivesoftware.smack.Roster, org.isf.xmpp.service.Server::getChatManager():org.jivesoftware.smack.ChatManager, org.isf.xmpp.service.Server::getUserAddress():java.lang.String, org.isf.xmpp.service.Server::getTransferManager():org.jivesoftware.smackx.filetransfer.FileTransferManager]
org.isf.medicalstock.manager.MovStockInsertingManager	[org.isf.medicalstock.manager.MovStockInsertingManager::org.isf.medicalstock.service.MedicalStockIoOperations ioOperations, org.isf.medicalstock.manager.MovStockInsertingManager::prepareChargingMovement(org.isf.medicalstock.model.Movement, boolean):boolean, org.isf.medicalstock.manager.MovStockInsertingManager::prepareDishargingMovement(org.isf.medicalstock.model.Movement, boolean):boolean, org.isf.medicalstock.manager.MovStockInsertingManager::getLotByMedical(org.isf.medicals.model.Medical):java.util.List<org.isf.medicalstock.model.Lot>, org.isf.medicalstock.manager.MovStockInsertingManager::checkReferenceNumber(java.lang.String):java.util.List<org.isf.utils.exception.model.OHExceptionMessage>, org.isf.medicalstock.manager.MovStockInsertingManager::newMultipleChargingMovements(java.util.List<org.isf.medicalstock.model.Movement>, java.lang.String):boolean, org.isf.medicalstock.manager.MovStockInsertingManager::newMultipleDischargingMovements(java.util.List<org.isf.medicalstock.model.Movement>, java.lang.String):boolean, org.isf.medicalstock.manager.MovStockInsertingManager::isAutomaticLotOut():boolean, org.isf.medicalstock.manager.MovStockInsertingManager::validateMovement(org.isf.medicalstock.model.Movement, boolean):void]
