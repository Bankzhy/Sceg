import csv
import json
import os.path
from pathlib import Path

import pymysql

from common import project_auto_dict, project_path_dict
from graph.pdg_generator import PDGGenerator
from sitter.kast2core import KASTParse

db = pymysql.connect(
    host="47.113.220.80",
    user="root",
    password="Apple3328823%",
    database="sce",
    charset="utf8mb4",  # Use utf8mb4 for full Unicode support
    connect_timeout=50
)

# project_path_dict = {
#     "jgrapht": Path(r"D:\research\code_corpus\jgrapht\jgrapht-core"),
#     "libgdx": Path(r"D:\research\code_corpus\libgdx\gdx"),
#     "freeplane": Path(r"D:\research\code_corpus\freeplane\freeplane\src\main"),
#     "jsprit": Path(r"F:\research\dataset\op\jsprit\jsprit-core\src\main"),
#     "oh": Path(r"F:\research\dataset\op\openhospital-core\src\main\java"),
#     "openrefine": Path(r"D:\research\eval_projects\OpenRefine\main\src"),
#
#     "jedit": Path(r"D:\research\code_corpus\jEdit\org\jedit"),
#     "rxJava": Path(r"D:\research\code_corpus\RxJava\src\main\java"),
#     "junit4": Path(r"D:\research\code_corpus\junit4\src\main"),
#     "mybatis3": Path(r"D:\research\code_corpus\mybatis-3\src\main"),
#     "netty": Path(r"D:\research\code_corpus\netty\codec-base\src\main"),
#     "gephi": Path(r"D:\research\code_corpus\gephi\modules"),
#     "plantuml": Path(r"D:\research\code_corpus\plantuml\src\main"),
#     "groot": Path(r"D:\research\code_corpus\groot\src\main"),
#     "musicBot": Path(r"D:\research\code_corpus\MusicBot\src\main"),
#     "traccar": Path(r"D:\research\code_corpus\traccar\src\main")
# }
# project_auto_dict = {
#     "jedit": Path(r"D:\research\code_corpus\jEdit_auto"),
#     "rxJava": Path(r"D:\research\code_corpus\RxJava_auto"),
#     "junit4": Path(r"D:\research\code_corpus\junit4_auto"),
#     "mybatis3": Path(r"D:\research\code_corpus\mybatis_auto"),
#     "netty": Path(r"D:\research\code_corpus\netty_auto"),
#     "gephi": Path(r"D:\research\code_corpus\gephi_auto"),
#     "plantuml": Path(r"D:\research\code_corpus\plantuml_auto"),
#     "groot": Path(r"D:\research\code_corpus\groot_auto"),
#     "musicBot": Path(r"D:\research\code_corpus\MusicBot_auto"),
#     "traccar": Path(r"D:\research\code_corpus\traccar_auto")
# }

def gen_original_graph(project_name):
    project_path = project_path_dict[project_name]
    ast = KASTParse(project_path, "java")
    ast.setup()
    sr_project = ast.do_parse()
    for program in sr_project.program_list:
        for sr_class in program.class_list:
            for sr_method in sr_class.method_list:
                try:
                    pdg_generator = PDGGenerator(
                        sr_class=sr_class,
                        sr_method=sr_method
                    )
                    pdg_generator.class_list = program.class_list
                    pdg_generator.create_graph()
                    pdg_generator.to_database(db=db, project_name=project_name, group="original")
                except Exception as e:
                    print("Error:")
                    print(e)


def find_extract_lines(method_content, extract_content):
    result = ""
    extract_lines = extract_content.split("\n")
    extract_start_line = extract_lines[0].replace(" ", "")
    extract_second_line = extract_lines[1].replace(" ", "")

    method_lines = method_content.split("\n")
    for index, line in enumerate(method_lines):
        if index < (len(method_lines)-1):
            strip_line = line.replace(" ", "")
            next_strip_line = method_lines[index+1].replace(" ", "")

        if strip_line == extract_start_line and next_strip_line == extract_second_line:
            result = str(index+1)+"-"+str(index+1+len(extract_lines))
    return result

def gen_auto_graph(project_name):
    auto_file_path = project_auto_dict[project_name] / "lm"
    if os.path.exists(auto_file_path) is False:
        os.mkdir(auto_file_path)
    auto_index_path = auto_file_path / "index.csv"
    with open(auto_index_path, mode='r', encoding="utf-8") as file:
        reader = csv.reader(file)
        for index, row in enumerate(reader):
            if index > 0:
                path = auto_file_path / (row[1] + ".java")
                ast = KASTParse(path, "java")
                ast.setup()
                file = open(path, encoding='utf-8')
                file_content = file.read()
                sr_project = ast.do_parse_content(file_content)
                for program in sr_project.program_list:
                    for sr_class in program.class_list:
                        for sr_method in sr_class.method_list:
                            method_path = project_name + "_" + sr_class.class_name + "_" + sr_method.get_method_identifier()

                            if sr_method.method_name == row[2] and method_path == row[6]:
                                # sr_method.method_name = row[4]+"And"+sr_method.method_name

                                extract_lines = find_extract_lines(sr_method.to_string(), row[7])

                                pdg_generator = PDGGenerator(
                                    sr_class=sr_class,
                                    sr_method=sr_method
                                )
                                pdg_generator.create_graph()
                                pdg_generator.to_database(db=db, project_name=project_name+"_auto", group="auto", extract_lines=extract_lines)



def fetch_nodes(code):
    code_content = "class Test {\n   "
    code_content += code + "\n}"

    ast = KASTParse("", "java")
    ast.setup()
    sr_project = ast.do_parse_content(code_content)
    node_list = []
    for program in sr_project.program_list:
        for sr_class in program.class_list:
            for sr_method in sr_class.method_list:
                try:
                    pdg_generator = PDGGenerator(
                        sr_class=sr_class,
                        sr_method=sr_method
                    )
                    pdg_generator.class_list = program.class_list
                    pdg_generator.create_graph()
                    node_list = pdg_generator.node_list
                    # pdg_generator.to_database(db=db, project_name=project_name, group="original")
                except Exception as e:
                    print("Error:")
                    print(e)
    return node_list


def fetch_extract_line_numbers(extract_lines):
    result = []
    exl = extract_lines.split(";")
    for ex in exl:
        if "-" in ex:
            el = ex.split("-")
            new_el = list(range(int(int(el[0])), int(el[1])))
            result.extend(new_el)
        else:
            if ex != "":
                result.append(int(ex))
    return result


def mark_pos_nodes():
    cursor = db.cursor()
    # cursor.execute("SELECT * FROM lm_master where `label`=1 and extract_lines !=''")
    cursor.execute("SELECT * FROM lm_master where lm_id=105957")
    rows = cursor.fetchall()
    print(len(rows))
    exist= [46881,46994,47080,47082,47106,47321,47378,47498,47621,48326,48384,48391,48413,48414,48419,48423,48433,48444,48447,48471,48473,48493,48504,48505,48510,48513,48527,48530,48533,48546,48698,48778,48781,48782,48783,48852,48855,48871,48874,48918,48924,48945,48946,48947,48956,48960,48964,48966,48986,48993,49015,49017,49029,49034,49035,49038,49039,49041,49045,49046,49048,49054,49058,49066,49067,49068,49069,49072,49079,49080,49083,49085,49092,49133,49171,49172,49173,49354,49360,49404,49414,49516,49556,49617,49628,49666,49707,49726,49727,49728,49754,49780,49784,49785,49800,49804,49843,49844,49845,49849,49880,49881,49946,49960,49977,49980,50021,50161,50163,50286,50515,50528,50540,50541,50559,50573,50592,50617,50624,50626,50711,50712,50713,50714,50779,50781,50782,50784,50785,50849,50850,50879,50883,51000,51012,51026,51047,51069,51085,51091,51112,51351,51352,51381,51383,51440,51506,51509,51514,51522,51555,51574,51576,51577,51578,51579,51580,51694,51695,51696,51697,51701,51730,51808,51810,51827,51838,51855,51858,51861,51878,51882,51913,51917,51918,51927,51958,51960,51963,52002,52014,52019,52021,52027,52029,52034,52037,52051,52052,52053,52054,52055,52060,52062,52063,52064,52065,52070,52127,52142,52146,52149,52150,52151,52152,52153,52170,52450,52451,52453,52454,52455,52456,52458,52465,52477,52491,52502,52512,52520,52527,52538,52647,52748,52750,52756,52763,52771,52781,52793,52794,52796,52801,52977,52984,52992,53006,53137,53147,53156,53168,53213,53214,53215,53216,53219,53222,53250,53251,53260,53272,53279,53312,53313,53320,53323,53325,53341,53342,53378,53380,53381,53393,53405,53413,53417,53434,53435,53437,53442,53445,53460,53461,53462,53489,53490,53497,53499,53500,53522,53528,53532,53533,53535,53536,53545,53555,53556,53559,53561,53563,53578,53595,53600,53622,53624,53629,53630,53632,53638,53655,53672,53673,53684,53690,53693,53694,53696,53697,53699,53700,53701,53708,53722,53723,53724,53727,53730,53732,53746,53774,53787,53790,53791,53794,53795,53802,53807,53810,53818,53820,53825,53826,53829,53830,53843,53844,53847,53850,53851,53857,53858,53860,53861,53863,53867,53868,53873,53874,53899,53906,53913,53916,53920,53921,53922,53928,53931,53938,53939,53941,53943,53946,53953,53954,53955,53965,53966,53969,53970,53971,53974,53976,53977,53978,53985,53987,53988,53999,54007,54013,54015,54018,54044,54053,54058,54065,54071,54077,54087,54098,54099,54100,54120,54121,54140,54162,54171,54185,54188,54189,54191,54194,54195,54196,54201,54203,54207,54210,54211,54221,54233,54244,54282,54283,54308,54310,54311,54312,54313,54314,54325,54338,54340,54342,54345,54360,54363,54364,54365,54368,54373,54386,54388,54390,54396,54401,54403,54416,54426,54428,54429,54430,54449,54460,54463,54464,54468,54469,54473,54479,54485,54490,54492,54501,54505,54510,54518,54522,54532,54533,54539,54562,54563,54564,54566,54600,54627,54631,54633,54637,54642,54643,54668,54669,54671,54672,54673,54675,54680,54681,54682,54718,54719,54720,54746,54752,54754,54784,54825,54827,54864,54865,54866,54867,54888,54930,54938,54961,54970,54981,54991,55001,55012,55021,55030,55038,55039,55041,55052,55059,55133,55140,55143,55145,55147,55148,55149,55150,55153,55173,55203,55205,55206,55207,55210,55212,55224,55226,55233,55234,55273,55277,55421,55423,55425,55426,55451,55452,55458,55463,55466,55475,55484,55487,55488,55499,55501,55504,55505,55508,55513,55518,55529,55538,55602,55603,55604,55627,55628,55632,55696,55699,55703,55705,55706,55711,55712,55727,55729,55730,55732,55748,55750,55757,55763,55764,55824,55827,55833,55883,55888,55901,55902,55903,55906,55910,55912,55964,55966,55968,55969,55971,55981,55983,55986,55987,55988,55990,55998,55999,56000,56001,56004,56005,56011,56013,56014,56015,56016,56017,56018,56019,56020,56021,56022,56023,56033,56034,56035,56036,56037,56038,56044,56045,56046,56047,56048,56049,56050,56051,56052,56060,56061,56062,56070,56072,56080,56090,56093,56094,56101,56107,56108,56132,56155,56156,56159,56163,56174,56178,56181,56184,56230,56232,56233,56234,56235,56238,56240,56248,56250,56252,56256,56258,56260,56270,56271,56278,56328,56329,56330,56331,56333,56334,56340,56341,56352,56379,56380,56381,56382,56391,56392,56396,56416,56423,56427,56460,56475,56493,56499,56551,56553,56554,56608,56616,56738,56741,56769,56772,56798,56800,56803,56804,56839,56854,56865,56868,56881,56882,56894,56910,56914,56917,56927,56938,56944,56978,56979,56980,57020,57028,57093,57111,57116,57123,57137,57138,57146,57148,57149,57247,57317,57337,57353,57368,57369,57383,57389,57390,57395,57396,57397,57407,57417,57421,57425,57440,57448,57449,57452,57454,57455,57467,57477,57478,57481,57482,57483,57494,57495,57496,57504,57516,57630,57631,57684,57690,57691,57692,57693,57694,57695,57696,57701,57702,57703,57704,57713,57790,57792,57798,57802,57811,57818,57819,57820,57843,57848,57849,57851,57855,57856,57857,57859,57871,57873,57880,57881,57888,57897,57902,57903,57912,57916,57934,57935,57948,57949,57957,57960,57961,57981,57982,57986,57989,57998,57999,58000,58001,58002,58003,58005,58018,58019,58020,58021,58022,58025,58030,58035,58074,58075,58090,58091,58092,58107,58143,58144,58145,58147,58148,58149,58154,58155,58156,58157,58158,58161,58162,58163,58164,58165,58177,58185,58186,58187,58189,58190,58200,58201,58215,58216,58222,58223,58226,58227,58235,58236,58239,58256,58257,58258,58259,58260,58261,58262,58263,58264,58271,58272,58273,58274,58275,58276,58277,58296,58297,58298,58299,58300,58301,58308,58309,58310,58311,58319,58320,58322,58323,58324,58327,58331,58334,58339,58356,58362,58375,58388,58412,58426,58441,58448,58467,58487,58529,58544,58599,58602,58649,58673,58690,58695,58705,58714,58716,58731,58735,58741,58745,58749,58750,58754,58755,58827,58832,58857,58875,58901,58956,58961,58962,58972,58977,58980,58983,59030,59033,59036,59039,59056,59061,59074,59078,59079,59084,59086,59090,59091,59093,59130,59148,59149,59167,59182,59200,59202,59218,59242,59249,59330,59357,59383,59425,59789,59790,59865,59866,59902,59904,59991,60004,60052,60053,60054,60056,60062,60067,60070,60071,60073,60075,60079,60081,60083,60093,60095,60097,60099,60100,60102,60109,60125,60150,60151,60194,60200,60240,60265,60280,60281,60330,60331,60335,60337,60358,60378,60395,60441,60462,60464,60469,60482,60489,60493,60500,60503,60543,60544,60548,60549,60550,60602,60650,60651,60661,60669,60671,60694,60697,60698,60699,60700,60701,60703,60709,60782,60797,61760,61770,61775,61777,61786,61834,61855,61856,61915,61927,61930,61931,61956,61977,62047,62048,62056,62116,62122,62123,62135,62136,62137,62140,62142,62147,62152,62156,62185,62207,62262,62289,62298,62313,62424,62428,62429,62435,62438,62439,62441,62444,62454,62474,62479,62487,62488,62492,62493,62495,62517,62531,62557,62624,62688,62702,62744,62821,62822,62828,62835,62959,62960,62965,62966,62967,62968,62972,62973,62987,62988,63041,63158,63308,63327,63328,63348,63351,63375,63384,63420,63490,63496,63501,63504,63507,63549,63578,63579,63580,63631,63632,63633,63645,63649,63666,63705,63706,63708,63711,63716,63717,63722,63723,63725,63726,63737,63776,63793,63796,63797,63814,63824,63868,63909,63927,63929,63949,63966,64029,64053,64081,64083,64085,64087,64090,64091,64092,64096,64097,64098,64099,64100,64101,64103,64106,64111,64116,64151,64152,64156,64176,64179,64196,64197,64199,64200,64208,64233,64255,64272,64274,64299,64304,64329,64330,64331,64333,64334,64335,64358,64377,64385,64466,64467,64502,64557,64585,64594,64639,64643,64644,64656,64658,64662,64720,64730,64736,64737,64746,64754,64782,64785,64818,64833,64854,64889,64891,64900,64910,64912,64928,64929,64945,64949,64952,64954,64955,64961,64962,64963,64986,65002,65003,65051,65053,65054,65057,65067,65094,65097,65112,65114,65116,65130,65131,65132,65169,65172,65173,65174,65179,65200,65214,65221,65228,65233,65235,65246,65247,65252,65255,65258,65259,65261,65263,65269,65273,65288,65289,65290,65296,65298,65302,65307,65309,65316,65317,65318,65319,65320,65324,65332,65352,65354,65363,65376,65382,65385,65389,65391,65395,65415,65416,65418,65419,65420,65423,65424,65425,65426,65427,65429,65435,65436,65437,65438,65440,65442,65443,65446,65448,65449,65451,65452,65459,65460,65462,65463,65464,65466,65470,65471,65474,65477,65493,65497,65535,65537,65558,65559,65562,65573,65577,65592,65598,65602,65604,65606,65608,65610,65614,65619,65626,65629,65633,65635,65637,65641,65643,65645,65648,65653,65657,65659,65661,65663,65664,65667,65683,65684,65687,65704,65717,65724,65745,65749,65760,65766,65771,65779,65785,65820,65853,65860,65861,65873,65892,65895,65904,65908,65916,65924,66015,66022,66024,66027,66029,66036,66037,66038,66040,66041,66043,66044,66055,66065,66072,66094,66097,66099,66107,66118,66129,66130,66132,66134,66148,66166,66194,66196,66250,66252,66259,66260,66262,66264,66265,66273,66276,66280,66283,66293,66308,66313,66326,66334,66335,66338,66339,66340,66368,66371,66374,66380,66390,66394,66399,66405,66407,66410,66412,66415,66418,66426,66434,66441,66446,66452,66456,66464,66467,66473,66495,66498,66502,66504,66531,66533,66540,66542,66543,66608,66655,66703,66705,66722,66724,66749,66753,66778,67197,67210,67219,67230,67236,67243,67244,67250,67254,67259,67260,67268,67269,67270,67271,67272,67275,67278,67281,67282,67284,67288,67289,67292,67297,67298,67299,67305,67311,67312,67314,67318,67319,67322,67329,67330,67331,67332,67333,67334,67335,67336,67337,67342,67345,67346,67351,67352,67355,67358,67359,67362,67367,67372,67374,67377,67378,67379,67380,67381,67387,67393,67396,67400,67404,67408,67409,67412,67415,67420,67421,67423,67425,67427,67428,67430,67431,67432,67433,67439,67440,67441,67447,67448,67449,67457,67458,67461,67464,67468,67471,67475,67478,67482,67483,67487,67488,67490,67493,67496,67500,67505,67508,67511,67512,67513,67518,67522,67523,67524,67526,67527,67530,67536,67537,67540,67546,67549,67555,67559,67561,67564,67571,67572,67574,67580,67584,67589,67593,67616,67617,67618,67639,67661,67663,67666,67667,67668,67671,67672,67713,67721,67728,67729,67730,67734,67735,67736,67738,67739,67742,67745,67753,67756,67757,67758,67759,67760,67767,67773,67780,67781,67789,67792,67793,67800,67803,67804,67807,67809,67810,67813,67814,67818,67820,67821,67823,67826,67828,67829,67830,67831,67832,67834,67841,67844,67847,67848,67853,67854,67855,67859,67860,67867,67871,67874,67876,67877,67878,67879,67881,67884,67887,67893,67898,67900,67904,67909,67913,67917,67918,67919,67923,67925,67926,67927,67928,67929,67930,67931,67937,67938,67942,67944,67947,67952,67953,67954,67955,67956,67959,67962,67963,67970,67973,67977,67980,67983,67986,67987,67990,67991,67992,67996,67998,68000,68001,68003,68004,68006,68007,68010,68012,68013,68016,68017,68018,68019,68021,68025,68032,68035,68036,68037,68040,68041,68044,68046,68052,68054,68055,68058,68059,68062,68069,68072,68077,68078,68079,68082,68083,68086,68087,68088,68093,68094,68095,68097,68098,68099,68101,68106,68108,68110,68111,68113,68114,68118,68119,68124,68125,68132,68137,68138,68139,68144,68147,68151,68154,68160,68161,68165,68168,68170,68174,68177,68179,68184,68185,68190,68193,68196,68200,68205,68209,68210,68214,68218,68223,68226,68230,68233,68236,68239,68240,68247,68250,68254,68256,68260,68261,68263,68268,68275,68278,68279,68280,68283,68285,68293,68296,68300,68304,68307,68310,68313,68316,68320,68323,68326,68331,68334,68337,68341,68344,68347,68351,68352,68354,68358,68361,68368,68371,68376,68379,68383,68390,68391,68394,68397,68407,68410,68415,68416,68417,68424,68429,68431,68432,68446,68449,68450,68451,68452,68453,68454,68456,68457,68459,68460,68461,68464,68465,68467,68472,68473,68475,68480,68481,68482,68483,68487,68492,68493,68500,68502,68503,68508,68514,68515,68519,68524,68528,68532,68533,68537,68538,68539,68545,68549,68551,68553,68554,68563,68568,68572,68577,68580,68584,68585,68586,68590,68593,68595,68598,68599,68603,68604,68607,68612,68618,68621,68628,68632,68633,68637,68638,68639,68640,68641,68642,68648,68650,68651,68653,68657,68661,68662,68663,68665,68669,68670,68671,68672,68676,68682,68685,68688,68689,68694,68695,68697,68698,68699,68707,68708,68709,68714,68716,68717,68723,68724,68726,68729,68732,68735,68736,68739,68745,68747,68751,68752,68757,68760,68765,68767,68770,68772,68775,68778,68779,68780,68782,68790,68791,68793,68795,68800,68804,68805,68808,68811,68817,68818,68821,68824,68827,68830,68836,68839,68845,68847,68854,68855,68857,68859,68863,68866,68869,68870,68871,68875,68887,68888,68892,68893,68993,68994,68995,69001,69002,69005,69009,69010,69016,69017,69018,69021,69023,69027,69045,69047,69060,69063,69065,69066,69077,69092,69093,69105,69111,69114,69116,69119,69121,69123,69127,69130,69131,69132,69135,69138,69144,69145,69158,69159,69161,69163,69194,69199,69201,69212,69213,69215,69216,69220,69224,69229,69237,69240,69252,69262,69270,69279,69288,69294,69296,69297,69299,69315,69319,70948,70951,71083,71089,71126,71131,71212,71213,71214,71225,71226,71227,71228,71315,71359,71368,71396,71398,71404,71408,71420,71422,71424,71426,71454,71462,71480,71489,71507,71508,71520,71544,71605,71622,71636,71716,71717,71746,71757,71763,71769,71843,71860,71862,71864,71868,71870,71876,71950,71953,71959,71967,71992,72038,72040,72042,72048,72059,72114,72115,72116,72135,72144,72161,72162,72261,72336,72337,72374,72386,72454,72470,72484,72523,72535,72539,72604,72653,72655,72657,72693,72720,72721,72737,72739,72756,72850,72874,72875,72884,72928,72929,72948,72949,72950,72953,73013,73018,73022,73024,73025,73033,73034,73035,73036,73041,73089,73098,73106,73108,73158,73161,73163,73201,73224,73384,73405,73420,73431,73432,73437,73471,73490,73491,73492,73493,73544,73563,73573,73587,73599,73632,73653,73677,73704,73705,73706,73749,73764,73767,73768,73769,73770,73771,73777,73780,73782,73786,73787,73792,73794,73797,73798,73799,73802,73806,73807,73808,73810,73814,73815,73817,73819,73827,73828,73833,73834,73835,73836,73837,73842,73846,73848,73849,73852,73855,73857,73858,73860,73868,73873,73874,73879,73880,73887,73888,73893,73901,73902,73903,73904,73906,73907,73910,73913,73916,73918,73919,73921,73922,73924,73925,73926,73927,73930,73931,73936,73937,73941,73943,73945,73947,73949,73950,73952,73955,73959,73961,73963,73984,73986,73987,73990,73991,73993,73995,73996,73998,74000,74001,74004,74007,74008,74009,74011,74017,74018,74019,74020,74021,74022,74023,74028,74029,74034,74041,74042,74044,74048,74051,74054,74056,74057,74058,74059,74060,74061,74062,74063,74064,74067,74068,74072,74073,74079,74082,74083,74086,74095,74098,74100,74102,74105,74109,74116,74119,74120,74121,74123,74124,74126,74134,74135,74136,74137,74142,74148,74150,74152,74153,74159,74163,74164,74170,74173,74174,74184,74191,74201,74213,74223,74238,74247,74248,74250,74255,74258,74259,74268,74276,74290,74292,74303,74304,74305,74377,74395,74405,74415,74428,74442,74451,74459,74474,74492,74493,74502,74509,74524,74532,74546,74681,74756,74772,74802,74831,74836,74839,74842,74846,74856,74861,74862,74998,75019,75262,75266,75317,75332,75453,75487,75503,75511,75565,75566,75573,75589,75590,75681,75687,75711,75827,75976,76007,76011,76012,76088,76128,76146,76251,76252,76253,76325,76360,76369,76439,76453,76454,76465,76467,76468,76470,76485,76525,76529,76532,76605,76611,76639,76653,76664,76670,76674,76675,76676,76677,76679,76680,76681,76724,76864,76932,77004,77013,77052,77056,77076,77079,77098,77099,77110,77124,77132,77149,77155,77167,77169,77172,77181,77185,77190,77193,77205,77243,77256,77273,77276,77291,77307,77311,77312,77318,77326,77329,77334,77335,77343,77344,77352,77353,77368,77376,77377,77382,77390,77404,77412,77461,77466,77472,77493,77519,77520,77525,77571,77573,77644,77647,77648,77828,77858,77867,77871,77874,77877,77890,78182,78187,78188,78384,78386,78388,78397,78402,78404,78411,78518,78519,78528,78541,78570,78592,78685,78693,78703,78729,78743,78746,78751,78801,78803,78810,78824,78828,78829,78837,78869,78884,78897,78933,78949,78953,78996,79001,79004,79035,79077,79097,79100,79113,79116,79118,79130,79138,79142,79171,79194,79202,79218,79222,79250,79259,79262,79271,79281,79284,79287,79301,79309,79312,79314,79317,79319,79324,79330,79335,79372,79373,79374,79393,79526,79728,79733,79754,79760,79775,79781,79784,79802,79861,79862,79864,79868,79871,79875,79878,79933,79991,80002,80003,80095,80109,80111,80131,80136,80139,80141,80152,80153,80157,80159,80161,80178,80195,80197,80199,80200,80205,80242,80244,80246,80269,80273,80282,80315,80319,80323,80338,80345,80357,80373,80378,80408,80412,80415,80416,80418,80419,80435,80437,80448,80450,80451,80454,80465,80467,80468,80475,80483,80511,80514,80517,80529,80530,80538,80540,80558,80602,80611,80618,80619,80622,80628,80641,80643,80644,80647,80649,80652,80662,80666,80674,80701,80702,80714,80728,80757,80773,80805,80824,80826,80905,80906,80907,80908,80909,80910,80912,80915,80922,80931,80942,80944,80946,80947,80950,80954,80965,80966,80973,80977,80997,81074,81075,81076,81082,81085,81087,81095,81096,81099,81105,81154,81155,81161,81207,81212,81225,81239,81280,81281,81282,81283,81284,81285,81286,81290,89326,89327,89375,89378,89394,89403,89410,89412,89413,89416,89419,89427,89432,89444,89446,89448,89462,89464,89481,89485,89496,89498,89515,89535,89551,89552,89553,89661,89663,89668,89687,89723,89777,89781,89782,89795,89798,89802,89826,89882,89953,90001,90014,90015,90016,90026,90029,90030,90031,90032,90033,90059,90060,90075,90078,90094,90099,90151,90152,90154,90155,90159,90163,90171,90172,90176,90241,90248,90249,90250,90251,90255,90258,90259,90263,90317,90328,90329,90341,90349,90366,90367,90368,90370,90379,90380,90400,90401,90415,90420,90428,90429,90430,90431,90432,90433,90434,90435,90437,90438,90440,90441,90442,90443,90444,90465,90468,90480,90481,90482,90491,90501,90505,90506,90525,90526,90530,90538,90539,90540,90541,90543,90544,90546,90547,90548,90549,90550,90580,90584,90585,90586,90587,90589,90590,90592,90594,90595,90601,90612,90636,90661,90726,90728,90730,90732,90780,90809,90814,90946,90950,90996,91014,91019,91118,91120,91121,91126,91127,91132,91135,91178,91274,91275,91283,91293,91328,91349,91351,91352,91353,91354,91389,91412,91433,91437,91463,91479,91486,91496,91511,91531,91535,91547,91603,91637,91642,91653,91684,91685,91690,91695,91698,91699,91722,91737,91752,91758,91793,91795,91811,91816,91853,91854,91878,91957,91963,91983,91988,91989,91996,91999,92019,92021,92022,92030,92038,92051,92056,92071,92095,92099,92164,92165,92174,92199,92220,92236,92237,92314,92316,92323,92325,92334,92344,92372,92373,92375,92444,92445,92485,92486,92487,92488,92489,92491,92492,92493,92495,92499,92501,92503,92505,92507,92508,92510,92512,92529,92549,92566,92585,93138,93140,93154,93156,93158,93195,93249,93250,93416,93417,93427,93428,93436,93440,93442,93443,93447,93448,93449,93450,93452,93453,93456,93457,93458,93459,93461,93466,93468,93469,93471,93472,93475,93476,93477,93480,93481,93493,93494,93495,93542,93547,93549,93550,93554,93560,93561,93582,93585,93595,93596,93597,93598,93603,93604,93611,93612,93618,93619,93622,93623,93635,93685,93736,93759,93775,93803,93806,93808,93809,93810,93811,93828,93829,93830,93831,93835,93836,93839,93869,93885,93889,93893,93947,93956,93963,93965,93967,93972,93973,93974,93979,93983,93990,93994,93995,93996,93998,94071,94094,94117,94146,94147,94170,94174,94218,94233,94247,94268,94318,94572,94604,94756,94787,94788,94789,94882,94885,94913,94976,94991,94995,94998,94999,95008,95369,95382,95660,95682,95683,95684,95806,95833,95883,95918,95927,95928,95930,96026,96077,96091,96103,96116,96128,96173,96245,96246,96247,96271,96274,96313,96315,96322,96421,96424,96435,96481,96482,96483,96555,96604,96657,96969,96988,97227,97231,97239,97240,97241,97242,97365,97463,97496,97526,97556,97580,97595,97630,97642,97943,97945,98103,98219,98249,98250,98263,98276,98277,98406,98453,98454,98464,98522,98525,98537,98538,98539,98540,98569,98570,98571,98680,98681,98682,98717,98745,98879,98968,98971,98988,99032,99033,99034,99039,99043,99056,99057,99066,99067,99070,99087,99088,99122,99123,99124,99144,99182,99183,99186,99189,99195,99204,99212,99215,99229,99234,99237,99239,99246,99247,99249,99255,99262,99263,99265,99271,99273,99278,99280,99285,99296,99318,99321,99329,99331,99339,99341,99343,99348,99349,99350,99352,99353,99355,99357,99360,99364,99373,99374,99378,99379,99380,99384,99394,99398,99407,99413,99424,99425,99426,99431,99434,99440,99442,99443,99446,99447,99449,99450,99460,99462,99464,99469,99470,99484,99493,99498,99500,99502,99504,99507,99509,99511,99512,99513,99518,99521,99526,99527,99543,99564,99573,99581,99584,99585,99587,99595,99599,99605,99612,99613,99614,99670,99671,99672,99673,99675,99697,99713,99722,99723,99728,99730,99731,99742,99748,99750,99762,99764,105544,105545,105546,105547,105548,105549,105551,105553,105566,105568,105571,105592,105614,105615,105618,105619,105622,105630,105632,105634,105635,105636,105637,105639,105643,105644,105645,105646,105654,105655,105660,105661,105662,105663,105668,105676,105679,105680,105681,105682,105684,105685,105686,105688,105689,105690,105691,105692,105694,105695,105696,105700,105701,105702,105703,105704,105710,105714,105715,105716,105719,105722,105723,105724,105725,105726,105727,105728,105730,105737,105739,105740,105756,105760,105761,105762,105764,105765,105766,105768,105775,105776,105777,105781,105783,105784,105786,105787,105789,105790,105793,105794,105795,105805,105806,105807,105808,105809,105810,105813,105814,105815,105816,105818,105828,105831,105832,105833,105838,105839,105840,105842,105843,105844,105845,105846,105847,105848,105857,105860,105861,105864,105865,105866,105867,105871,105880,105881,105884,105889,105891,105892,105895,105896,105897,105898,105899,105900,105901,105902,105903,105907,105908,105913,105914,105915,105916,105927,105928,105929,105930,105931,105932,105933,105948,105954,105955]
    error = []
    for row in rows:
        try:
            lm_id = row[0]
            if lm_id in exist:
                continue
            lm_graph = row[8]
            lm_graph = json.loads(lm_graph)
            code = row[2]
            new_nodes = fetch_nodes(code)

            extract_lines = row[5]
            extract_line_numbers = fetch_extract_line_numbers(extract_lines)

            nodes = lm_graph["nodes"]


            print('parse: ', str(lm_id))
            for index, node in enumerate(nodes):
                if index == 0:
                    continue

                node["start_line"] = 0
                node["end_line"] = 0

                if hasattr(new_nodes[index-1].sr_statement, "start_line"):
                    node["start_line"] = new_nodes[index-1].sr_statement.start_line
                    node["end_line"] = new_nodes[index - 1].sr_statement.end_line

                statement_line_numbers = list(range(node["start_line"], node["end_line"]+1))
                contains_all = all(elem in extract_line_numbers for elem in statement_line_numbers)
                if contains_all:
                    node["is_extract"] = 1
                else:
                    node["is_extract"] = 0

            lm_graph_str = json.dumps(lm_graph)
            query = (r"update lm_master set graph=%s where lm_id=%s;")
            print('update: ', str(lm_id))
            values = (lm_graph_str, lm_id)
            cursor.execute(query, values)
            db.commit()
        except Exception as e:
            print(e)
            error.append(lm_id)
            continue

        # print(nodes)
        print("error")
        print(error)


def check_auto_count():
    count = 0
    for key in project_auto_dict.keys():
        auto_file_path = project_auto_dict[key] / "lm"
        if os.path.exists(auto_file_path) is False:
            os.mkdir(auto_file_path)
        auto_index_path = auto_file_path / "index.csv"
        with open(auto_index_path, mode='r', encoding="utf-8") as file:
            reader = csv.reader(file)
            for index, row in enumerate(reader):
                if index > 0:
                    print(row)
                    count += 1
                    # path = auto_file_path / (row[1] + ".java")
                    # ast = KASTParse(path, "java")
                    # ast.setup()
                    # file = open(path, encoding='utf-8')
                    # file_content = file.read()
    print(count)

if __name__ == '__main__':
    # for key in project_auto_dict.keys():
    #     print(key)
    #     gen_auto_graph(key)
    # gen_original_graph("jgrapht")
    # gen_auto_graph("jgrapht")

    mark_pos_nodes()
    # check_auto_count()